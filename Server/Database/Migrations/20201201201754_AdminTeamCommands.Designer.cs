// <auto-generated />
using System;
using System.Net;
using GTANetworkAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TDS.Server.Database.Entity;
using TDS.Shared.Data.Enums;
using TDS.Shared.Data.Enums.Challenge;
using TDS.Shared.Data.Enums.Userpanel;

namespace TDS.Server.Database.Migrations
{
    [DbContext(typeof(TDSDbContext))]
    [Migration("20201201201754_AdminTeamCommands")]
    partial class AdminTeamCommands
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "challenge_frequency", new[] { "hourly", "daily", "weekly", "monthly", "yearly", "forever" })
                .HasPostgresEnum(null, "challenge_type", new[] { "kills", "assists", "damage", "play_time", "round_played", "bomb_defuse", "bomb_plant", "killstreak", "buy_maps", "review_maps", "read_the_rules", "read_the_faq", "change_settings", "join_discord_server", "write_helpful_issue", "creator_of_accepted_map", "be_helpful_enough" })
                .HasPostgresEnum(null, "freeroam_vehicle_type", new[] { "car", "helicopter", "plane", "bike", "boat" })
                .HasPostgresEnum(null, "language", new[] { "german", "english" })
                .HasPostgresEnum(null, "lobby_type", new[] { "main_menu", "fight_lobby", "arena", "gang_lobby", "map_create_lobby", "char_create_lobby", "gang_action_lobby", "damage_test_lobby" })
                .HasPostgresEnum(null, "log_type", new[] { "kick", "ban", "mute", "next", "login", "register", "lobby_join", "lobby_leave", "lobby_kick", "lobby_ban", "goto", "remove_map", "voice_mute", "reset_password", "set_admin", "set_admin_leader", "set_vip" })
                .HasPostgresEnum(null, "map_limit_type", new[] { "kill_after_time", "teleport_back_after_time", "block", "display" })
                .HasPostgresEnum(null, "ped_body_part", new[] { "head", "neck", "torso", "genital_region", "arm", "hand", "leg", "foot" })
                .HasPostgresEnum(null, "player_relation", new[] { "none", "block", "friend" })
                .HasPostgresEnum(null, "rule_category", new[] { "general", "chat" })
                .HasPostgresEnum(null, "rule_target", new[] { "user", "admin", "vip" })
                .HasPostgresEnum(null, "scoreboard_player_sorting", new[] { "name", "play_time", "kills", "assists", "deaths", "kills_deaths_ratio", "kills_deaths_assists_ratio" })
                .HasPostgresEnum(null, "support_type", new[] { "question", "help", "compliment", "complaint" })
                .HasPostgresEnum(null, "time_span_units_of_time", new[] { "second", "minute", "hour_minute", "hour", "day", "week" })
                .HasPostgresEnum(null, "userpanel_admin_question_answer_type", new[] { "text", "check", "number" })
                .HasPostgresEnum(null, "vehicle_hash", new[] { "ninef", "ninef2", "blista", "asea", "asea2", "boattrailer", "bus", "armytanker", "armytrailer", "armytrailer2", "freighttrailer", "coach", "airbus", "asterope", "airtug", "ambulance", "barracks", "barracks2", "baller", "baller2", "bjxl", "banshee", "benson", "bfinjection", "biff", "blazer", "blazer2", "blazer3", "bison", "bison2", "bison3", "boxville", "boxville2", "boxville3", "bobcatxl", "bodhi2", "buccaneer", "buffalo", "buffalo2", "bulldozer", "bullet", "blimp", "burrito", "burrito2", "burrito3", "burrito4", "burrito5", "cavalcade", "cavalcade2", "policet", "gburrito", "cablecar", "caddy", "caddy2", "camper", "carbonizzare", "cheetah", "comet2", "cogcabrio", "coquette", "cutter", "gresley", "dilettante", "dilettante2", "dune", "dune2", "hotknife", "dloader", "dubsta", "dubsta2", "dump", "rubble", "docktug", "dominator", "emperor", "emperor2", "emperor3", "entityxf", "exemplar", "elegy2", "f620", "fbi", "fbi2", "felon", "felon2", "feltzer2", "firetruk", "flatbed", "forklift", "fq2", "fusilade", "fugitive", "futo", "granger", "gauntlet", "habanero", "hauler", "handler", "infernus", "ingot", "intruder", "issi2", "jackal", "journey", "jb700", "khamelion", "landstalker", "lguard", "manana", "mesa", "mesa2", "mesa3", "crusader", "minivan", "mixer", "mixer2", "monroe", "mower", "mule", "mule2", "oracle", "oracle2", "packer", "patriot", "pbus", "penumbra", "peyote", "phantom", "phoenix", "picador", "pounder", "police", "police4", "police2", "police3", "policeold1", "policeold2", "pony", "pony2", "prairie", "pranger", "premier", "primo", "proptrailer", "rancherxl", "rancherxl2", "rapidgt", "rapidgt2", "radi", "ratloader", "rebel", "regina", "rebel2", "rentalbus", "ruiner", "rumpo", "rumpo2", "rhino", "riot", "ripley", "rocoto", "romero", "sabregt", "sadler", "sadler2", "sandking", "sandking2", "schafter2", "schwarzer", "scrap", "seminole", "sentinel", "sentinel2", "zion", "zion2", "serrano", "sheriff", "sheriff2", "speedo", "speedo2", "stanier", "stinger", "stingergt", "stockade", "stockade3", "stratum", "sultan", "superd", "surano", "surfer", "surfer2", "surge", "taco", "tailgater", "taxi", "trash", "tractor", "tractor2", "tractor3", "graintrailer", "baletrailer", "tiptruck", "tiptruck2", "tornado", "tornado2", "tornado3", "tornado4", "tourbus", "towtruck", "towtruck2", "utillitruck", "utillitruck2", "utillitruck3", "voodoo2", "washington", "stretch", "youga", "ztype", "sanchez", "sanchez2", "scorcher", "tribike", "tribike2", "tribike3", "fixter", "cruiser", "bmx", "policeb", "akuma", "carbonrs", "bagger", "bati", "bati2", "ruffian", "daemon", "double", "pcj", "vader", "vigero", "faggio2", "hexer", "annihilator", "buzzard", "buzzard2", "cargobob", "cargobob2", "cargobob3", "skylift", "polmav", "maverick", "nemesis", "frogger", "frogger2", "cuban800", "duster", "stunt", "mammatus", "jet", "shamal", "luxor", "titan", "lazer", "cargoplane", "squalo", "marquis", "dinghy", "dinghy2", "jetmax", "predator", "tropic", "seashark", "seashark2", "submersible", "freightcar", "freight", "freightcont1", "freightcont2", "freightgrain", "tankercar", "metrotrain", "docktrailer", "trailers", "trailers2", "trailers3", "tvtrailer", "raketrailer", "tanker", "trailerlogs", "tr2", "tr3", "tr4", "trflat", "trailersmall", "velum", "adder", "voltic", "vacca", "suntrap", "impaler3", "monster4", "monster5", "slamvan6", "issi6", "cerberus2", "cerberus3", "deathbike2", "dominator6", "deathbike3", "impaler4", "slamvan4", "slamvan5", "brutus", "brutus2", "brutus3", "deathbike", "dominator4", "dominator5", "bruiser", "bruiser2", "bruiser3", "rcbandito", "italigto", "cerberus", "impaler2", "monster3", "tulip", "scarab", "scarab2", "scarab3", "issi4", "issi5", "clique", "deveste", "vamos", "imperator", "imperator2", "imperator3", "toros", "deviant", "schlagen", "impaler", "zr380", "zr3802", "zr3803", "nimbus", "xls", "xls2", "seven70", "fmj", "bestiagts", "pfister811", "brickade", "rumpo3", "volatus", "prototipo", "reaper", "tug", "windsor2", "trailers4", "xa21", "caddy3", "vagner", "phantom3", "nightshark", "cheetah2", "torero", "hauler2", "trailerlarge", "technical3", "insurgent3", "apc", "tampa3", "dune3", "trailersmall2", "halftrack", "ardent", "oppressor", "mule3", "velum2", "tanker2", "casco", "boxville4", "hydra", "insurgent", "insurgent2", "gburrito2", "technical", "dinghy3", "savage", "enduro", "guardian", "lectro", "kuruma", "kuruma2", "trash2", "barracks3", "valkyrie", "slamvan2", "rhapsody", "warrener", "blade", "glendale", "panto", "dubsta3", "pigalle", "elegy", "tempesta", "italigtb", "italigtb2", "nero", "nero2", "specter", "specter2", "diablous", "diablous2", "blazer5", "ruiner2", "dune4", "dune5", "phantom2", "voltic2", "penetrator", "boxville5", "wastelander", "technical2", "fcr", "fcr2", "comet3", "ruiner3", "monster", "sovereign", "sultanrs", "banshee2", "faction3", "minivan2", "sabregt2", "slamvan3", "tornado5", "virgo2", "virgo3", "innovation", "hakuchou", "furoregt", "verlierer2", "nightshade", "mamba", "limo2", "schafter3", "schafter4", "schafter5", "schafter6", "cog55", "cog552", "cognoscenti", "cognoscenti2", "baller3", "baller4", "baller5", "baller6", "toro2", "seashark3", "dinghy4", "tropic2", "speeder2", "cargobob4", "supervolito", "supervolito2", "valkyrie2", "swift2", "luxor2", "feltzer3", "osiris", "virgo", "windsor", "coquette3", "vindicator", "t20", "brawler", "toro", "chino", "miljet", "besra", "coquette2", "swift", "vigilante", "bombushka", "alphaz1", "seabreeze", "tula", "havok", "hunter", "microlight", "rogue", "pyro", "howard", "mogul", "starling", "nokota", "molotok", "rapidgt3", "retinue", "cyclone", "visione", "lynx", "gargoyle", "tyrus", "sheava", "omnis", "le7b", "contender", "trophytruck", "trophytruck2", "rallytruck", "cliffhanger", "bf400", "tropos", "brioso", "tampa2", "btype", "submersible2", "dukes", "dukes2", "buffalo3", "dominator2", "dodo", "marshall", "blimp2", "gauntlet2", "stalion", "stalion2", "blista2", "blista3", "entity2", "cheburek", "jester3", "caracara", "hotring", "seasparrow", "flashgt", "ellie", "michelli", "fagaloa", "dominator3", "tyrant", "tezeract", "gb200", "issi3", "taipan", "stafford", "scramjet", "strikeforce", "terbyte", "pbus2", "oppressor2", "pounder2", "speedo4", "freecrawler", "mule4", "menacer", "blimp3", "swinger", "patriot2", "tornado6", "faggio3", "faggio", "raptor", "vortex", "avarus", "sanctus", "youga2", "hakuchou2", "nightblade", "chimera", "esskey", "wolfsbane", "zombiea", "zombieb", "defiler", "daemon2", "ratbike", "shotaro", "manchez", "blazer4", "jester2", "massacro2", "ratloader2", "slamvan", "z190", "viseris", "comet5", "raiden", "riata", "sc1", "autarch", "savestra", "gt500", "comet4", "neon", "sentinel3", "khanjali", "barrage", "volatol", "akula", "deluxo", "stromberg", "chernobog", "riot2", "avenger", "avenger2", "thruster", "yosemite", "hermes", "hustler", "streiter", "revolter", "pariah", "kamacho", "lurcher", "btype2", "faction", "faction2", "moonbeam", "moonbeam2", "primo2", "chino2", "buccaneer2", "voodoo", "turismo2", "infernus2", "gp1", "ruston", "btype3", "paragon", "paragon2", "jugular", "rrocket", "neo", "krieger", "peyote2", "gauntlet4", "s80", "caracara2", "thrax", "novak", "zorrusso", "issi7", "locust", "emerus", "hellion", "dynasty", "gauntlet3", "nebula", "zion3", "drafter", "tampa", "bifta", "speeder", "kalahari", "paradise", "jester", "turismor", "alpha", "vestra", "zentorno", "massacro", "huntley", "thrust", "minitank", "retinue2", "outlaw", "yosemite2", "stryder", "jb7002", "sultan2", "everon", "sugoi", "zhaba", "formula", "formula2", "rebla", "vagrant", "furia", "vstr", "komoda", "asbo", "kanjo", "imorgon" })
                .HasPostgresEnum(null, "weapon_hash", new[] { "advancedrifle", "appistol", "assaultrifle", "assaultrifle_mk2", "assaultshotgun", "assaultsmg", "autoshotgun", "ball", "bat", "battleaxe", "bottle", "bullpuprifle", "bullpuprifle_mk2", "bullpupshotgun", "bzgas", "carbinerifle", "carbinerifle_mk2", "combatmg", "combatmg_mk2", "combatpdw", "combatpistol", "compactlauncher", "compactrifle", "crowbar", "dagger", "dbshotgun", "doubleaction", "fireextinguisher", "firework", "flare", "flaregun", "flashlight", "golfclub", "grenade", "grenadelauncher", "grenadelauncher_smoke", "gusenberg", "hammer", "hatchet", "heavypistol", "heavyshotgun", "heavysniper", "heavysniper_mk2", "hominglauncher", "knife", "knuckle", "machete", "machinepistol", "marksmanpistol", "marksmanrifle", "marksmanrifle_mk2", "mg", "microsmg", "minigun", "minismg", "molotov", "musket", "nightstick", "parachute", "petrolcan", "pipebomb", "pistol", "pistol_mk2", "pistol50", "poolcue", "proximine", "pumpshotgun", "pumpshotgun_mk2", "railgun", "revolver", "revolver_mk2", "rpg", "sawnoffshotgun", "smg", "smg_mk2", "smokegrenade", "sniperrifle", "snowball", "snspistol", "snspistol_mk2", "stone_hatchet", "specialcarbine", "specialcarbine_mk2", "stickybomb", "stungun", "switchblade", "unarmed", "vintagepistol", "wrench", "raypistol", "raycarbine", "rayminigun", "ceramic_pistol", "hazard_can", "navy_revolver" })
                .HasPostgresEnum(null, "weapon_type", new[] { "melee", "handgun", "machine_gun", "assault_rifle", "sniper_rifle", "shotgun", "heavy_weapon", "thrown_weapon", "rest" })
                .HasPostgresExtension("tsm_system_rows")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TDS.Server.Database.Entity.Admin.AdminLevelNames", b =>
                {
                    b.Property<short>("Level")
                        .HasColumnType("smallint");

                    b.Property<Language>("Language")
                        .HasColumnType("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Level", "Language");

                    b.ToTable("AdminLevelNames");

                    b.HasData(
                        new
                        {
                            Level = (short)0,
                            Language = Language.English,
                            Name = "User"
                        },
                        new
                        {
                            Level = (short)0,
                            Language = Language.German,
                            Name = "User"
                        },
                        new
                        {
                            Level = (short)1,
                            Language = Language.English,
                            Name = "Supporter"
                        },
                        new
                        {
                            Level = (short)1,
                            Language = Language.German,
                            Name = "Supporter"
                        },
                        new
                        {
                            Level = (short)2,
                            Language = Language.English,
                            Name = "Administrator"
                        },
                        new
                        {
                            Level = (short)2,
                            Language = Language.German,
                            Name = "Administrator"
                        },
                        new
                        {
                            Level = (short)3,
                            Language = Language.English,
                            Name = "Projectleader"
                        },
                        new
                        {
                            Level = (short)3,
                            Language = Language.German,
                            Name = "Projektleiter"
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Admin.AdminLevels", b =>
                {
                    b.Property<short>("Level")
                        .HasColumnType("smallint");

                    b.Property<short>("ColorB")
                        .HasColumnType("smallint");

                    b.Property<short>("ColorG")
                        .HasColumnType("smallint");

                    b.Property<short>("ColorR")
                        .HasColumnType("smallint");

                    b.HasKey("Level");

                    b.ToTable("AdminLevels");

                    b.HasData(
                        new
                        {
                            Level = (short)0,
                            ColorB = (short)220,
                            ColorG = (short)220,
                            ColorR = (short)220
                        },
                        new
                        {
                            Level = (short)1,
                            ColorB = (short)113,
                            ColorG = (short)202,
                            ColorR = (short)113
                        },
                        new
                        {
                            Level = (short)2,
                            ColorB = (short)85,
                            ColorG = (short)132,
                            ColorR = (short)253
                        },
                        new
                        {
                            Level = (short)3,
                            ColorB = (short)50,
                            ColorG = (short)50,
                            ColorR = (short)222
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Bonusbot.BonusbotSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal?>("ActionsInfoChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("AdminApplicationsChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("BansInfoChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("ErrorLogsChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("RefreshServerStatsFrequencySec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<bool>("SendPrivateMessageOnBan")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendPrivateMessageOnOfflineMessage")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("ServerInfosChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("SupportRequestsChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("BonusbotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionsInfoChannelId = 659088752890871818m,
                            AdminApplicationsChannelId = 659072893526736896m,
                            BansInfoChannelId = 659705941771550730m,
                            ErrorLogsChannelId = 659073884796092426m,
                            GuildId = 320309924175282177m,
                            RefreshServerStatsFrequencySec = 0,
                            SendPrivateMessageOnBan = true,
                            SendPrivateMessageOnOfflineMessage = true,
                            ServerInfosChannelId = 659073271911809037m,
                            SupportRequestsChannelId = 659073029896142855m
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Challenge.ChallengeSettings", b =>
                {
                    b.Property<ChallengeType>("Type")
                        .HasColumnType("challenge_type");

                    b.Property<ChallengeFrequency>("Frequency")
                        .HasColumnType("challenge_frequency");

                    b.Property<int>("MaxNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("MinNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Type", "Frequency");

                    b.ToTable("ChallengeSettings");

                    b.HasData(
                        new
                        {
                            Type = ChallengeType.Assists,
                            Frequency = ChallengeFrequency.Weekly,
                            MaxNumber = 100,
                            MinNumber = 50
                        },
                        new
                        {
                            Type = ChallengeType.BeHelpfulEnough,
                            Frequency = ChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = ChallengeType.BombDefuse,
                            Frequency = ChallengeFrequency.Weekly,
                            MaxNumber = 10,
                            MinNumber = 5
                        },
                        new
                        {
                            Type = ChallengeType.BombPlant,
                            Frequency = ChallengeFrequency.Weekly,
                            MaxNumber = 10,
                            MinNumber = 5
                        },
                        new
                        {
                            Type = ChallengeType.BuyMaps,
                            Frequency = ChallengeFrequency.Forever,
                            MaxNumber = 500,
                            MinNumber = 500
                        },
                        new
                        {
                            Type = ChallengeType.ChangeSettings,
                            Frequency = ChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = ChallengeType.CreatorOfAcceptedMap,
                            Frequency = ChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = ChallengeType.Damage,
                            Frequency = ChallengeFrequency.Weekly,
                            MaxNumber = 100000,
                            MinNumber = 20000
                        },
                        new
                        {
                            Type = ChallengeType.JoinDiscordServer,
                            Frequency = ChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = ChallengeType.Kills,
                            Frequency = ChallengeFrequency.Weekly,
                            MaxNumber = 150,
                            MinNumber = 75
                        },
                        new
                        {
                            Type = ChallengeType.Killstreak,
                            Frequency = ChallengeFrequency.Weekly,
                            MaxNumber = 7,
                            MinNumber = 3
                        },
                        new
                        {
                            Type = ChallengeType.PlayTime,
                            Frequency = ChallengeFrequency.Weekly,
                            MaxNumber = 1500,
                            MinNumber = 300
                        },
                        new
                        {
                            Type = ChallengeType.ReadTheFAQ,
                            Frequency = ChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = ChallengeType.ReadTheRules,
                            Frequency = ChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = ChallengeType.ReviewMaps,
                            Frequency = ChallengeFrequency.Forever,
                            MaxNumber = 10,
                            MinNumber = 10
                        },
                        new
                        {
                            Type = ChallengeType.RoundPlayed,
                            Frequency = ChallengeFrequency.Weekly,
                            MaxNumber = 100,
                            MinNumber = 50
                        },
                        new
                        {
                            Type = ChallengeType.WriteHelpfulIssue,
                            Frequency = ChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Challenge.PlayerChallenges", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<ChallengeType>("Challenge")
                        .HasColumnType("challenge_type");

                    b.Property<ChallengeFrequency>("Frequency")
                        .HasColumnType("challenge_frequency");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("CurrentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("PlayerId", "Challenge", "Frequency");

                    b.ToTable("PlayerChallenges");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Command.CommandAlias", b =>
                {
                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short>("Command")
                        .HasColumnType("smallint");

                    b.HasKey("Alias", "Command");

                    b.HasIndex("Command");

                    b.ToTable("CommandAlias");

                    b.HasData(
                        new
                        {
                            Alias = "Announce",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "Announcement",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "ASay",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "OChat",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "OSay",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "AChat",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "ChatAdmin",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "InternChat",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "WriteAdmin",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "InternalChat",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "PBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "Permaban",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "RBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "TBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "Timeban",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "UBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "UnBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "GotoPlayer",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "GotoXYZ",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "Warp",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "WarpTo",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "WarpToPlayer",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "XYZ",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "RKick",
                            Command = (short)5
                        },
                        new
                        {
                            Alias = "BanLobby",
                            Command = (short)6
                        },
                        new
                        {
                            Alias = "KickLobby",
                            Command = (short)7
                        },
                        new
                        {
                            Alias = "PermaMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "PMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "RMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "TimeMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "TMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "EndRound",
                            Command = (short)9
                        },
                        new
                        {
                            Alias = "Next",
                            Command = (short)9
                        },
                        new
                        {
                            Alias = "Skip",
                            Command = (short)9
                        },
                        new
                        {
                            Alias = "Back",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "Leave",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "LeaveLobby",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "Mainmenu",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "Dead",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "Death",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "Die",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "Kill",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "AllChat",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "AllSay",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "G",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "GChat",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "Global",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "GlobalSay",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "PublicChat",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "PublicSay",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "TChat",
                            Command = (short)13
                        },
                        new
                        {
                            Alias = "TeamSay",
                            Command = (short)13
                        },
                        new
                        {
                            Alias = "TSay",
                            Command = (short)13
                        },
                        new
                        {
                            Alias = "PChat",
                            Command = (short)14
                        },
                        new
                        {
                            Alias = "PrivateSay",
                            Command = (short)14
                        },
                        new
                        {
                            Alias = "Coord",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "Coordinate",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "Coordinates",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "CurrentPos",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "CurrentPosition",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "GetPos",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "GetPosition",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "Pos",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "MSG",
                            Command = (short)18
                        },
                        new
                        {
                            Alias = "PM",
                            Command = (short)18
                        },
                        new
                        {
                            Alias = "PSay",
                            Command = (short)18
                        },
                        new
                        {
                            Alias = "CPC",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "ClosePM",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "ClosePrivateSay",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "StopPrivateChat",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "StopPrivateSay",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "OpenPrivateSay",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "OpenPM",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "OPC",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "UID",
                            Command = (short)19
                        },
                        new
                        {
                            Alias = "Ignore",
                            Command = (short)20
                        },
                        new
                        {
                            Alias = "IgnoreUser",
                            Command = (short)20
                        },
                        new
                        {
                            Alias = "Block",
                            Command = (short)20
                        },
                        new
                        {
                            Alias = "Unblock",
                            Command = (short)21
                        },
                        new
                        {
                            Alias = "PermaVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "PVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "RVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TimeVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "PermaMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "PMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "RMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TimeMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoicePermaMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoicePMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoiceRMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoiceTimeMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoiceTMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "MuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "MoneyGive",
                            Command = (short)24
                        },
                        new
                        {
                            Alias = "SendMoney",
                            Command = (short)24
                        },
                        new
                        {
                            Alias = "MoneySend",
                            Command = (short)24
                        },
                        new
                        {
                            Alias = "LobbyInvite",
                            Command = (short)25
                        },
                        new
                        {
                            Alias = "InviteLobby",
                            Command = (short)25
                        },
                        new
                        {
                            Alias = "InvitePlayerLobby",
                            Command = (short)25
                        },
                        new
                        {
                            Alias = "HouseCreate",
                            Command = (short)27
                        },
                        new
                        {
                            Alias = "NewHouse",
                            Command = (short)27
                        },
                        new
                        {
                            Alias = "HouseNew",
                            Command = (short)27
                        },
                        new
                        {
                            Alias = "OutputAdmins",
                            Command = (short)28
                        },
                        new
                        {
                            Alias = "ListAdmins",
                            Command = (short)28
                        },
                        new
                        {
                            Alias = "SetSupervisor",
                            Command = (short)30
                        },
                        new
                        {
                            Alias = "SetVorgesetzter",
                            Command = (short)30
                        },
                        new
                        {
                            Alias = "GiveVip",
                            Command = (short)31
                        },
                        new
                        {
                            Alias = "Supervisor",
                            Command = (short)32
                        },
                        new
                        {
                            Alias = "Vorgesetzter",
                            Command = (short)32
                        },
                        new
                        {
                            Alias = "GetSupervisor",
                            Command = (short)32
                        },
                        new
                        {
                            Alias = "GetAdminLeader",
                            Command = (short)32
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Command.CommandInfos", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<Language>("Language")
                        .HasColumnType("language");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id", "Language");

                    b.ToTable("CommandInfos");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Language = Language.German,
                            Info = "Schreibt öffentlich als ein Admin."
                        },
                        new
                        {
                            Id = (short)1,
                            Language = Language.English,
                            Info = "Writes public as an admin."
                        },
                        new
                        {
                            Id = (short)2,
                            Language = Language.German,
                            Info = "Schreibt intern nur den Admins."
                        },
                        new
                        {
                            Id = (short)2,
                            Language = Language.English,
                            Info = "Writes internally to admins only."
                        },
                        new
                        {
                            Id = (short)3,
                            Language = Language.German,
                            Info = "Bannt einen Spieler vom gesamten Server."
                        },
                        new
                        {
                            Id = (short)3,
                            Language = Language.English,
                            Info = "Bans a player out of the server."
                        },
                        new
                        {
                            Id = (short)4,
                            Language = Language.German,
                            Info = "Teleportiert den Nutzer zu einem Spieler (evtl. in sein Auto) oder zu den angegebenen Koordinaten."
                        },
                        new
                        {
                            Id = (short)4,
                            Language = Language.English,
                            Info = "Warps the user to another player (maybe in his vehicle) or to the defined coordinates."
                        },
                        new
                        {
                            Id = (short)5,
                            Language = Language.German,
                            Info = "Kickt einen Spieler vom Server."
                        },
                        new
                        {
                            Id = (short)5,
                            Language = Language.English,
                            Info = "Kicks a player out of the server."
                        },
                        new
                        {
                            Id = (short)6,
                            Language = Language.German,
                            Info = "Bannt einen Spieler aus der Lobby, in welchem der Befehl genutzt wurde."
                        },
                        new
                        {
                            Id = (short)6,
                            Language = Language.English,
                            Info = "Bans a player out of the lobby in which the command was used."
                        },
                        new
                        {
                            Id = (short)7,
                            Language = Language.German,
                            Info = "Kickt einen Spieler aus der Lobby, in welchem der Befehl genutzt wurde."
                        },
                        new
                        {
                            Id = (short)7,
                            Language = Language.English,
                            Info = "Kicks a player out of the lobby in which the command was used."
                        },
                        new
                        {
                            Id = (short)8,
                            Language = Language.German,
                            Info = "Mutet einen Spieler im normalen Chat."
                        },
                        new
                        {
                            Id = (short)8,
                            Language = Language.English,
                            Info = "Mutes a player in the normal chat."
                        },
                        new
                        {
                            Id = (short)9,
                            Language = Language.German,
                            Info = "Beendet die jetzige Runde in der jeweiligen Lobby."
                        },
                        new
                        {
                            Id = (short)9,
                            Language = Language.English,
                            Info = "Ends the current round in the lobby."
                        },
                        new
                        {
                            Id = (short)10,
                            Language = Language.German,
                            Info = "Verlässt die jetzige Lobby."
                        },
                        new
                        {
                            Id = (short)10,
                            Language = Language.English,
                            Info = "Leaves the current lobby."
                        },
                        new
                        {
                            Id = (short)11,
                            Language = Language.German,
                            Info = "Tötet den Nutzer (Selbstmord)."
                        },
                        new
                        {
                            Id = (short)11,
                            Language = Language.English,
                            Info = "Kills the user (suicide)."
                        },
                        new
                        {
                            Id = (short)12,
                            Language = Language.German,
                            Info = "Globaler Chat, welcher überall gelesen werden kann."
                        },
                        new
                        {
                            Id = (short)12,
                            Language = Language.English,
                            Info = "Global chat which can be read everywhere."
                        },
                        new
                        {
                            Id = (short)13,
                            Language = Language.German,
                            Info = "Sendet die Nachricht nur zum eigenen Team."
                        },
                        new
                        {
                            Id = (short)13,
                            Language = Language.English,
                            Info = "Sends the message to the current team only."
                        },
                        new
                        {
                            Id = (short)14,
                            Language = Language.German,
                            Info = "Gibt die Position des Spielers aus."
                        },
                        new
                        {
                            Id = (short)14,
                            Language = Language.English,
                            Info = "Outputs the position of the player."
                        },
                        new
                        {
                            Id = (short)15,
                            Language = Language.German,
                            Info = "Sendet eine Nachricht im Privatchat."
                        },
                        new
                        {
                            Id = (short)15,
                            Language = Language.English,
                            Info = "Sends a message in private chat."
                        },
                        new
                        {
                            Id = (short)16,
                            Language = Language.German,
                            Info = "Schließt den Privatchat oder nimmt eine Privatchat-Anfrage zurück."
                        },
                        new
                        {
                            Id = (short)16,
                            Language = Language.English,
                            Info = "Closes a private chat or withdraws a private chat request."
                        },
                        new
                        {
                            Id = (short)17,
                            Language = Language.German,
                            Info = "Sendet eine Anfrage für einen Privatchat oder nimmt die Anfrage eines Users an."
                        },
                        new
                        {
                            Id = (short)17,
                            Language = Language.English,
                            Info = "Sends a private chat request or accepts the request of another user."
                        },
                        new
                        {
                            Id = (short)18,
                            Language = Language.German,
                            Info = "Private Nachricht an einen bestimmten Spieler."
                        },
                        new
                        {
                            Id = (short)18,
                            Language = Language.English,
                            Info = "Private message to a specific player."
                        },
                        new
                        {
                            Id = (short)19,
                            Language = Language.German,
                            Info = "Gibt dir deine User-Id aus."
                        },
                        new
                        {
                            Id = (short)19,
                            Language = Language.English,
                            Info = "Outputs your user-id to yourself."
                        },
                        new
                        {
                            Id = (short)20,
                            Language = Language.German,
                            Info = "Fügt das Ziel in deine Blocklist ein, sodass du keine Nachrichten mehr von ihm liest, er dich nicht einladen kann usw."
                        },
                        new
                        {
                            Id = (short)20,
                            Language = Language.English,
                            Info = "Adds the target into your blocklist so you won't see messages from him, he can't invite you anymore etc."
                        },
                        new
                        {
                            Id = (short)21,
                            Language = Language.German,
                            Info = "Entfernt das Ziel aus der Blockliste."
                        },
                        new
                        {
                            Id = (short)21,
                            Language = Language.English,
                            Info = "Removes the target from the blocklist."
                        },
                        new
                        {
                            Id = (short)23,
                            Language = Language.German,
                            Info = "Mutet einen Spieler im Voice-Chat."
                        },
                        new
                        {
                            Id = (short)23,
                            Language = Language.English,
                            Info = "Mutes a player in the voice-chat."
                        },
                        new
                        {
                            Id = (short)24,
                            Language = Language.German,
                            Info = "Gibt einem Spieler Geld."
                        },
                        new
                        {
                            Id = (short)24,
                            Language = Language.English,
                            Info = "Gives money to a player."
                        },
                        new
                        {
                            Id = (short)25,
                            Language = Language.German,
                            Info = "Ladet einen Spieler in die eigene Lobby ein (falls möglich)."
                        },
                        new
                        {
                            Id = (short)25,
                            Language = Language.English,
                            Info = "Invites a player to your lobby (if possible)."
                        },
                        new
                        {
                            Id = (short)26,
                            Language = Language.German,
                            Info = "Befehl zum schnellen Testen von Codes."
                        },
                        new
                        {
                            Id = (short)26,
                            Language = Language.English,
                            Info = "Command for quick testing of codes."
                        },
                        new
                        {
                            Id = (short)27,
                            Language = Language.German,
                            Info = "Erstellt ein Haus in der Gang-Lobby."
                        },
                        new
                        {
                            Id = (short)27,
                            Language = Language.English,
                            Info = "Creates a house in the gang lobby."
                        },
                        new
                        {
                            Id = (short)28,
                            Language = Language.German,
                            Info = "Gibt alle Admins online aus."
                        },
                        new
                        {
                            Id = (short)28,
                            Language = Language.English,
                            Info = "Outputs all online admins."
                        },
                        new
                        {
                            Id = (short)29,
                            Language = Language.German,
                            Info = "Setzt das Admin-Level eines Spielers."
                        },
                        new
                        {
                            Id = (short)29,
                            Language = Language.English,
                            Info = "Sets the admin level of a player."
                        },
                        new
                        {
                            Id = (short)30,
                            Language = Language.German,
                            Info = "Setzt den Vorgesetzten eines Spielers."
                        },
                        new
                        {
                            Id = (short)30,
                            Language = Language.English,
                            Info = "Sets the supervisor of a player."
                        },
                        new
                        {
                            Id = (short)31,
                            Language = Language.German,
                            Info = "Gibt einem Spieler den VIP-Rang."
                        },
                        new
                        {
                            Id = (short)31,
                            Language = Language.English,
                            Info = "Gives a player the vip rank."
                        },
                        new
                        {
                            Id = (short)32,
                            Language = Language.German,
                            Info = "Gibt den Vorgesetzten eines Admins aus."
                        },
                        new
                        {
                            Id = (short)32,
                            Language = Language.English,
                            Info = "Outputs the supervisor of an admin."
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Command.Commands", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LobbyOwnerCanUse")
                        .HasColumnType("boolean");

                    b.Property<short?>("NeededAdminLevel")
                        .HasColumnType("smallint");

                    b.Property<short?>("NeededDonation")
                        .HasColumnType("smallint");

                    b.Property<bool>("VipCanUse")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NeededAdminLevel");

                    b.ToTable("Commands");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Command = "AdminSay",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)2,
                            Command = "AdminChat",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)3,
                            Command = "Ban",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)2,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)4,
                            Command = "Goto",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)2,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)5,
                            Command = "Kick",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)6,
                            Command = "LobbyBan",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)7,
                            Command = "LobbyKick",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)8,
                            Command = "Mute",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)9,
                            Command = "NextMap",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)10,
                            Command = "LobbyLeave",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)11,
                            Command = "Suicide",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)12,
                            Command = "GlobalChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)13,
                            Command = "TeamChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)14,
                            Command = "PrivateChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)15,
                            Command = "Position",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)16,
                            Command = "ClosePrivateChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)17,
                            Command = "OpenPrivateChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)18,
                            Command = "PrivateMessage",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)19,
                            Command = "UserId",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)20,
                            Command = "BlockUser",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)21,
                            Command = "UnblockUser",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)22,
                            Command = "LoadMapOfOthers",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)23,
                            Command = "VoiceMute",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)24,
                            Command = "GiveMoney",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)25,
                            Command = "LobbyInvitePlayer",
                            LobbyOwnerCanUse = true,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)26,
                            Command = "Test",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)3,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)27,
                            Command = "CreateHouse",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)2,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)28,
                            Command = "Admins",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)29,
                            Command = "SetAdmin",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)3,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)30,
                            Command = "SetAdminLeader",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)3,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)31,
                            Command = "SetVip",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)3,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)32,
                            Command = "AdminLeader",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangActionAreas", b =>
                {
                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("AttackCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("CooldownStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DefendCountSinceLastCapture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("LastAttacked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("'2019-1-1'::timestamp");

                    b.Property<int>("OwnerGangId")
                        .HasColumnType("integer");

                    b.HasKey("MapId");

                    b.HasIndex("OwnerGangId");

                    b.ToTable("GangActionAreas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangHouses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastBought")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("NeededGangLevel")
                        .HasColumnType("smallint");

                    b.Property<float>("PosX")
                        .HasColumnType("real");

                    b.Property<float>("PosY")
                        .HasColumnType("real");

                    b.Property<float>("PosZ")
                        .HasColumnType("real");

                    b.Property<float>("Rot")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("GangHouses");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangLevelSettings", b =>
                {
                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<bool>("CanChangeBlipColor")
                        .HasColumnType("boolean");

                    b.Property<byte>("GangAreaSlots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)255);

                    b.Property<float>("HouseAreaRadius")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(30f);

                    b.Property<int>("HousePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2147483647);

                    b.Property<int>("NeededExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2147483647);

                    b.Property<byte>("PlayerSlots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)255);

                    b.Property<byte>("RankSlots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)255);

                    b.Property<int>("UpgradePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2147483647);

                    b.Property<byte>("VehicleSlots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)255);

                    b.HasKey("Level");

                    b.ToTable("GangLevelSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangMembers", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("GangId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("RankId")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.HasIndex("GangId");

                    b.HasIndex("RankId");

                    b.ToTable("GangMembers");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangRankPermissions", b =>
                {
                    b.Property<int>("GangId")
                        .HasColumnType("integer");

                    b.Property<int>("InviteMembers")
                        .HasColumnType("integer");

                    b.Property<int>("KickMembers")
                        .HasColumnType("integer");

                    b.Property<int>("ManagePermissions")
                        .HasColumnType("integer");

                    b.Property<int>("ManageRanks")
                        .HasColumnType("integer");

                    b.Property<int>("SetRanks")
                        .HasColumnType("integer");

                    b.Property<int>("StartGangAction")
                        .HasColumnType("integer");

                    b.HasKey("GangId");

                    b.ToTable("GangRankPermissions");

                    b.HasData(
                        new
                        {
                            GangId = -1,
                            InviteMembers = 1,
                            KickMembers = 1,
                            ManagePermissions = 1,
                            ManageRanks = 1,
                            SetRanks = 0,
                            StartGangAction = 1
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangRanks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("GangId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GangId");

                    b.HasIndex("Rank");

                    b.ToTable("GangRanks");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Color = "rgb(255,255,255)",
                            GangId = -1,
                            Name = "-",
                            Rank = (short)0
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangStats", b =>
                {
                    b.Property<int>("GangId")
                        .HasColumnType("integer");

                    b.Property<int>("AmountAttacks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountAttacksWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountDefends")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountDefendsWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountMembersSoFar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Money")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("PeakGangwarAreasOwned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalMoneySoFar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("GangId");

                    b.ToTable("GangStats");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangVehicles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Color1")
                        .HasColumnType("integer");

                    b.Property<int>("Color2")
                        .HasColumnType("integer");

                    b.Property<int>("GangId")
                        .HasColumnType("integer");

                    b.Property<VehicleHash>("Model")
                        .HasColumnType("vehicle_hash");

                    b.Property<float>("SpawnPosX")
                        .HasColumnType("real");

                    b.Property<float>("SpawnPosY")
                        .HasColumnType("real");

                    b.Property<float>("SpawnPosZ")
                        .HasColumnType("real");

                    b.Property<float>("SpawnRotX")
                        .HasColumnType("real");

                    b.Property<float>("SpawnRotY")
                        .HasColumnType("real");

                    b.Property<float>("SpawnRotZ")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("GangId");

                    b.ToTable("GangVehicles");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.Gangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<byte>("BlipColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int?>("HouseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("Short")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HouseId")
                        .IsUnique();

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("Gangs");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            BlipColor = (byte)0,
                            Color = "rgb(255,255,255)",
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "System",
                            Short = "-",
                            TeamId = -5
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.Lobbies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<float>("AroundSpawnPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("3");

                    b.Property<DateTime>("CreateTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<float>("DefaultSpawnRotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("0");

                    b.Property<float>("DefaultSpawnX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("0");

                    b.Property<float>("DefaultSpawnY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("0");

                    b.Property<float>("DefaultSpawnZ")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("9000");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<LobbyType>("Type")
                        .HasColumnType("lobby_type");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Lobbies");

                    b.HasData(
                        new
                        {
                            Id = -4,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = 0f,
                            DefaultSpawnY = 0f,
                            DefaultSpawnZ = 0f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "MainMenu",
                            OwnerId = -1,
                            Type = LobbyType.MainMenu
                        },
                        new
                        {
                            Id = -1,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = 0f,
                            DefaultSpawnY = 0f,
                            DefaultSpawnZ = 0f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "Arena",
                            OwnerId = -1,
                            Type = LobbyType.Arena
                        },
                        new
                        {
                            Id = -2,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = -365.425f,
                            DefaultSpawnY = -131.809f,
                            DefaultSpawnZ = 37.873f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "GangLobby",
                            OwnerId = -1,
                            Type = LobbyType.GangLobby
                        },
                        new
                        {
                            Id = -3,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = -365.425f,
                            DefaultSpawnY = -131.809f,
                            DefaultSpawnZ = 37.873f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "MapCreateLobby",
                            OwnerId = -1,
                            Type = LobbyType.MapCreateLobby
                        },
                        new
                        {
                            Id = -5,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = -425.2233f,
                            DefaultSpawnY = 1126.9731f,
                            DefaultSpawnZ = 326.8f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "CharCreateLobby",
                            OwnerId = -1,
                            Type = LobbyType.CharCreateLobby
                        },
                        new
                        {
                            Id = -6,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = -365.425f,
                            DefaultSpawnY = -131.809f,
                            DefaultSpawnZ = 37.873f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "DamageTestLobby",
                            OwnerId = -1,
                            Type = LobbyType.DamageTestLobby
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyArmsRaceWeapons", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.Property<short>("AtKill")
                        .HasColumnType("smallint");

                    b.Property<WeaponHash?>("WeaponHash")
                        .HasColumnType("weapon_hash");

                    b.HasKey("LobbyId", "AtKill");

                    b.HasIndex("WeaponHash");

                    b.ToTable("LobbyArmsRaceWeapons");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)0,
                            WeaponHash = WeaponHash.Microsmg
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)1,
                            WeaponHash = WeaponHash.Assaultsmg
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)2,
                            WeaponHash = WeaponHash.Machinepistol
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)3,
                            WeaponHash = WeaponHash.Assaultrifle
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)4,
                            WeaponHash = WeaponHash.Carbinerifle
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)5,
                            WeaponHash = WeaponHash.Advancedrifle
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)6,
                            WeaponHash = WeaponHash.Specialcarbine
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)7,
                            WeaponHash = WeaponHash.Pumpshotgun
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)8,
                            WeaponHash = WeaponHash.Assaultshotgun
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)9,
                            WeaponHash = WeaponHash.Heavysniper
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)10,
                            WeaponHash = WeaponHash.Marksmanrifle
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)11,
                            WeaponHash = WeaponHash.Combatmg
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)12,
                            WeaponHash = WeaponHash.Combatpistol
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)13,
                            WeaponHash = WeaponHash.Pistol50
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)14,
                            WeaponHash = WeaponHash.Heavypistol
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)15,
                            WeaponHash = WeaponHash.Revolver
                        },
                        new
                        {
                            LobbyId = -1,
                            AtKill = (short)16
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyFightSettings", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.Property<short>("AmountLifes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1);

                    b.Property<int>("SpawnAgainAfterDeathMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(400);

                    b.Property<short>("StartArmor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)100);

                    b.Property<short>("StartHealth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)100);

                    b.HasKey("LobbyId");

                    b.ToTable("LobbyFightSettings");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            AmountLifes = (short)0,
                            SpawnAgainAfterDeathMs = 0,
                            StartArmor = (short)0,
                            StartHealth = (short)0
                        },
                        new
                        {
                            LobbyId = -6,
                            AmountLifes = (short)0,
                            SpawnAgainAfterDeathMs = 0,
                            StartArmor = (short)0,
                            StartHealth = (short)0
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyKillingspreeRewards", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.Property<short>("KillsAmount")
                        .HasColumnType("smallint");

                    b.Property<short?>("HealthOrArmor")
                        .HasColumnType("smallint");

                    b.HasKey("LobbyId", "KillsAmount");

                    b.ToTable("KillingspreeRewards");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            KillsAmount = (short)3,
                            HealthOrArmor = (short)30
                        },
                        new
                        {
                            LobbyId = -1,
                            KillsAmount = (short)5,
                            HealthOrArmor = (short)50
                        },
                        new
                        {
                            LobbyId = -1,
                            KillsAmount = (short)10,
                            HealthOrArmor = (short)100
                        },
                        new
                        {
                            LobbyId = -1,
                            KillsAmount = (short)15,
                            HealthOrArmor = (short)100
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyMapSettings", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.Property<int>("MapLimitTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("10");

                    b.Property<MapLimitType>("MapLimitType")
                        .HasColumnType("map_limit_type");

                    b.HasKey("LobbyId");

                    b.ToTable("LobbyMapSettings");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            MapLimitTime = 10,
                            MapLimitType = MapLimitType.KillAfterTime
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyMaps", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.HasKey("LobbyId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("LobbyMaps");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            MapId = -1
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyRewards", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.Property<double>("MoneyPerAssist")
                        .HasColumnType("double precision");

                    b.Property<double>("MoneyPerDamage")
                        .HasColumnType("double precision");

                    b.Property<double>("MoneyPerKill")
                        .HasColumnType("double precision");

                    b.HasKey("LobbyId");

                    b.ToTable("LobbyRewards");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            MoneyPerAssist = 10.0,
                            MoneyPerDamage = 0.10000000000000001,
                            MoneyPerKill = 20.0
                        },
                        new
                        {
                            LobbyId = -2,
                            MoneyPerAssist = 10.0,
                            MoneyPerDamage = 0.10000000000000001,
                            MoneyPerKill = 20.0
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyRoundSettings", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.Property<int>("BombDefuseTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("8000");

                    b.Property<int>("BombDetonateTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("45000");

                    b.Property<int>("BombPlantTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("3000");

                    b.Property<int>("CountdownTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("5");

                    b.Property<bool>("MixTeamsAfterRound")
                        .HasColumnType("boolean");

                    b.Property<int>("RoundTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("240");

                    b.Property<bool>("ShowRanking")
                        .HasColumnType("boolean");

                    b.HasKey("LobbyId");

                    b.ToTable("LobbyRoundSettings");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            BombDefuseTimeMs = 8000,
                            BombDetonateTimeMs = 45000,
                            BombPlantTimeMs = 3000,
                            CountdownTime = 5,
                            MixTeamsAfterRound = true,
                            RoundTime = 240,
                            ShowRanking = true
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyWeapons", b =>
                {
                    b.Property<WeaponHash>("Hash")
                        .HasColumnType("weapon_hash");

                    b.Property<int>("Lobby")
                        .HasColumnType("integer");

                    b.Property<int>("Ammo")
                        .HasColumnType("integer");

                    b.Property<float?>("Damage")
                        .HasColumnType("real");

                    b.Property<float?>("HeadMultiplicator")
                        .HasColumnType("real");

                    b.HasKey("Hash", "Lobby");

                    b.HasIndex("Lobby");

                    b.ToTable("LobbyWeapons");

                    b.HasData(
                        new
                        {
                            Hash = WeaponHash.Pistol50,
                            Lobby = -1,
                            Ammo = 9999
                        },
                        new
                        {
                            Hash = WeaponHash.Revolver,
                            Lobby = -1,
                            Ammo = 9999
                        },
                        new
                        {
                            Hash = WeaponHash.Smg,
                            Lobby = -1,
                            Ammo = 9999
                        },
                        new
                        {
                            Hash = WeaponHash.Combatpdw,
                            Lobby = -1,
                            Ammo = 9999
                        },
                        new
                        {
                            Hash = WeaponHash.Musket,
                            Lobby = -1,
                            Ammo = 9999
                        },
                        new
                        {
                            Hash = WeaponHash.Sawnoffshotgun,
                            Lobby = -1,
                            Ammo = 9999
                        },
                        new
                        {
                            Hash = WeaponHash.Assaultrifle,
                            Lobby = -1,
                            Ammo = 9999
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Log.LogAdmins", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("AsDonator")
                        .HasColumnType("boolean");

                    b.Property<bool>("AsVip")
                        .HasColumnType("boolean");

                    b.Property<string>("LengthOrEndTime")
                        .HasColumnType("text");

                    b.Property<int?>("Lobby")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<int?>("Target")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<LogType>("Type")
                        .HasColumnType("log_type");

                    b.HasKey("Id");

                    b.ToTable("LogAdmins");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Log.LogChats", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("IsAdminChat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTeamChat")
                        .HasColumnType("boolean");

                    b.Property<int?>("Lobby")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<int?>("Target")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id");

                    b.ToTable("LogChats");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Log.LogErrors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ExceptionType")
                        .HasColumnType("text");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<int?>("Source")
                        .HasColumnType("integer");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id");

                    b.ToTable("LogErrors");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Log.LogKills", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("DeadId")
                        .HasColumnType("integer");

                    b.Property<int>("KillerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<long>("WeaponId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LogKills");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Log.LogRests", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<IPAddress>("Ip")
                        .HasColumnType("inet");

                    b.Property<int?>("Lobby")
                        .HasColumnType("integer");

                    b.Property<string>("Serial")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<LogType>("Type")
                        .HasColumnType("log_type");

                    b.HasKey("Id");

                    b.ToTable("LogRests");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharAppearanceDatas", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<byte>("Slot")
                        .HasColumnType("smallint");

                    b.Property<int>("AddBodyBlemishes")
                        .HasColumnType("integer");

                    b.Property<float>("AddBodyBlemishesOpacity")
                        .HasColumnType("real");

                    b.Property<int>("Ageing")
                        .HasColumnType("integer");

                    b.Property<float>("AgeingOpacity")
                        .HasColumnType("real");

                    b.Property<int>("Blemishes")
                        .HasColumnType("integer");

                    b.Property<float>("BlemishesOpacity")
                        .HasColumnType("real");

                    b.Property<int>("Blush")
                        .HasColumnType("integer");

                    b.Property<float>("BlushOpacity")
                        .HasColumnType("real");

                    b.Property<int>("BodyBlemishes")
                        .HasColumnType("integer");

                    b.Property<float>("BodyBlemishesOpacity")
                        .HasColumnType("real");

                    b.Property<int>("ChestHair")
                        .HasColumnType("integer");

                    b.Property<float>("ChestHairOpacity")
                        .HasColumnType("real");

                    b.Property<int>("Complexion")
                        .HasColumnType("integer");

                    b.Property<float>("ComplexionOpacity")
                        .HasColumnType("real");

                    b.Property<int>("Eyebrows")
                        .HasColumnType("integer");

                    b.Property<float>("EyebrowsOpacity")
                        .HasColumnType("real");

                    b.Property<int>("FacialHair")
                        .HasColumnType("integer");

                    b.Property<float>("FacialHairOpacity")
                        .HasColumnType("real");

                    b.Property<int>("Lipstick")
                        .HasColumnType("integer");

                    b.Property<float>("LipstickOpacity")
                        .HasColumnType("real");

                    b.Property<int>("Makeup")
                        .HasColumnType("integer");

                    b.Property<float>("MakeupOpacity")
                        .HasColumnType("real");

                    b.Property<int>("MolesAndFreckles")
                        .HasColumnType("integer");

                    b.Property<float>("MolesAndFrecklesOpacity")
                        .HasColumnType("real");

                    b.Property<int>("SunDamage")
                        .HasColumnType("integer");

                    b.Property<float>("SunDamageOpacity")
                        .HasColumnType("real");

                    b.HasKey("PlayerId", "Slot");

                    b.ToTable("PlayerCharAppearanceDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharDatas", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<byte>("Slot")
                        .HasColumnType("smallint");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerCharDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharFeaturesDatas", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<byte>("Slot")
                        .HasColumnType("smallint");

                    b.Property<float>("BrowHeight")
                        .HasColumnType("real");

                    b.Property<float>("BrowWidth")
                        .HasColumnType("real");

                    b.Property<float>("CheekboneHeight")
                        .HasColumnType("real");

                    b.Property<float>("CheekboneWidth")
                        .HasColumnType("real");

                    b.Property<float>("CheeksWidth")
                        .HasColumnType("real");

                    b.Property<float>("ChinLength")
                        .HasColumnType("real");

                    b.Property<float>("ChinPosition")
                        .HasColumnType("real");

                    b.Property<float>("ChinShape")
                        .HasColumnType("real");

                    b.Property<float>("ChinWidth")
                        .HasColumnType("real");

                    b.Property<float>("Eyes")
                        .HasColumnType("real");

                    b.Property<float>("JawHeight")
                        .HasColumnType("real");

                    b.Property<float>("JawWidth")
                        .HasColumnType("real");

                    b.Property<float>("Lips")
                        .HasColumnType("real");

                    b.Property<float>("NeckWidth")
                        .HasColumnType("real");

                    b.Property<float>("NoseBridge")
                        .HasColumnType("real");

                    b.Property<float>("NoseBridgeShift")
                        .HasColumnType("real");

                    b.Property<float>("NoseHeight")
                        .HasColumnType("real");

                    b.Property<float>("NoseLength")
                        .HasColumnType("real");

                    b.Property<float>("NoseTip")
                        .HasColumnType("real");

                    b.Property<float>("NoseWidth")
                        .HasColumnType("real");

                    b.HasKey("PlayerId", "Slot");

                    b.ToTable("PlayerCharFeaturesDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharGeneralDatas", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<byte>("Slot")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsMale")
                        .HasColumnType("boolean");

                    b.HasKey("PlayerId", "Slot");

                    b.ToTable("PlayerCharGeneralDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharHairAndColorsDatas", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<byte>("Slot")
                        .HasColumnType("smallint");

                    b.Property<int>("BlushColor")
                        .HasColumnType("integer");

                    b.Property<int>("ChestHairColor")
                        .HasColumnType("integer");

                    b.Property<int>("EyeColor")
                        .HasColumnType("integer");

                    b.Property<int>("EyebrowColor")
                        .HasColumnType("integer");

                    b.Property<int>("FacialHairColor")
                        .HasColumnType("integer");

                    b.Property<int>("Hair")
                        .HasColumnType("integer");

                    b.Property<int>("HairColor")
                        .HasColumnType("integer");

                    b.Property<int>("HairHighlightColor")
                        .HasColumnType("integer");

                    b.Property<int>("LipstickColor")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId", "Slot");

                    b.ToTable("PlayerCharHairAndColorsDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharHeritageDatas", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<byte>("Slot")
                        .HasColumnType("smallint");

                    b.Property<int>("FatherIndex")
                        .HasColumnType("integer");

                    b.Property<int>("MotherIndex")
                        .HasColumnType("integer");

                    b.Property<float>("ResemblancePercentage")
                        .HasColumnType("real");

                    b.Property<float>("SkinTonePercentage")
                        .HasColumnType("real");

                    b.HasKey("PlayerId", "Slot");

                    b.ToTable("PlayerCharHeritageDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerBans", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IP")
                        .HasColumnType("text");

                    b.Property<bool>("PreventConnection")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("SCId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("SCName")
                        .HasColumnType("text");

                    b.Property<string>("Serial")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("PlayerId", "LobbyId");

                    b.HasIndex("AdminId");

                    b.HasIndex("IP");

                    b.HasIndex("LobbyId");

                    b.HasIndex("SCId");

                    b.HasIndex("SCName");

                    b.HasIndex("Serial");

                    b.ToTable("PlayerBans");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerClothes", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerClothes");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerCommands", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<short>("CommandId")
                        .HasColumnType("smallint");

                    b.Property<string>("CommandText")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerCommands");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerLobbyStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.Property<int>("Assists")
                        .HasColumnType("integer");

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.Property<int>("Deaths")
                        .HasColumnType("integer");

                    b.Property<int>("Kills")
                        .HasColumnType("integer");

                    b.Property<int>("MostAssistsInARound")
                        .HasColumnType("integer");

                    b.Property<int>("MostDamageInARound")
                        .HasColumnType("integer");

                    b.Property<int>("MostKillsInARound")
                        .HasColumnType("integer");

                    b.Property<int>("TotalAssists")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDamage")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDeaths")
                        .HasColumnType("integer");

                    b.Property<int>("TotalKills")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMapsBought")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRounds")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId", "LobbyId");

                    b.HasIndex("LobbyId");

                    b.ToTable("PlayerLobbyStats");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerMapFavourites", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("PlayerMapFavourites");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerMapRatings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint");

                    b.HasKey("PlayerId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("PlayerMapRatings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerRelations", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.Property<PlayerRelation>("Relation")
                        .HasColumnType("player_relation");

                    b.HasKey("PlayerId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("PlayerRelations");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("AmountHighPriorityIssues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountLowPriorityIssues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountMediumPriorityIssues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountUrgentPriorityIssues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("LastFreeUsernameChange")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastLoginTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("LastMapsBoughtCounterReduce")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<bool>("LoggedIn")
                        .HasColumnType("boolean");

                    b.Property<int>("MapsBoughtCounter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("Money")
                        .HasColumnType("integer");

                    b.Property<int?>("MuteTime")
                        .HasColumnType("integer");

                    b.Property<int>("PlayTime")
                        .HasColumnType("integer");

                    b.Property<int?>("VoiceMuteTime")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerTotalStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<long>("Money")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerTotalStats");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerWeaponBodypartStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<WeaponHash>("WeaponHash")
                        .HasColumnType("weapon_hash");

                    b.Property<PedBodyPart>("BodyPart")
                        .HasColumnType("ped_body_part");

                    b.Property<int>("AmountHits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountOfficialHits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<long>("DealtDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("DealtOfficialDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("OfficialKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("PlayerId", "WeaponHash", "BodyPart");

                    b.HasIndex("WeaponHash");

                    b.ToTable("PlayerWeaponBodypartStats");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerWeaponStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<WeaponHash>("WeaponHash")
                        .HasColumnType("weapon_hash");

                    b.Property<int>("AmountHeadshots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountHits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountOfficialHeadshots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountOfficialHits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountOfficialShots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountShots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<long>("DealtDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("DealtOfficialDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("OfficialKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("PlayerId", "WeaponHash");

                    b.HasIndex("WeaponHash");

                    b.ToTable("PlayerWeaponStats");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Players", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AdminLeaderId")
                        .HasColumnType("integer");

                    b.Property<short>("AdminLvl")
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("Donation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsVip")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("RegisterTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<decimal>("SCId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("SCName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AdminLeaderId");

                    b.HasIndex("AdminLvl");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AdminLeaderId = -1,
                            AdminLvl = (short)0,
                            Donation = (short)0,
                            IsVip = false,
                            Name = "System",
                            Password = "",
                            RegisterTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SCId = 0m,
                            SCName = "System"
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerChatSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<float>("ChatFontSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1.4f)
                        .HasColumnName("ChatFontSize");

                    b.Property<float>("ChatInfoFontSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f)
                        .HasColumnName("ChatInfoFontSize");

                    b.Property<int>("ChatInfoMoveTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15000)
                        .HasColumnName("ChatInfoMoveTimeMs");

                    b.Property<float>("ChatMaxHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(35f)
                        .HasColumnName("ChatMaxHeight");

                    b.Property<float>("ChatWidth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(30f)
                        .HasColumnName("ChatWidth");

                    b.Property<bool>("HideChatInfo")
                        .HasColumnType("boolean")
                        .HasColumnName("HideChatInfo");

                    b.Property<bool>("HideDirtyChat")
                        .HasColumnType("boolean")
                        .HasColumnName("HideDirtyChat");

                    b.Property<bool>("ShowCursorOnChatOpen")
                        .HasColumnType("boolean")
                        .HasColumnName("ShowCursorOnChatOpen");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerCooldownsAndDurationsSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("AFKKickAfterSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(25)
                        .HasColumnName("AFKKickAfterSeconds");

                    b.Property<int>("AFKKickShowWarningLastSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10)
                        .HasColumnName("AFKKickShowWarningLastSeconds");

                    b.Property<int>("BloodscreenCooldownMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(150)
                        .HasColumnName("BloodscreenCooldownMs");

                    b.Property<int>("HudAmmoUpdateCooldownMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100)
                        .HasColumnName("HudAmmoUpdateCooldownMs");

                    b.Property<int>("HudHealthUpdateCooldownMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100)
                        .HasColumnName("HudHealthUpdateCooldownMs");

                    b.Property<int>("ShowFloatingDamageInfoDurationMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000)
                        .HasColumnName("ShowFloatingDamageInfoDurationMs");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerFightEffectSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Bloodscreen")
                        .HasColumnType("boolean")
                        .HasColumnName("Bloodscreen");

                    b.Property<bool>("FloatingDamageInfo")
                        .HasColumnType("boolean")
                        .HasColumnName("FloatingDamageInfo");

                    b.Property<bool>("Hitsound")
                        .HasColumnType("boolean")
                        .HasColumnName("Hitsound");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerGeneralSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowDataTransfer")
                        .HasColumnType("boolean")
                        .HasColumnName("AllowDataTransfer");

                    b.Property<bool>("CheckAFK")
                        .HasColumnType("boolean")
                        .HasColumnName("CheckAFK");

                    b.Property<string>("DateTimeFormat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("yyyy'-'MM'-'dd HH':'mm':'ss")
                        .HasColumnName("DateTimeFormat");

                    b.Property<decimal?>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("DiscordUserId");

                    b.Property<Language>("Language")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("language")
                        .HasDefaultValue(Language.English)
                        .HasColumnName("Language");

                    b.Property<int?>("PlayerSettingsPlayerId")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowConfettiAtRanking")
                        .HasColumnType("boolean")
                        .HasColumnName("ShowConfettiAtRanking");

                    b.Property<string>("Timezone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("UTC")
                        .HasColumnName("Timezone");

                    b.Property<bool>("WindowsNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("WindowsNotifications");

                    b.HasKey("PlayerId");

                    b.HasIndex("DiscordUserId")
                        .IsUnique();

                    b.HasIndex("PlayerSettingsPlayerId");

                    b.ToTable("PlayerSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerInfoSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowCursorInfo")
                        .HasColumnType("boolean")
                        .HasColumnName("ShowCursorInfo");

                    b.Property<bool>("ShowLobbyLeaveInfo")
                        .HasColumnType("boolean")
                        .HasColumnName("ShowLobbyLeaveInfo");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerIngameColorsSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("MapBorderColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("rgba(150,0,0,0.35)")
                        .HasColumnName("MapBorderColor");

                    b.Property<string>("NametagArmorEmptyColor")
                        .HasColumnType("text")
                        .HasColumnName("NametagArmorEmptyColor");

                    b.Property<string>("NametagArmorFullColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("rgba(255, 255, 255, 1)")
                        .HasColumnName("NametagArmorFullColor");

                    b.Property<string>("NametagDeadColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("rgba(0, 0, 0, 1)")
                        .HasColumnName("NametagDeadColor");

                    b.Property<string>("NametagHealthEmptyColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("rgba(50, 0, 0, 1)")
                        .HasColumnName("NametagHealthEmptyColor");

                    b.Property<string>("NametagHealthFullColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("rgba(0, 255, 0, 1)")
                        .HasColumnName("NametagHealthFullColor");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerKillInfoSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<float>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(10f);

                    b.Property<float>("FontSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1.4f);

                    b.Property<int>("IconHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30);

                    b.Property<int>("IconWidth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<bool>("ShowIcon")
                        .HasColumnType("boolean");

                    b.Property<int>("Spacing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerKillInfoSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerScoreboardSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<ScoreboardPlayerSorting>("ScoreboardPlayerSorting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("scoreboard_player_sorting")
                        .HasDefaultValue(ScoreboardPlayerSorting.Name)
                        .HasColumnName("ScoreboardPlayerSorting");

                    b.Property<bool>("ScoreboardPlayerSortingDesc")
                        .HasColumnType("boolean")
                        .HasColumnName("ScoreboardPlayerSortingDesc");

                    b.Property<TimeSpanUnitsOfTime>("ScoreboardPlaytimeUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time_span_units_of_time")
                        .HasDefaultValue(TimeSpanUnitsOfTime.HourMinute)
                        .HasColumnName("ScoreboardPlaytimeUnit");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerThemeSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("ThemeBackgroundDarkColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("linear-gradient(0deg, rgba(2,0,36,0.87) 0%, rgba(23,52,111,0.87) 100%)");

                    b.Property<string>("ThemeBackgroundLightColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("rgba(250, 250, 250, 0.87)");

                    b.Property<string>("ThemeMainColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("rgba(0,0,77,1)");

                    b.Property<string>("ThemeSecondaryColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("rgba(255,152,0,1)");

                    b.Property<string>("ThemeWarnColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("rgba(244,67,54,1)");

                    b.Property<int>("ToolbarDesign")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<bool>("UseDarkTheme")
                        .HasColumnType("boolean");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerThemeSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerVoiceSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voice3D")
                        .HasColumnType("boolean")
                        .HasColumnName("Voice3D");

                    b.Property<bool>("VoiceAutoVolume")
                        .HasColumnType("boolean")
                        .HasColumnName("VoiceAutoVolume");

                    b.Property<float>("VoiceVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(6f)
                        .HasColumnName("VoiceVolume");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Announcements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.ChatInfos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<Language>("Language")
                        .HasColumnType("language");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChatInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = Language.German,
                            Message = "Du kannst die Lobby mit \"/leave\" verlassen."
                        },
                        new
                        {
                            Id = 2,
                            Language = Language.English,
                            Message = "You can leave the lobby with \"/leave.\""
                        },
                        new
                        {
                            Id = 3,
                            Language = Language.German,
                            Message = "VIPs sind keine Spender"
                        },
                        new
                        {
                            Id = 4,
                            Language = Language.English,
                            Message = "VIPs are not donators"
                        },
                        new
                        {
                            Id = 5,
                            Language = Language.German,
                            Message = "Es gibt 3 Admin-Ränge: Supporter, Administrator, Projektleiter"
                        },
                        new
                        {
                            Id = 6,
                            Language = Language.English,
                            Message = "There are 3 admin ranks: Supporter, Administrator, Project Leader"
                        },
                        new
                        {
                            Id = 7,
                            Language = Language.German,
                            Message = "Der Projektleiter ernennt Administratoren. Die Administratoren ernennen Supporter."
                        },
                        new
                        {
                            Id = 8,
                            Language = Language.English,
                            Message = "The project leader appoints administrators. The administrators appoint supporters."
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.FreeroamDefaultVehicle", b =>
                {
                    b.Property<FreeroamVehicleType>("VehicleType")
                        .HasColumnType("freeroam_vehicle_type");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<VehicleHash>("VehicleHash")
                        .HasColumnType("vehicle_hash");

                    b.HasKey("VehicleType");

                    b.ToTable("FreeroamDefaultVehicle");

                    b.HasData(
                        new
                        {
                            VehicleType = FreeroamVehicleType.Car,
                            VehicleHash = VehicleHash.Pfister811
                        },
                        new
                        {
                            VehicleType = FreeroamVehicleType.Helicopter,
                            VehicleHash = VehicleHash.Akula
                        },
                        new
                        {
                            VehicleType = FreeroamVehicleType.Plane,
                            VehicleHash = VehicleHash.Pyro
                        },
                        new
                        {
                            VehicleType = FreeroamVehicleType.Bike,
                            VehicleHash = VehicleHash.Hakuchou2
                        },
                        new
                        {
                            VehicleType = FreeroamVehicleType.Boat,
                            VehicleHash = VehicleHash.Speeder2
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Maps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTime>("CreateTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Name")
                        .HasMethod("hash");

                    b.ToTable("Maps");

                    b.HasData(
                        new
                        {
                            Id = -6,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = -1,
                            Name = "All Arms Races"
                        },
                        new
                        {
                            Id = -5,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = -1,
                            Name = "All Gangwars"
                        },
                        new
                        {
                            Id = -4,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = -1,
                            Name = "All Sniper"
                        },
                        new
                        {
                            Id = -3,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = -1,
                            Name = "All Bombs"
                        },
                        new
                        {
                            Id = -2,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = -1,
                            Name = "All Normals"
                        },
                        new
                        {
                            Id = -1,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = -1,
                            Name = "All"
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Offlinemessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("Offlinemessages");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<byte>("BlipColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)4);

                    b.Property<short>("ColorB")
                        .HasColumnType("smallint");

                    b.Property<short>("ColorG")
                        .HasColumnType("smallint");

                    b.Property<short>("ColorR")
                        .HasColumnType("smallint");

                    b.Property<short>("Index")
                        .HasColumnType("smallint");

                    b.Property<int>("Lobby")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValue("Spectator");

                    b.Property<int>("SkinHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Lobby");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            BlipColor = (byte)4,
                            ColorB = (short)255,
                            ColorG = (short)255,
                            ColorR = (short)255,
                            Index = (short)0,
                            Lobby = -4,
                            Name = "Spectator",
                            SkinHash = 0
                        },
                        new
                        {
                            Id = -2,
                            BlipColor = (byte)4,
                            ColorB = (short)255,
                            ColorG = (short)255,
                            ColorR = (short)255,
                            Index = (short)0,
                            Lobby = -1,
                            Name = "Spectator",
                            SkinHash = 0
                        },
                        new
                        {
                            Id = -3,
                            BlipColor = (byte)52,
                            ColorB = (short)0,
                            ColorG = (short)150,
                            ColorR = (short)0,
                            Index = (short)1,
                            Lobby = -1,
                            Name = "SWAT",
                            SkinHash = 0
                        },
                        new
                        {
                            Id = -4,
                            BlipColor = (byte)1,
                            ColorB = (short)0,
                            ColorG = (short)0,
                            ColorR = (short)150,
                            Index = (short)2,
                            Lobby = -1,
                            Name = "Terrorist",
                            SkinHash = 0
                        },
                        new
                        {
                            Id = -5,
                            BlipColor = (byte)4,
                            ColorB = (short)255,
                            ColorG = (short)255,
                            ColorR = (short)255,
                            Index = (short)0,
                            Lobby = -2,
                            Name = "None",
                            SkinHash = 0
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Weapons", b =>
                {
                    b.Property<WeaponHash>("Hash")
                        .HasColumnType("weapon_hash");

                    b.Property<int>("ClipSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<float>("Damage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("DamageExpMult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("HeadShotDamageModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("HeadshotsExpMult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("HitLimbsDamageModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("HitsExpMult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("KillsExpMult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("MaxHeadShotDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("MinHeadShotDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("Range")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("ReloadTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("ShotsExpMult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("TimeBetweenShots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<WeaponType>("Type")
                        .HasColumnType("weapon_type");

                    b.HasKey("Hash");

                    b.ToTable("Weapons");

                    b.HasData(
                        new
                        {
                            Hash = WeaponHash.Sniperrifle,
                            ClipSize = 0,
                            Damage = 101f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1000f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Fireextinguisher,
                            ClipSize = 0,
                            Damage = 0f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Rest
                        },
                        new
                        {
                            Hash = WeaponHash.Compactlauncher,
                            ClipSize = 0,
                            Damage = 100f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Snowball,
                            ClipSize = 0,
                            Damage = 10f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Vintagepistol,
                            ClipSize = 0,
                            Damage = 34f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Combatpdw,
                            ClipSize = 0,
                            Damage = 28f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Heavysniper,
                            ClipSize = 0,
                            Damage = 216f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 2f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Heavysniper_mk2,
                            ClipSize = 0,
                            Damage = 216f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 2f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Autoshotgun,
                            ClipSize = 0,
                            Damage = 162f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Shotgun
                        },
                        new
                        {
                            Hash = WeaponHash.Microsmg,
                            ClipSize = 0,
                            Damage = 21f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Wrench,
                            ClipSize = 0,
                            Damage = 40f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Pistol,
                            ClipSize = 0,
                            Damage = 26f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Pistol_mk2,
                            ClipSize = 0,
                            Damage = 26f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Pumpshotgun,
                            ClipSize = 0,
                            Damage = 58f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Shotgun
                        },
                        new
                        {
                            Hash = WeaponHash.Pumpshotgun_mk2,
                            ClipSize = 0,
                            Damage = 58f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Shotgun
                        },
                        new
                        {
                            Hash = WeaponHash.Appistol,
                            ClipSize = 0,
                            Damage = 28f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Ball,
                            ClipSize = 0,
                            Damage = 0f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Molotov,
                            ClipSize = 0,
                            Damage = 10f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Smg,
                            ClipSize = 0,
                            Damage = 22f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Smg_mk2,
                            ClipSize = 0,
                            Damage = 22f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Stickybomb,
                            ClipSize = 0,
                            Damage = 100f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Petrolcan,
                            ClipSize = 0,
                            Damage = 0f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Rest
                        },
                        new
                        {
                            Hash = WeaponHash.Stungun,
                            ClipSize = 0,
                            Damage = 0f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Heavyshotgun,
                            ClipSize = 0,
                            Damage = 117f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Shotgun
                        },
                        new
                        {
                            Hash = WeaponHash.Minigun,
                            ClipSize = 0,
                            Damage = 30f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Golfclub,
                            ClipSize = 0,
                            Damage = 40f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Flaregun,
                            ClipSize = 0,
                            Damage = 50f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Flare,
                            ClipSize = 0,
                            Damage = 0f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Grenadelauncher_smoke,
                            ClipSize = 0,
                            Damage = 0f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Hammer,
                            ClipSize = 0,
                            Damage = 40f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Combatpistol,
                            ClipSize = 0,
                            Damage = 27f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Gusenberg,
                            ClipSize = 0,
                            Damage = 34f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Compactrifle,
                            ClipSize = 0,
                            Damage = 34f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Hominglauncher,
                            ClipSize = 0,
                            Damage = 150f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Nightstick,
                            ClipSize = 0,
                            Damage = 35f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Railgun,
                            ClipSize = 0,
                            Damage = 50f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Sawnoffshotgun,
                            ClipSize = 0,
                            Damage = 160f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Shotgun
                        },
                        new
                        {
                            Hash = WeaponHash.Bullpuprifle,
                            ClipSize = 0,
                            Damage = 32f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Firework,
                            ClipSize = 0,
                            Damage = 100f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Combatmg,
                            ClipSize = 0,
                            Damage = 28f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Combatmg_mk2,
                            ClipSize = 0,
                            Damage = 28f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Carbinerifle,
                            ClipSize = 0,
                            Damage = 32f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Crowbar,
                            ClipSize = 0,
                            Damage = 40f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Flashlight,
                            ClipSize = 0,
                            Damage = 30f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Dagger,
                            ClipSize = 0,
                            Damage = 45f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Grenade,
                            ClipSize = 0,
                            Damage = 100f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Poolcue,
                            ClipSize = 0,
                            Damage = 40f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Bat,
                            ClipSize = 0,
                            Damage = 40f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Pistol50,
                            ClipSize = 0,
                            Damage = 51f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Knife,
                            ClipSize = 0,
                            Damage = 45f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Mg,
                            ClipSize = 0,
                            Damage = 40f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Bullpupshotgun,
                            ClipSize = 0,
                            Damage = 112f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Shotgun
                        },
                        new
                        {
                            Hash = WeaponHash.Bzgas,
                            ClipSize = 0,
                            Damage = 0f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Unarmed,
                            ClipSize = 0,
                            Damage = 15f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Grenadelauncher,
                            ClipSize = 0,
                            Damage = 100f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Musket,
                            ClipSize = 0,
                            Damage = 165f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Shotgun
                        },
                        new
                        {
                            Hash = WeaponHash.Proximine,
                            ClipSize = 0,
                            Damage = 100f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Advancedrifle,
                            ClipSize = 0,
                            Damage = 30f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Rpg,
                            ClipSize = 0,
                            Damage = 100f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Pipebomb,
                            ClipSize = 0,
                            Damage = 100f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.Minismg,
                            ClipSize = 0,
                            Damage = 22f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Snspistol,
                            ClipSize = 0,
                            Damage = 28f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Snspistol_mk2,
                            ClipSize = 0,
                            Damage = 28f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Assaultrifle,
                            ClipSize = 0,
                            Damage = 30f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Assaultrifle_mk2,
                            ClipSize = 0,
                            Damage = 30f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Specialcarbine,
                            ClipSize = 0,
                            Damage = 32f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Revolver,
                            ClipSize = 0,
                            Damage = 110f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Revolver_mk2,
                            ClipSize = 0,
                            Damage = 110f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Doubleaction,
                            ClipSize = 0,
                            Damage = 110f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Marksmanrifle,
                            ClipSize = 0,
                            Damage = 65f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 2f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Marksmanrifle_mk2,
                            ClipSize = 0,
                            Damage = 65f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 2f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Battleaxe,
                            ClipSize = 0,
                            Damage = 50f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Heavypistol,
                            ClipSize = 0,
                            Damage = 40f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Knuckle,
                            ClipSize = 0,
                            Damage = 30f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Machinepistol,
                            ClipSize = 0,
                            Damage = 20f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Marksmanpistol,
                            ClipSize = 0,
                            Damage = 150f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Machete,
                            ClipSize = 0,
                            Damage = 45f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Switchblade,
                            ClipSize = 0,
                            Damage = 50f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Assaultshotgun,
                            ClipSize = 0,
                            Damage = 192f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Shotgun
                        },
                        new
                        {
                            Hash = WeaponHash.Dbshotgun,
                            ClipSize = 0,
                            Damage = 166f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Shotgun
                        },
                        new
                        {
                            Hash = WeaponHash.Assaultsmg,
                            ClipSize = 0,
                            Damage = 23f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Hatchet,
                            ClipSize = 0,
                            Damage = 50f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Stone_hatchet,
                            ClipSize = 0,
                            Damage = 50f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Bottle,
                            ClipSize = 0,
                            Damage = 10f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Melee
                        },
                        new
                        {
                            Hash = WeaponHash.Parachute,
                            ClipSize = 0,
                            Damage = 0f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Rest
                        },
                        new
                        {
                            Hash = WeaponHash.Raypistol,
                            ClipSize = 0,
                            Damage = 80f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.Raycarbine,
                            ClipSize = 0,
                            Damage = 23f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.MachineGun
                        },
                        new
                        {
                            Hash = WeaponHash.Carbinerifle_mk2,
                            ClipSize = 0,
                            Damage = 32f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Rayminigun,
                            ClipSize = 0,
                            Damage = 32f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Bullpuprifle_mk2,
                            ClipSize = 0,
                            Damage = 32f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Specialcarbine_mk2,
                            ClipSize = 0,
                            Damage = 32f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = WeaponHash.Smokegrenade,
                            ClipSize = 0,
                            Damage = 0f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = WeaponHash.CeramicPistol,
                            ClipSize = 0,
                            Damage = 20f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.NavyRevolver,
                            ClipSize = 0,
                            Damage = 40f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Handgun
                        },
                        new
                        {
                            Hash = WeaponHash.HazardCan,
                            ClipSize = 0,
                            Damage = 0f,
                            DamageExpMult = 0.005f,
                            HeadShotDamageModifier = 1f,
                            HeadshotsExpMult = 0.5f,
                            HitLimbsDamageModifier = 0f,
                            HitsExpMult = 0f,
                            KillsExpMult = 1f,
                            MaxHeadShotDistance = 0f,
                            MinHeadShotDistance = 0f,
                            Range = 0f,
                            ReloadTime = 0f,
                            ShotsExpMult = 0f,
                            TimeBetweenShots = 0f,
                            Type = WeaponType.Rest
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Server.ServerDailyStats", b =>
                {
                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("timezone('utc', CURRENT_DATE)");

                    b.Property<int>("AmountLogins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountRegistrations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("ArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("CustomArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<short>("PlayerPeak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Date");

                    b.ToTable("ServerDailyStats");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Server.ServerSettings", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .UseIdentityByDefaultColumn();

                    b.Property<byte>("AmountCharSlots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)3);

                    b.Property<int>("AmountPlayersAllowedInGangwarTeamBeforeCountCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<int>("AmountWeeklyChallenges")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<float>("ArenaNewMapProbabilityPercent")
                        .HasColumnType("real");

                    b.Property<int>("CloseApplicationAfterDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(7);

                    b.Property<int>("DeleteApplicationAfterDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(14);

                    b.Property<int>("DeleteOfflineMessagesAfterDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<long>("DeleteRequestsDaysAfterClose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(30L);

                    b.Property<float>("DistanceToSpotToDefuse")
                        .HasColumnType("real");

                    b.Property<float>("DistanceToSpotToPlant")
                        .HasColumnType("real");

                    b.Property<bool>("ErrorToPlayerOnNonExistentCommand")
                        .HasColumnType("boolean");

                    b.Property<string>("GamemodeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("GangActionAreaAttackCooldownMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<bool>("GangActionAttackerCanBeMore")
                        .HasColumnType("boolean");

                    b.Property<bool>("GangActionOwnerCanBeMore")
                        .HasColumnType("boolean");

                    b.Property<long>("GangActionPreparationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(180L);

                    b.Property<long>("GangActionRoundTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(900L);

                    b.Property<double>("GangActionTargetRadius")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(5.0);

                    b.Property<int>("GangActionTargetWithoutAttackerMaxSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<int>("GangMaxGangActionAttacksPerDay")
                        .HasColumnType("integer");

                    b.Property<string>("GitHubRepoOwnerName")
                        .HasColumnType("text");

                    b.Property<string>("GitHubRepoRepoName")
                        .HasColumnType("text");

                    b.Property<float>("GiveMoneyFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0.05f);

                    b.Property<int>("GiveMoneyMinAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100);

                    b.Property<int>("KillingSpreeMaxSecondsUntilNextKill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(18);

                    b.Property<int>("MapBuyBasePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000);

                    b.Property<float>("MapBuyCounterMultiplicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.Property<int>("MapRatingAmountForCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<float>("MinMapRatingForNewMaps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(3f);

                    b.Property<int>("MinPlayersOnlineForGangAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<float>("MultiplierRankingAssists")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(25f);

                    b.Property<float>("MultiplierRankingDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.Property<float>("MultiplierRankingKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(75f);

                    b.Property<float>("NametagMaxDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(625f);

                    b.Property<int>("ReduceMapsBoughtCounterAfterMinute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<int>("ReloadServerBansEveryMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<int>("SaveLogsCooldownMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("SavePlayerDataCooldownMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("SaveSeasonsCooldownMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowNametagOnlyOnAiming")
                        .HasColumnType("boolean");

                    b.Property<int>("TeamOrderCooldownMs")
                        .HasColumnType("integer");

                    b.Property<bool>("ToChatOnNonExistentCommand")
                        .HasColumnType("boolean");

                    b.Property<int>("UsernameChangeCooldownDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<int>("UsernameChangeCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(20000);

                    b.HasKey("Id");

                    b.ToTable("ServerSettings");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            AmountCharSlots = (byte)0,
                            AmountPlayersAllowedInGangwarTeamBeforeCountCheck = 0,
                            AmountWeeklyChallenges = 0,
                            ArenaNewMapProbabilityPercent = 2f,
                            CloseApplicationAfterDays = 0,
                            DeleteApplicationAfterDays = 0,
                            DeleteOfflineMessagesAfterDays = 0,
                            DeleteRequestsDaysAfterClose = 0L,
                            DistanceToSpotToDefuse = 3f,
                            DistanceToSpotToPlant = 3f,
                            ErrorToPlayerOnNonExistentCommand = true,
                            GamemodeName = "tdm",
                            GangActionAreaAttackCooldownMinutes = 0,
                            GangActionAttackerCanBeMore = true,
                            GangActionOwnerCanBeMore = false,
                            GangActionPreparationTime = 0L,
                            GangActionRoundTime = 0L,
                            GangActionTargetRadius = 0.0,
                            GangActionTargetWithoutAttackerMaxSeconds = 0,
                            GangMaxGangActionAttacksPerDay = 5,
                            GitHubRepoOwnerName = "emre1702",
                            GitHubRepoRepoName = "TDS-V",
                            GiveMoneyFee = 0.05f,
                            GiveMoneyMinAmount = 100,
                            KillingSpreeMaxSecondsUntilNextKill = 18,
                            MapBuyBasePrice = 0,
                            MapBuyCounterMultiplicator = 0f,
                            MapRatingAmountForCheck = 10,
                            MinMapRatingForNewMaps = 3f,
                            MinPlayersOnlineForGangAction = 0,
                            MultiplierRankingAssists = 25f,
                            MultiplierRankingDamage = 1f,
                            MultiplierRankingKills = 75f,
                            NametagMaxDistance = 1000f,
                            ReduceMapsBoughtCounterAfterMinute = 0,
                            ReloadServerBansEveryMinutes = 0,
                            SaveLogsCooldownMinutes = 1,
                            SavePlayerDataCooldownMinutes = 1,
                            SaveSeasonsCooldownMinutes = 1,
                            ShowNametagOnlyOnAiming = true,
                            TeamOrderCooldownMs = 3000,
                            ToChatOnNonExistentCommand = false,
                            UsernameChangeCooldownDays = 0,
                            UsernameChangeCost = 0
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Server.ServerTotalStats", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("ArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("CustomArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<short>("PlayerPeak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.ToTable("ServerTotalStats");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            ArenaRoundsPlayed = 0L,
                            CustomArenaRoundsPlayed = 0L,
                            PlayerPeak = (short)0
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.ApplicationAnswers", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.HasKey("ApplicationId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ApplicationAnswers");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.ApplicationInvitations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationInvitations");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.ApplicationQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<UserpanelAdminQuestionAnswerType>("AnswerType")
                        .HasColumnType("userpanel_admin_question_answer_type");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("ApplicationQuestions");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.Applications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityAlwaysColumn();

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.FAQs", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<Language>("Language")
                        .HasColumnType("language");

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.HasKey("Id", "Language");

                    b.ToTable("FAQs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = Language.English,
                            Answer = "With the END key on your keyboard.",
                            Question = "How do I activate my cursor?"
                        },
                        new
                        {
                            Id = 1,
                            Language = Language.German,
                            Answer = "Mit der ENDE Taste auf deiner Tastatur.",
                            Question = "Wie aktiviere ich meinen Cursor?"
                        },
                        new
                        {
                            Id = 2,
                            Language = Language.English,
                            Answer = "In case of a transfer of TDS-V, the database will also be transferred, but without the player data (for data protection reasons).\nHowever, if you want to keep your data, you must allow it in the user panel.\nThe data does not contain any sensitive information - IPs are not stored, passwords are secure (hash + salt).",
                            Question = "What is the 'Allow data transfer' setting in the userpanel?"
                        },
                        new
                        {
                            Id = 2,
                            Language = Language.German,
                            Answer = "Im Falle einer Übergabe von TDS-V wird die Datenbank auch übergeben, jedoch ohne die Spieler-Daten (aus Datenschutz-Gründen).\nFalls du jedoch deine Daten auch dann weiterhin behalten willst, musst du es im Userpanel erlauben.\nDie Daten beinhalten keine sensiblen Informationen - IPs werden nicht gespeichert, Passwörter sind sicher (Hash + Salt).",
                            Question = "Was ist die 'Erlaube Daten-Transfer' Einstellung im Userpanel?"
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.RuleTexts", b =>
                {
                    b.Property<int>("RuleId")
                        .HasColumnType("integer");

                    b.Property<Language>("Language")
                        .HasColumnType("language");

                    b.Property<string>("RuleStr")
                        .HasColumnType("text");

                    b.HasKey("RuleId", "Language");

                    b.ToTable("RuleTexts");

                    b.HasData(
                        new
                        {
                            RuleId = 1,
                            Language = Language.English,
                            RuleStr = "Teaming with opposing players is strictly forbidden!\nThis means the deliberate sparing, better treatment, letting or similar of certain opposing players without the permission of the own team members.\nIf such behaviour is noticed, it can lead to severe penalties and is permanently noted."
                        },
                        new
                        {
                            RuleId = 1,
                            Language = Language.German,
                            RuleStr = "Teamen mit gegnerischen Spielern ist strengstens verboten!\nDamit ist das absichtliche Verschonen, besser Behandeln, Lassen o.ä. von bestimmten gegnerischen Spielern ohne Erlaubnis der eigenen Team-Mitglieder gemeint.\nWird ein solches Verhalten bemerkt, kann es zu starken Strafen führen und es wird permanent notiert."
                        },
                        new
                        {
                            RuleId = 2,
                            Language = Language.English,
                            RuleStr = "The normal chat in an official lobby has rules, the other chats (private lobbies, dirty) none.\nBy 'normal chat' we mean all chat methods (global, team, etc.) in the 'normal' chat area.\nThe chat rules listed here are ONLY for the normal chat in an official lobby.\nChats in private lobbies can be freely monitored by the lobby owners."
                        },
                        new
                        {
                            RuleId = 2,
                            Language = Language.German,
                            RuleStr = "Der normale Chat in einer offiziellen Lobby hat Regeln, die restlichen Chats (private Lobbys, dirty) jedoch keine.\nUnter 'normaler Chat' versteht man alle Chats-Methode (global, team usw.) im 'normal' Chat-Bereich.\nDie hier aufgelisteten Chat-Regeln richten sich NUR an den normalen Chat in einer offiziellen Lobby.\nChats in privaten Lobbys können frei von den Lobby-Besitzern überwacht werden."
                        },
                        new
                        {
                            RuleId = 3,
                            Language = Language.English,
                            RuleStr = "Admins have to follow the same rules as players do."
                        },
                        new
                        {
                            RuleId = 3,
                            Language = Language.German,
                            RuleStr = "Admins haben genauso die Regeln zu befolgen wie auch die Spieler."
                        },
                        new
                        {
                            RuleId = 4,
                            Language = Language.English,
                            RuleStr = "Exploitation of the commands is strictly forbidden!\nAdmin commands for 'punishing' (kick, mute, ban etc.) may only be used for violations of rules."
                        },
                        new
                        {
                            RuleId = 4,
                            Language = Language.German,
                            RuleStr = "Ausnutzung der Befehle ist strengstens verboten!\nAdmin-Befehle zum 'Bestrafen' (Kick, Mute, Ban usw.) dürfen auch nur bei Verstößen gegen Regeln genutzt werden."
                        },
                        new
                        {
                            RuleId = 5,
                            Language = Language.English,
                            RuleStr = "If you are not sure if the time for e.g. Mute or Bann could be too high,\nask your team leader - if you can't reach someone quickly, choose a lower time.\nToo high times are bad, too low times are no problem."
                        },
                        new
                        {
                            RuleId = 5,
                            Language = Language.German,
                            RuleStr = "Wenn du dir nicht sicher bist, ob die Zeit für z.B. Mute oder Bann zu hoch sein könnte,\nfrage deinen Team-Leiter - kannst du niemanden auf die Schnelle erreichen, so entscheide dich für eine niedrigere Zeit.\nZu hohe Zeiten sind schlecht, zu niedrige kein Problem."
                        },
                        new
                        {
                            RuleId = 6,
                            Language = Language.English,
                            RuleStr = "All admin rules with the exception of activity duty are also valid for VIPs."
                        },
                        new
                        {
                            RuleId = 6,
                            Language = Language.German,
                            RuleStr = "Alle Admin-Regeln mit Ausnahme von Aktivitäts-Pflicht sind auch gültig für VIPs."
                        },
                        new
                        {
                            RuleId = 7,
                            Language = Language.English,
                            RuleStr = "The VIPs are free to decide whether they want to use their rights or not."
                        },
                        new
                        {
                            RuleId = 7,
                            Language = Language.German,
                            RuleStr = "Den VIPs ist es frei überlassen, ob sie ihre Rechte nutzen wollen oder nicht."
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.Rules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<RuleCategory>("Category")
                        .HasColumnType("rule_category");

                    b.Property<RuleTarget>("Target")
                        .HasColumnType("rule_target");

                    b.HasKey("Id");

                    b.ToTable("Rules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = RuleCategory.General,
                            Target = RuleTarget.User
                        },
                        new
                        {
                            Id = 2,
                            Category = RuleCategory.Chat,
                            Target = RuleTarget.User
                        },
                        new
                        {
                            Id = 3,
                            Category = RuleCategory.General,
                            Target = RuleTarget.Admin
                        },
                        new
                        {
                            Id = 4,
                            Category = RuleCategory.General,
                            Target = RuleTarget.Admin
                        },
                        new
                        {
                            Id = 5,
                            Category = RuleCategory.General,
                            Target = RuleTarget.Admin
                        },
                        new
                        {
                            Id = 6,
                            Category = RuleCategory.General,
                            Target = RuleTarget.VIP
                        },
                        new
                        {
                            Id = 7,
                            Category = RuleCategory.General,
                            Target = RuleTarget.VIP
                        });
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.SupportRequestMessages", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<int>("MessageIndex")
                        .HasColumnType("integer");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', CURRENT_DATE)");

                    b.Property<string>("Text")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("RequestId", "MessageIndex");

                    b.HasIndex("AuthorId");

                    b.ToTable("SupportRequestMessages");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.SupportRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AtleastAdminLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', CURRENT_DATE)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<SupportType>("Type")
                        .HasColumnType("support_type");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("SupportRequests");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Admin.AdminLevelNames", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Admin.AdminLevels", "LevelNavigation")
                        .WithMany("AdminLevelNames")
                        .HasForeignKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelNavigation");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Challenge.PlayerChallenges", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithMany("Challenges")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Command.CommandAlias", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Command.Commands", "CommandNavigation")
                        .WithMany("CommandAlias")
                        .HasForeignKey("Command")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommandNavigation");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Command.CommandInfos", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Command.Commands", "IdNavigation")
                        .WithMany("CommandInfos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Command.Commands", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Admin.AdminLevels", "NeededAdminLevelNavigation")
                        .WithMany("Commands")
                        .HasForeignKey("NeededAdminLevel")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("NeededAdminLevelNavigation");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangActionAreas", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Rest.Maps", "Map")
                        .WithOne("GangwarArea")
                        .HasForeignKey("TDS.Server.Database.Entity.GangEntities.GangActionAreas", "MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.GangEntities.Gangs", "OwnerGang")
                        .WithMany("GangwarAreas")
                        .HasForeignKey("OwnerGangId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("OwnerGang");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangHouses", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Creator")
                        .WithMany("CreatedHouses")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangMembers", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.GangEntities.Gangs", "Gang")
                        .WithMany("Members")
                        .HasForeignKey("GangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithOne("GangMemberNavigation")
                        .HasForeignKey("TDS.Server.Database.Entity.GangEntities.GangMembers", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.GangEntities.GangRanks", "Rank")
                        .WithMany("GangMembers")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gang");

                    b.Navigation("Player");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangRankPermissions", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.GangEntities.Gangs", "Gang")
                        .WithOne("RankPermissions")
                        .HasForeignKey("TDS.Server.Database.Entity.GangEntities.GangRankPermissions", "GangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gang");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangRanks", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.GangEntities.Gangs", "Gang")
                        .WithMany("Ranks")
                        .HasForeignKey("GangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gang");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangStats", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.GangEntities.Gangs", "Gang")
                        .WithOne("Stats")
                        .HasForeignKey("TDS.Server.Database.Entity.GangEntities.GangStats", "GangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gang");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangVehicles", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.GangEntities.Gangs", "Gang")
                        .WithMany("Vehicles")
                        .HasForeignKey("GangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gang");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.Gangs", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.GangEntities.GangHouses", "House")
                        .WithOne("OwnerGang")
                        .HasForeignKey("TDS.Server.Database.Entity.GangEntities.Gangs", "HouseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Owner")
                        .WithOne("OwnedGang")
                        .HasForeignKey("TDS.Server.Database.Entity.GangEntities.Gangs", "OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TDS.Server.Database.Entity.Rest.Teams", "Team")
                        .WithMany("Gangs")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("Owner");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.Lobbies", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Owner")
                        .WithMany("Lobbies")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyArmsRaceWeapons", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithMany("ArmsRaceWeapons")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Rest.Weapons", "Weapon")
                        .WithMany("ArmsRaceWeapons")
                        .HasForeignKey("WeaponHash")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Lobby");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyFightSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithOne("FightSettings")
                        .HasForeignKey("TDS.Server.Database.Entity.LobbyEntities.LobbyFightSettings", "LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyKillingspreeRewards", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithMany("LobbyKillingspreeRewards")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyMapSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithOne("LobbyMapSettings")
                        .HasForeignKey("TDS.Server.Database.Entity.LobbyEntities.LobbyMapSettings", "LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyMaps", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithMany("LobbyMaps")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Rest.Maps", "Map")
                        .WithMany("LobbyMaps")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyRewards", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithOne("LobbyRewards")
                        .HasForeignKey("TDS.Server.Database.Entity.LobbyEntities.LobbyRewards", "LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyRoundSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithOne("LobbyRoundSettings")
                        .HasForeignKey("TDS.Server.Database.Entity.LobbyEntities.LobbyRoundSettings", "LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.LobbyWeapons", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Rest.Weapons", "HashNavigation")
                        .WithMany("LobbyWeapons")
                        .HasForeignKey("Hash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "LobbyNavigation")
                        .WithMany("LobbyWeapons")
                        .HasForeignKey("Lobby")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HashNavigation");

                    b.Navigation("LobbyNavigation");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharAppearanceDatas", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Char.PlayerCharDatas", "CharDatas")
                        .WithMany("AppearanceData")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharDatas", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithOne("CharDatas")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Char.PlayerCharDatas", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharFeaturesDatas", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Char.PlayerCharDatas", "CharDatas")
                        .WithMany("FeaturesData")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharGeneralDatas", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Char.PlayerCharDatas", "CharDatas")
                        .WithMany("GeneralData")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharHairAndColorsDatas", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Char.PlayerCharDatas", "CharDatas")
                        .WithMany("HairAndColorsData")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharHeritageDatas", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Char.PlayerCharDatas", "CharDatas")
                        .WithMany("HeritageData")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharDatas");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerBans", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Admin")
                        .WithMany("PlayerBansAdmin")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithMany("PlayerBans")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithMany("PlayerBansPlayer")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Lobby");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerClothes", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithOne("PlayerClothes")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.PlayerClothes", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerCommands", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Command.Commands", "Command")
                        .WithMany("PlayerCommands")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithMany("Commands")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Command");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerLobbyStats", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithMany("PlayerLobbyStats")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithMany("PlayerLobbyStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerMapFavourites", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Rest.Maps", "Map")
                        .WithMany("PlayerMapFavourites")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithMany("PlayerMapFavourites")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerMapRatings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Rest.Maps", "Map")
                        .WithMany("PlayerMapRatings")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithMany("PlayerMapRatings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerRelations", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithMany("PlayerRelationsPlayer")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Target")
                        .WithMany("PlayerRelationsTarget")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerStats", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithOne("PlayerStats")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.PlayerStats", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerTotalStats", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithOne("PlayerTotalStats")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.PlayerTotalStats", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerWeaponBodypartStats", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithMany("WeaponBodypartStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Rest.Weapons", "Weapon")
                        .WithMany("PlayerWeaponBodypartStats")
                        .HasForeignKey("WeaponHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.PlayerWeaponStats", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithMany("WeaponStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Rest.Weapons", "Weapon")
                        .WithMany("PlayerWeaponStats")
                        .HasForeignKey("WeaponHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Players", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "AdminLeader")
                        .WithMany("AdminMembers")
                        .HasForeignKey("AdminLeaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TDS.Server.Database.Entity.Admin.AdminLevels", "AdminLvlNavigation")
                        .WithMany("Players")
                        .HasForeignKey("AdminLvl")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("AdminLeader");

                    b.Navigation("AdminLvlNavigation");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerChatSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", null)
                        .WithOne("Chat")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerChatSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerCooldownsAndDurationsSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", null)
                        .WithOne("CooldownsAndDurations")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerCooldownsAndDurationsSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerFightEffectSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", null)
                        .WithOne("FightEffect")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerFightEffectSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerGeneralSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", null)
                        .WithOne("General")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerGeneralSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", "PlayerSettings")
                        .WithMany()
                        .HasForeignKey("PlayerSettingsPlayerId");

                    b.Navigation("PlayerSettings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerInfoSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", null)
                        .WithOne("Info")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerInfoSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerIngameColorsSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", null)
                        .WithOne("IngameColors")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerIngameColorsSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerKillInfoSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithOne("KillInfoSettings")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerKillInfoSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerScoreboardSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", null)
                        .WithOne("Scoreboard")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerScoreboardSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithOne("PlayerSettings")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerThemeSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithOne("ThemeSettings")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerThemeSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerVoiceSettings", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", null)
                        .WithOne("Voice")
                        .HasForeignKey("TDS.Server.Database.Entity.Player.Settings.PlayerVoiceSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Maps", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Creator")
                        .WithMany("Maps")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Offlinemessages", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Source")
                        .WithMany("OfflinemessagesSource")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Target")
                        .WithMany("OfflinemessagesTarget")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Teams", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.LobbyEntities.Lobbies", "LobbyNavigation")
                        .WithMany("Teams")
                        .HasForeignKey("Lobby")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LobbyNavigation");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.ApplicationAnswers", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Userpanel.Applications", "Application")
                        .WithMany("Answers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Userpanel.ApplicationQuestions", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.ApplicationInvitations", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Admin")
                        .WithMany("ApplicationInvitations")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Userpanel.Applications", "Application")
                        .WithMany("Invitations")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.ApplicationQuestions", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Admin")
                        .WithMany("ApplicationQuestions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.Applications", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Player")
                        .WithOne("Application")
                        .HasForeignKey("TDS.Server.Database.Entity.Userpanel.Applications", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.RuleTexts", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Userpanel.Rules", "Rule")
                        .WithMany("RuleTexts")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.SupportRequestMessages", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Author")
                        .WithMany("SupportRequestMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS.Server.Database.Entity.Userpanel.SupportRequests", "Request")
                        .WithMany("Messages")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.SupportRequests", b =>
                {
                    b.HasOne("TDS.Server.Database.Entity.Player.Players", "Author")
                        .WithOne("SupportRequests")
                        .HasForeignKey("TDS.Server.Database.Entity.Userpanel.SupportRequests", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Admin.AdminLevels", b =>
                {
                    b.Navigation("AdminLevelNames");

                    b.Navigation("Commands");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Command.Commands", b =>
                {
                    b.Navigation("CommandAlias");

                    b.Navigation("CommandInfos");

                    b.Navigation("PlayerCommands");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangHouses", b =>
                {
                    b.Navigation("OwnerGang");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.GangRanks", b =>
                {
                    b.Navigation("GangMembers");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.GangEntities.Gangs", b =>
                {
                    b.Navigation("GangwarAreas");

                    b.Navigation("Members");

                    b.Navigation("RankPermissions");

                    b.Navigation("Ranks");

                    b.Navigation("Stats");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.LobbyEntities.Lobbies", b =>
                {
                    b.Navigation("ArmsRaceWeapons");

                    b.Navigation("FightSettings");

                    b.Navigation("LobbyKillingspreeRewards");

                    b.Navigation("LobbyMaps");

                    b.Navigation("LobbyMapSettings");

                    b.Navigation("LobbyRewards");

                    b.Navigation("LobbyRoundSettings");

                    b.Navigation("LobbyWeapons");

                    b.Navigation("PlayerBans");

                    b.Navigation("PlayerLobbyStats");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Char.PlayerCharDatas", b =>
                {
                    b.Navigation("AppearanceData");

                    b.Navigation("FeaturesData");

                    b.Navigation("GeneralData");

                    b.Navigation("HairAndColorsData");

                    b.Navigation("HeritageData");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Players", b =>
                {
                    b.Navigation("AdminMembers");

                    b.Navigation("Application");

                    b.Navigation("ApplicationInvitations");

                    b.Navigation("ApplicationQuestions");

                    b.Navigation("Challenges");

                    b.Navigation("CharDatas");

                    b.Navigation("Commands");

                    b.Navigation("CreatedHouses");

                    b.Navigation("GangMemberNavigation");

                    b.Navigation("KillInfoSettings");

                    b.Navigation("Lobbies");

                    b.Navigation("Maps");

                    b.Navigation("OfflinemessagesSource");

                    b.Navigation("OfflinemessagesTarget");

                    b.Navigation("OwnedGang");

                    b.Navigation("PlayerBansAdmin");

                    b.Navigation("PlayerBansPlayer");

                    b.Navigation("PlayerClothes");

                    b.Navigation("PlayerLobbyStats");

                    b.Navigation("PlayerMapFavourites");

                    b.Navigation("PlayerMapRatings");

                    b.Navigation("PlayerRelationsPlayer");

                    b.Navigation("PlayerRelationsTarget");

                    b.Navigation("PlayerSettings");

                    b.Navigation("PlayerStats");

                    b.Navigation("PlayerTotalStats");

                    b.Navigation("SupportRequestMessages");

                    b.Navigation("SupportRequests");

                    b.Navigation("ThemeSettings");

                    b.Navigation("WeaponBodypartStats");

                    b.Navigation("WeaponStats");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Player.Settings.PlayerSettings", b =>
                {
                    b.Navigation("Chat");

                    b.Navigation("CooldownsAndDurations");

                    b.Navigation("FightEffect");

                    b.Navigation("General");

                    b.Navigation("Info");

                    b.Navigation("IngameColors");

                    b.Navigation("Scoreboard");

                    b.Navigation("Voice");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Maps", b =>
                {
                    b.Navigation("GangwarArea");

                    b.Navigation("LobbyMaps");

                    b.Navigation("PlayerMapFavourites");

                    b.Navigation("PlayerMapRatings");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Teams", b =>
                {
                    b.Navigation("Gangs");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Rest.Weapons", b =>
                {
                    b.Navigation("ArmsRaceWeapons");

                    b.Navigation("LobbyWeapons");

                    b.Navigation("PlayerWeaponBodypartStats");

                    b.Navigation("PlayerWeaponStats");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.ApplicationQuestions", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.Applications", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.Rules", b =>
                {
                    b.Navigation("RuleTexts");
                });

            modelBuilder.Entity("TDS.Server.Database.Entity.Userpanel.SupportRequests", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
