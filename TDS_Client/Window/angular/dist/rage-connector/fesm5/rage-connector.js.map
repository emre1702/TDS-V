{"version":3,"file":"rage-connector.js","sources":["ng://rage-connector/lib/rage-connector.service.ts","ng://rage-connector/lib/rage-connector.component.ts","ng://rage-connector/lib/rage-connector.module.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\n\ndeclare const mp: {\n  trigger(eventName: string, ...args: any): void;\n};\ndeclare const window: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RageConnectorService {\n\n  private static zone: NgZone = null;\n  private static events: {[key: string]: ((...args: any) => void)[]} = {};\n  private static callbackEvents: {[key: string]: ((...args: any) => void)[]} = {};\n\n  constructor(zone: NgZone) {\n    RageConnectorService.zone = zone;\n    window.RageAngularEvent = this.rageEventHandler;\n  }\n\n  public rageEventHandler(eventName: string, ...args: any) {\n    RageConnectorService.zone.run(() => {\n      if (RageConnectorService.events[eventName]) {\n        for (const func of RageConnectorService.events[eventName]) {\n          func(...args);\n        }\n      }\n      if (RageConnectorService.callbackEvents[eventName]) {\n        const callbackFunctions = RageConnectorService.callbackEvents[eventName];\n        RageConnectorService.callbackEvents[eventName] = undefined;\n        for (const func of callbackFunctions) {\n          func(...args);\n        }\n      }\n    });\n  }\n\n  /**\n   * Adds an \"event listener\" for \"events\" from RAGE clientside.\n   * Don't forget to use lambda for callback or add bind(this),\n   * else \"this\" in the function will refer to rage-connector.service.ts instead.\n   * @param eventName Name of the event used in RAGE\n   * @param callback Any function\n   */\n  public listen(eventName: string, callback: (...args: any) => void) {\n    if (!RageConnectorService.events[eventName]) {\n      RageConnectorService.events[eventName] = [];\n    }\n    RageConnectorService.events[eventName].push(callback);\n  }\n\n  public call(eventName: string, ...args: any) {\n    if (typeof mp == \"undefined\") // testing without RAGE\n      return;\n    mp.trigger(eventName, ...args);\n  }\n\n  /**\n   * Calls an event and adds an \"event listener\" for a response from RAGE clientside.\n   * Don't forget to use lambda for callback or add bind(this),\n   * else \"this\" in the function will refer to rage-connector.service.ts instead.\n   * @param eventName Name of the event used in RAGE\n   * @param args Any arguments\n   * @param callback Any function\n   */\n  public callCallback(eventName: string, args: any[] | undefined, callback: (...args: any) => void) {\n    if (typeof mp == \"undefined\") // testing without RAGE\n      return;\n    if (!RageConnectorService.callbackEvents[eventName]) {\n      RageConnectorService.callbackEvents[eventName] = [];\n    }\n    RageConnectorService.callbackEvents[eventName].push(callback);\n    if (args)\n      mp.trigger(eventName, ...args);\n    else\n      mp.trigger(eventName);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-rage-connector',\n  template: `\n    <p>\n      rage-connector works!\n    </p>\n  `,\n  styles: []\n})\nexport class RageConnectorComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RageConnectorComponent } from './rage-connector.component';\n\n\n\n@NgModule({\n  declarations: [RageConnectorComponent],\n  imports: [\n  ],\n  exports: [RageConnectorComponent]\n})\nexport class RageConnectorModule { }\n"],"names":["tslib_1.__values"],"mappings":"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"}