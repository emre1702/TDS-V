// <auto-generated />
using System;
using System.Net;
using GTANetworkAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TDS_Common.Enum;
using TDS_Server_DB.Entity;

namespace TDS_Server_DB.Migrations
{
    [DbContext(typeof(TDSNewContext))]
    partial class TDSNewContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:e_freeroam_vehicle_type", "car,helicopter,plane,bike,boat")
                .HasAnnotation("Npgsql:Enum:e_language", "german,english")
                .HasAnnotation("Npgsql:Enum:e_lobby_type", "main_menu,fight_lobby,arena,gang_lobby,map_create_lobby")
                .HasAnnotation("Npgsql:Enum:e_log_type", "kick,ban,mute,next,login,register,lobby_join,lobby_leave,lobby_kick,lobby_ban,goto,remove_map,voice_mute")
                .HasAnnotation("Npgsql:Enum:e_map_limit_type", "kill_after_time,teleport_back_after_time,block,none")
                .HasAnnotation("Npgsql:Enum:e_player_relation", "none,block,friend")
                .HasAnnotation("Npgsql:Enum:e_rule_category", "general,chat")
                .HasAnnotation("Npgsql:Enum:e_rule_target", "user,admin,vip")
                .HasAnnotation("Npgsql:Enum:e_weapon_hash", "sniper_rifle,fire_extinguisher,compact_grenade_launcher,snowball,vintage_pistol,combat_pdw,heavy_sniper,sweeper_shotgun,micro_smg,wrench,pistol,pump_shotgun,ap_pistol,ball,molotov,smg,sticky_bomb,petrol_can,stun_gun,heavy_shotgun,minigun,golf_club,flare_gun,flare,grenade_launcher_smoke,hammer,combat_pistol,gusenberg,compact_rifle,homing_launcher,nightstick,railgun,sawn_off_shotgun,bullpup_rifle,firework,combat_mg,carbine_rifle,crowbar,flashlight,dagger,grenade,pool_cue,bat,pistol50,knife,mg,bullpup_shotgun,bz_gas,unarmed,grenade_launcher,night_vision,musket,proximity_mine,advanced_rifle,rpg,pipe_bomb,mini_smg,sns_pistol,assault_rifle,special_carbine,revolver,marksman_rifle,battle_axe,heavy_pistol,knuckle_duster,machine_pistol,marksman_pistol,machete,switch_blade,assault_shotgun,double_barrel_shotgun,assault_smg,hatchet,bottle,parachute,smoke_grenade,upn_atomizer,unholy_hellbringer,carbine_rifle_m_k2,sepcial_carbine_m_k2,bullpup_rifle_m_k2")
                .HasAnnotation("Npgsql:Enum:e_weapon_type", "melee,handgun,machine_gun,assault_rifle,sniper_rifle,shotgun,heavy_weapon,thrown_weapon,rest")
                .HasAnnotation("Npgsql:Enum:vehicle_hash", "adder,airbus,airtug,akuma,alpha,alpha_z1,ambulance,annihilator,apc,ardent,army_tanker,army_trailer,army_trailer2,asea,asea2,asterope,avarus,bagger,bale_trailer,baller,baller2,baller3,baller4,baller5,baller6,banshee,banshee2,barracks,barracks2,barracks3,bati,bati2,benson,besra,bestia_gts,b_f400,bf_injection,biff,bifta,bison,bison2,bison3,bjxl,blade,blazer,blazer2,blazer3,blazer4,blazer5,blimp,blimp2,blista,blista2,blista3,bmx,boat_trailer,bobcat_xl,bodhi2,bombushka,boxville,boxville2,boxville3,boxville4,boxville5,brawler,brickade,brioso,b_type,b_type2,b_type3,buccaneer,buccaneer2,buffalo,buffalo2,buffalo3,bulldozer,bullet,burrito,burrito2,burrito3,burrito4,burrito5,bus,buzzard,buzzard2,cable_car,caddy,caddy2,caddy3,camper,carbonizzare,carbon_rs,cargobob,cargobob2,cargobob3,cargobob4,cargo_plane,casco,cavalcade,cavalcade2,cheetah,cheetah2,chimera,chino,chino2,cliffhanger,coach,cog55,cog552,cog_cabrio,cognoscenti,cognoscenti2,comet2,comet3,contender,coquette,coquette2,coquette3,cruiser,crusader,cuban800,cutter,cyclone,daemon,daemon2,defiler,diablous,diablous2,dilettante,dilettante2,dinghy,dinghy2,dinghy3,dinghy4,d_loader,dock_trailer,docktug,dodo,dominator,dominator2,double,dubsta,dubsta2,dubsta3,dukes,dukes2,dump,dune,dune2,dune3,dune4,dune5,duster,elegy,elegy2,emperor,emperor2,emperor3,enduro,entity_xf,esskey,exemplar,f620,faction,faction2,faction3,faggio,faggio2,faggio3,fbi,fb_i2,fcr,fc_r2,felon,felon2,feltzer2,feltzer3,fire_truck,fixter,flatbed,forklift,fmj,f_q2,freight,freight_car,freight_cont1,freight_cont2,freight_grain,freight_trailer,frogger,frogger2,fugitive,furoregt,fusilade,futo,gargoyle,gauntlet,gauntlet2,g_burrito,g_burrito2,glendale,g_p1,grain_trailer,granger,gresley,guardian,habanero,hakuchou,hakuchou2,half_track,handler,hauler,hauler2,havok,hexer,hotknife,howard,hunter,huntley,hydra,infernus,infernus2,ingot,innovation,insurgent,insurgent2,insurgent3,intruder,issi2,itali_gtb,itali_gt_b2,jackal,j_b700,jester,jester2,jet,jetmax,journey,kalahari,khamelion,kuruma,kuruma2,landstalker,lazer,lectro,lguard,limo2,lurcher,luxor,luxor2,lynx,mamba,mammatus,manana,manchez,marquis,marshall,massacro,massacro2,maverick,mesa,mesa2,mesa3,metro_train,microlight,miljet,minivan,minivan2,mixer,mixer2,mogul,molotok,monroe,monster,moonbeam,moonbeam2,mower,mule,mule2,mule3,nemesis,nero,nero2,nightblade,nightshade,night_shark,nimbus,ninef,ninef2,nokota,omnis,oppressor,oracle,oracle2,osiris,packer,panto,paradise,patriot,p_bus,pcj,penetrator,penumbra,peyote,pfister811,phantom,phantom2,phantom3,phoenix,picador,pigalle,police,police2,police3,police4,policeb,police_old1,police_old2,police_t,polmav,pony,pony2,pounder,prairie,pranger,predator,premier,primo,primo2,prop_trailer,prototipo,pyro,radi,rake_trailer,rancher_xl,rancher_x_l2,rally_truck,rapid_gt,rapid_g_t2,rapid_g_t3,raptor,rat_bike,rat_loader,rat_loader2,r_e7_b,reaper,rebel,rebel2,regina,rental_bus,retinue,rhapsody,rhino,riot,ripley,rocoto,romero,rogue,rubble,ruffian,ruiner,ruiner2,ruiner3,rumpo,rumpo2,rumpo3,ruston,sabre_gt,sabre_g_t2,sadler,sadler2,sanchez,sanchez2,sanctus,sandking,sandking2,savage,schafter2,schafter3,schafter4,schafter5,schafter6,schwarzer,scorcher,scrap,seabreeze,seashark,seashark2,seashark3,seminole,sentinel,sentinel2,serrano,seven70,shamal,sheava,sheriff,sheriff2,shotaro,skylift,slam_van,slam_van2,slam_van3,sovereign,specter,specter2,speeder,speeder2,speedo,speedo2,squalo,stalion,stalion2,stanier,starling,stinger,stinger_gt,stockade,stockade3,stratum,stretch,stunt,submersible,submersible2,sultan,sultan_rs,suntrap,superd,supervolito,supervolito2,surano,surfer,surfer2,surge,swift2,swift,t20,taco,tailgater,tampa,tampa2,tampa3,tanker,tanker2,tanker_car,taxi,technical,technical2,technical3,tempesta,thrust,tip_truck,tip_truck2,titan,torero,tornado,tornado2,tornado3,tornado4,tornado5,tornado6,toro,toro2,tourbus,tow_truck,tow_truck2,t_r2,t_r3,t_r4,tractor,tractor2,tractor3,trailer_logs,trailer_large,trailers,trailers2,trailers3,trailers4,trailer_small,trailer_small2,trash,trash2,tr_flat,tri_bike,tri_bike2,tri_bike3,trophy_truck,trophy_truck2,tropic,tropic2,tropos,tug,tula,turismor,turismo2,tv_trailer,tyrus,utilli_truck,utilli_truck2,utilli_truck3,vacca,vader,vagner,valkyrie,valkyrie2,velum,velum2,verlierer2,vestra,vigero,vigilante,vindicator,virgo,virgo2,virgo3,visione,volatus,voltic,voltic2,voodoo,voodoo2,vortex,warrener,washington,wastelander,windsor,windsor2,wolfsbane,x_a21,xls,xl_s2,youga,youga2,zentorno,zion,zion2,zombie_a,zombie_b,z_type,akula,autarch,avenger,avenge_r2,barrage,chernobog,come_t4,come_t5,deluxo,g_t500,hermes,hustler,kamacho,khanjali,neon,pariah,raiden,revolter,riata,rio_t2,savestra,s_c1,sentine_l3,streiter,stromberg,thruster,viseris,volatol,yosemite,z190,stafford,scramjet,strikeforce,terbyte,pbus2,oppressor2,pounder2,speedo4,freecrawler,mule4,menacer,blimp3,swinger,patriot2")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.EntityFrameworkHiLoSequence", "'EntityFrameworkHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'");

            modelBuilder.Entity("TDS_Server_DB.Entity.Admin.AdminLevelNames", b =>
                {
                    b.Property<short>("Level");

                    b.Property<ELanguage>("Language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Level", "Language");

                    b.ToTable("admin_level_names");

                    b.HasData(
                        new
                        {
                            Level = (short)0,
                            Language = ELanguage.English,
                            Name = "User"
                        },
                        new
                        {
                            Level = (short)0,
                            Language = ELanguage.German,
                            Name = "User"
                        },
                        new
                        {
                            Level = (short)1,
                            Language = ELanguage.English,
                            Name = "Supporter"
                        },
                        new
                        {
                            Level = (short)1,
                            Language = ELanguage.German,
                            Name = "Supporter"
                        },
                        new
                        {
                            Level = (short)2,
                            Language = ELanguage.English,
                            Name = "Administrator"
                        },
                        new
                        {
                            Level = (short)2,
                            Language = ELanguage.German,
                            Name = "Administrator"
                        },
                        new
                        {
                            Level = (short)3,
                            Language = ELanguage.English,
                            Name = "Projectleader"
                        },
                        new
                        {
                            Level = (short)3,
                            Language = ELanguage.German,
                            Name = "Projektleiter"
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Admin.AdminLevels", b =>
                {
                    b.Property<short>("Level");

                    b.Property<short>("ColorB");

                    b.Property<short>("ColorG");

                    b.Property<short>("ColorR");

                    b.HasKey("Level")
                        .HasName("admin_levels_pkey");

                    b.ToTable("admin_levels");

                    b.HasData(
                        new
                        {
                            Level = (short)0,
                            ColorB = (short)220,
                            ColorG = (short)220,
                            ColorR = (short)220
                        },
                        new
                        {
                            Level = (short)1,
                            ColorB = (short)113,
                            ColorG = (short)202,
                            ColorR = (short)113
                        },
                        new
                        {
                            Level = (short)2,
                            ColorB = (short)85,
                            ColorG = (short)132,
                            ColorR = (short)253
                        },
                        new
                        {
                            Level = (short)3,
                            ColorB = (short)50,
                            ColorG = (short)50,
                            ColorR = (short)222
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.CommandAlias", b =>
                {
                    b.Property<string>("Alias")
                        .HasMaxLength(100);

                    b.Property<short>("Command");

                    b.HasKey("Alias", "Command")
                        .HasName("command_alias_pkey");

                    b.HasIndex("Command");

                    b.ToTable("command_alias");

                    b.HasData(
                        new
                        {
                            Alias = "Announce",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "Announcement",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "ASay",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "OChat",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "OSay",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "AChat",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "ChatAdmin",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "InternChat",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "WriteAdmin",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "PBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "Permaban",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "RBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "TBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "Timeban",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "UBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "UnBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "GotoPlayer",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "GotoXYZ",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "Warp",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "WarpTo",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "WarpToPlayer",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "XYZ",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "RKick",
                            Command = (short)5
                        },
                        new
                        {
                            Alias = "BanLobby",
                            Command = (short)6
                        },
                        new
                        {
                            Alias = "KickLobby",
                            Command = (short)7
                        },
                        new
                        {
                            Alias = "PermaMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "PMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "RMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "TimeMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "TMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "EndRound",
                            Command = (short)9
                        },
                        new
                        {
                            Alias = "Next",
                            Command = (short)9
                        },
                        new
                        {
                            Alias = "Skip",
                            Command = (short)9
                        },
                        new
                        {
                            Alias = "Back",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "Leave",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "LeaveLobby",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "Mainmenu",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "Dead",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "Death",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "Die",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "Kill",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "AllChat",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "AllSay",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "G",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "GChat",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "Global",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "GlobalSay",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "PublicChat",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "PublicSay",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "TChat",
                            Command = (short)13
                        },
                        new
                        {
                            Alias = "TeamSay",
                            Command = (short)13
                        },
                        new
                        {
                            Alias = "TSay",
                            Command = (short)13
                        },
                        new
                        {
                            Alias = "PChat",
                            Command = (short)14
                        },
                        new
                        {
                            Alias = "PrivateSay",
                            Command = (short)14
                        },
                        new
                        {
                            Alias = "Coord",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "Coordinate",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "Coordinates",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "CurrentPos",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "CurrentPosition",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "GetPos",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "GetPosition",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "Pos",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "MSG",
                            Command = (short)18
                        },
                        new
                        {
                            Alias = "PM",
                            Command = (short)18
                        },
                        new
                        {
                            Alias = "PSay",
                            Command = (short)18
                        },
                        new
                        {
                            Alias = "CPC",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "ClosePM",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "ClosePrivateSay",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "StopPrivateChat",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "StopPrivateSay",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "OpenPrivateSay",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "OpenPM",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "OPC",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "UID",
                            Command = (short)19
                        },
                        new
                        {
                            Alias = "Ignore",
                            Command = (short)20
                        },
                        new
                        {
                            Alias = "IgnoreUser",
                            Command = (short)20
                        },
                        new
                        {
                            Alias = "Block",
                            Command = (short)20
                        },
                        new
                        {
                            Alias = "Unblock",
                            Command = (short)21
                        },
                        new
                        {
                            Alias = "PermaVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "PVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "RVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TimeVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "PermaMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "PMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "RMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TimeMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoicePermaMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoicePMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoiceRMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoiceTimeMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoiceTMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "MuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "MoneyGive",
                            Command = (short)24
                        },
                        new
                        {
                            Alias = "SendMoney",
                            Command = (short)24
                        },
                        new
                        {
                            Alias = "MoneySend",
                            Command = (short)24
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.CommandInfos", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID");

                    b.Property<ELanguage>("Language");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id", "Language")
                        .HasName("command_infos_pkey");

                    b.ToTable("command_infos");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Language = ELanguage.German,
                            Info = "Schreibt öffentlich als ein Admin."
                        },
                        new
                        {
                            Id = (short)1,
                            Language = ELanguage.English,
                            Info = "Writes public as an admin."
                        },
                        new
                        {
                            Id = (short)2,
                            Language = ELanguage.German,
                            Info = "Schreibt intern nur den Admins."
                        },
                        new
                        {
                            Id = (short)2,
                            Language = ELanguage.English,
                            Info = "Writes intern to admins only."
                        },
                        new
                        {
                            Id = (short)3,
                            Language = ELanguage.German,
                            Info = "Bannt einen Spieler vom gesamten Server."
                        },
                        new
                        {
                            Id = (short)3,
                            Language = ELanguage.English,
                            Info = "Bans a player out of the server."
                        },
                        new
                        {
                            Id = (short)4,
                            Language = ELanguage.German,
                            Info = "Teleportiert den Nutzer zu einem Spieler (evtl. in sein Auto) oder zu den angegebenen Koordinaten."
                        },
                        new
                        {
                            Id = (short)4,
                            Language = ELanguage.English,
                            Info = "Warps the user to another player (maybe in his vehicle) or to the defined coordinates."
                        },
                        new
                        {
                            Id = (short)5,
                            Language = ELanguage.German,
                            Info = "Kickt einen Spieler vom Server."
                        },
                        new
                        {
                            Id = (short)5,
                            Language = ELanguage.English,
                            Info = "Kicks a player out of the server."
                        },
                        new
                        {
                            Id = (short)6,
                            Language = ELanguage.German,
                            Info = "Bannt einen Spieler aus der Lobby, in welchem der Befehl genutzt wurde."
                        },
                        new
                        {
                            Id = (short)6,
                            Language = ELanguage.English,
                            Info = "Bans a player out of the lobby in which the command was used."
                        },
                        new
                        {
                            Id = (short)7,
                            Language = ELanguage.German,
                            Info = "Kickt einen Spieler aus der Lobby, in welchem der Befehl genutzt wurde."
                        },
                        new
                        {
                            Id = (short)7,
                            Language = ELanguage.English,
                            Info = "Kicks a player out of the lobby in which the command was used."
                        },
                        new
                        {
                            Id = (short)8,
                            Language = ELanguage.German,
                            Info = "Mutet einen Spieler im normalen Chat."
                        },
                        new
                        {
                            Id = (short)8,
                            Language = ELanguage.English,
                            Info = "Mutes a player in the normal chat."
                        },
                        new
                        {
                            Id = (short)9,
                            Language = ELanguage.German,
                            Info = "Beendet die jetzige Runde in der jeweiligen Lobby."
                        },
                        new
                        {
                            Id = (short)9,
                            Language = ELanguage.English,
                            Info = "Ends the current round in the lobby."
                        },
                        new
                        {
                            Id = (short)10,
                            Language = ELanguage.German,
                            Info = "Verlässt die jetzige Lobby."
                        },
                        new
                        {
                            Id = (short)10,
                            Language = ELanguage.English,
                            Info = "Leaves the current lobby."
                        },
                        new
                        {
                            Id = (short)11,
                            Language = ELanguage.German,
                            Info = "Tötet den Nutzer (Selbstmord)."
                        },
                        new
                        {
                            Id = (short)11,
                            Language = ELanguage.English,
                            Info = "Kills the user (suicide)."
                        },
                        new
                        {
                            Id = (short)12,
                            Language = ELanguage.German,
                            Info = "Globaler Chat, welcher überall gelesen werden kann."
                        },
                        new
                        {
                            Id = (short)12,
                            Language = ELanguage.English,
                            Info = "Global chat which can be read everywhere."
                        },
                        new
                        {
                            Id = (short)13,
                            Language = ELanguage.German,
                            Info = "Sendet die Nachricht nur zum eigenen Team."
                        },
                        new
                        {
                            Id = (short)13,
                            Language = ELanguage.English,
                            Info = "Sends the message to the current team only."
                        },
                        new
                        {
                            Id = (short)14,
                            Language = ELanguage.German,
                            Info = "Gibt die Position des Spielers aus."
                        },
                        new
                        {
                            Id = (short)14,
                            Language = ELanguage.English,
                            Info = "Outputs the position of the player."
                        },
                        new
                        {
                            Id = (short)15,
                            Language = ELanguage.German,
                            Info = "Sendet eine Nachricht im Privatchat."
                        },
                        new
                        {
                            Id = (short)15,
                            Language = ELanguage.English,
                            Info = "Sends a message in private chat."
                        },
                        new
                        {
                            Id = (short)16,
                            Language = ELanguage.German,
                            Info = "Schließt den Privatchat oder nimmt eine Privatchat-Anfrage zurück."
                        },
                        new
                        {
                            Id = (short)16,
                            Language = ELanguage.English,
                            Info = "Closes a private chat or withdraws a private chat request."
                        },
                        new
                        {
                            Id = (short)17,
                            Language = ELanguage.German,
                            Info = "Sendet eine Anfrage für einen Privatchat oder nimmt die Anfrage eines Users an."
                        },
                        new
                        {
                            Id = (short)17,
                            Language = ELanguage.English,
                            Info = "Sends a private chat request or accepts the request of another user."
                        },
                        new
                        {
                            Id = (short)18,
                            Language = ELanguage.German,
                            Info = "Private Nachricht an einen bestimmten Spieler."
                        },
                        new
                        {
                            Id = (short)18,
                            Language = ELanguage.English,
                            Info = "Private message to a specific player."
                        },
                        new
                        {
                            Id = (short)19,
                            Language = ELanguage.German,
                            Info = "Gibt dir deine User-Id aus."
                        },
                        new
                        {
                            Id = (short)19,
                            Language = ELanguage.English,
                            Info = "Outputs your user-id to yourself."
                        },
                        new
                        {
                            Id = (short)20,
                            Language = ELanguage.German,
                            Info = "Fügt das Ziel in deine Blocklist ein, sodass du keine Nachrichten mehr von ihm liest, er dich nicht einladen kann usw."
                        },
                        new
                        {
                            Id = (short)20,
                            Language = ELanguage.English,
                            Info = "Adds the target into your blocklist so you won't see messages from him, he can't invite you anymore etc."
                        },
                        new
                        {
                            Id = (short)21,
                            Language = ELanguage.German,
                            Info = "Entfernt das Ziel aus der Blockliste."
                        },
                        new
                        {
                            Id = (short)21,
                            Language = ELanguage.English,
                            Info = "Removes the target from the blocklist."
                        },
                        new
                        {
                            Id = (short)23,
                            Language = ELanguage.German,
                            Info = "Mutet einen Spieler im Voice-Chat."
                        },
                        new
                        {
                            Id = (short)23,
                            Language = ELanguage.English,
                            Info = "Mutes a player in the voice-chat."
                        },
                        new
                        {
                            Id = (short)24,
                            Language = ELanguage.German,
                            Info = "Gibt einem Spieler Geld."
                        },
                        new
                        {
                            Id = (short)24,
                            Language = ELanguage.English,
                            Info = "Gives money to a player."
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.Commands", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LobbyOwnerCanUse");

                    b.Property<short?>("NeededAdminLevel");

                    b.Property<short?>("NeededDonation");

                    b.Property<bool>("VipCanUse");

                    b.HasKey("Id");

                    b.HasIndex("NeededAdminLevel");

                    b.ToTable("commands");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Command = "AdminSay",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)2,
                            Command = "AdminChat",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)3,
                            Command = "Ban",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)2,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)4,
                            Command = "Goto",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)2,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)5,
                            Command = "Kick",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)6,
                            Command = "LobbyBan",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)7,
                            Command = "LobbyKick",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)8,
                            Command = "Mute",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)9,
                            Command = "NextMap",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)10,
                            Command = "LobbyLeave",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)11,
                            Command = "Suicide",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)12,
                            Command = "GlobalChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)13,
                            Command = "TeamChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)14,
                            Command = "PrivateChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)15,
                            Command = "Position",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)16,
                            Command = "ClosePrivateChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)17,
                            Command = "OpenPrivateChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)18,
                            Command = "PrivateMessage",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)19,
                            Command = "UserId",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)20,
                            Command = "BlockUser",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)21,
                            Command = "UnblockUser",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)22,
                            Command = "LoadMapOfOthers",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)23,
                            Command = "VoiceMute",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)24,
                            Command = "GiveMoney",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Gang.Gangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Short")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<int>("TeamId")
                        .HasColumnName("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("gangs");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.Lobbies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<short?>("AmountLifes");

                    b.Property<float>("AroundSpawnPoint")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("3");

                    b.Property<DateTime>("CreateTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<float>("DefaultSpawnRotation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<float>("DefaultSpawnX")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<float>("DefaultSpawnY")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<float>("DefaultSpawnZ")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("9000");

                    b.Property<bool>("IsOfficial");

                    b.Property<bool>("IsTemporary");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId");

                    b.Property<string>("Password")
                        .HasMaxLength(100);

                    b.Property<int>("SpawnAgainAfterDeathMs")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("400");

                    b.Property<short>("StartArmor")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("100");

                    b.Property<short>("StartHealth")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("100");

                    b.Property<ELobbyType>("Type");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("lobbies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountLifes = (short)1,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = 0f,
                            DefaultSpawnY = 0f,
                            DefaultSpawnZ = 0f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "Arena",
                            OwnerId = 0,
                            SpawnAgainAfterDeathMs = 400,
                            StartArmor = (short)0,
                            StartHealth = (short)0,
                            Type = ELobbyType.Arena
                        },
                        new
                        {
                            Id = 2,
                            AmountLifes = (short)1,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = 0f,
                            DefaultSpawnY = 0f,
                            DefaultSpawnZ = 0f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "GangLobby",
                            OwnerId = 0,
                            SpawnAgainAfterDeathMs = 400,
                            StartArmor = (short)0,
                            StartHealth = (short)0,
                            Type = ELobbyType.GangLobby
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyKillingspreeRewards", b =>
                {
                    b.Property<int>("LobbyId");

                    b.Property<short>("KillsAmount");

                    b.Property<short?>("HealthOrArmor");

                    b.Property<short?>("OnlyArmor");

                    b.Property<short?>("OnlyHealth");

                    b.HasKey("LobbyId", "KillsAmount")
                        .HasName("killingspree_rewards_pkey");

                    b.ToTable("killingspree_rewards");

                    b.HasData(
                        new
                        {
                            LobbyId = 1,
                            KillsAmount = (short)3,
                            HealthOrArmor = (short)30
                        },
                        new
                        {
                            LobbyId = 1,
                            KillsAmount = (short)5,
                            HealthOrArmor = (short)50
                        },
                        new
                        {
                            LobbyId = 1,
                            KillsAmount = (short)10,
                            HealthOrArmor = (short)100
                        },
                        new
                        {
                            LobbyId = 1,
                            KillsAmount = (short)15,
                            HealthOrArmor = (short)100
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyMapSettings", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnName("LobbyID");

                    b.Property<int>("MapLimitTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("10");

                    b.Property<EMapLimitType>("MapLimitType");

                    b.HasKey("LobbyId")
                        .HasName("lobby_map_settings_pkey");

                    b.ToTable("lobby_map_settings");

                    b.HasData(
                        new
                        {
                            LobbyId = 1,
                            MapLimitTime = 10,
                            MapLimitType = EMapLimitType.KillAfterTime
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyMaps", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnName("LobbyID");

                    b.Property<int>("MapId")
                        .HasColumnName("MapID");

                    b.HasKey("LobbyId", "MapId")
                        .HasName("lobby_maps_pkey");

                    b.HasIndex("MapId")
                        .HasName("fki_FK_lobby_maps_maps");

                    b.ToTable("lobby_maps");

                    b.HasData(
                        new
                        {
                            LobbyId = 1,
                            MapId = -1
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyRewards", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnName("LobbyID");

                    b.Property<double>("MoneyPerAssist");

                    b.Property<double>("MoneyPerDamage");

                    b.Property<double>("MoneyPerKill");

                    b.HasKey("LobbyId")
                        .HasName("lobby_rewards_pkey");

                    b.ToTable("lobby_rewards");

                    b.HasData(
                        new
                        {
                            LobbyId = 1,
                            MoneyPerAssist = 10.0,
                            MoneyPerDamage = 0.10000000000000001,
                            MoneyPerKill = 20.0
                        },
                        new
                        {
                            LobbyId = 2,
                            MoneyPerAssist = 10.0,
                            MoneyPerDamage = 0.10000000000000001,
                            MoneyPerKill = 20.0
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyRoundSettings", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnName("LobbyID");

                    b.Property<int>("BombDefuseTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("8000");

                    b.Property<int>("BombDetonateTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("45000");

                    b.Property<int>("BombPlantTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("3000");

                    b.Property<int>("CountdownTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("5");

                    b.Property<bool>("MixTeamsAfterRound");

                    b.Property<int>("RoundTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("240");

                    b.HasKey("LobbyId")
                        .HasName("lobby_round_infos_pkey");

                    b.ToTable("lobby_round_settings");

                    b.HasData(
                        new
                        {
                            LobbyId = 1,
                            BombDefuseTimeMs = 8000,
                            BombDetonateTimeMs = 45000,
                            BombPlantTimeMs = 3000,
                            CountdownTime = 5,
                            MixTeamsAfterRound = true,
                            RoundTime = 240
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyWeapons", b =>
                {
                    b.Property<EWeaponHash>("Hash");

                    b.Property<int>("Lobby");

                    b.Property<int>("Ammo");

                    b.Property<short?>("Damage");

                    b.Property<float?>("HeadMultiplicator");

                    b.HasKey("Hash", "Lobby")
                        .HasName("lobby_weapons_pkey");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("Lobby");

                    b.ToTable("lobby_weapons");

                    b.HasData(
                        new
                        {
                            Hash = EWeaponHash.AssaultRifle,
                            Lobby = 1,
                            Ammo = 2000
                        },
                        new
                        {
                            Hash = EWeaponHash.Revolver,
                            Lobby = 1,
                            Ammo = 500
                        },
                        new
                        {
                            Hash = EWeaponHash.UpnAtomizer,
                            Lobby = 1,
                            Ammo = 500
                        },
                        new
                        {
                            Hash = EWeaponHash.SMG,
                            Lobby = 1,
                            Ammo = 2000
                        },
                        new
                        {
                            Hash = EWeaponHash.MicroSMG,
                            Lobby = 1,
                            Ammo = 2000
                        },
                        new
                        {
                            Hash = EWeaponHash.UnholyHellbringer,
                            Lobby = 1,
                            Ammo = 2000
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultShotgun,
                            Lobby = 1,
                            Ammo = 2000
                        },
                        new
                        {
                            Hash = EWeaponHash.CarbineRifleMK2,
                            Lobby = 1,
                            Ammo = 2000
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Log.LogAdmins", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("AsDonator");

                    b.Property<bool>("AsVip")
                        .HasColumnName("AsVIP");

                    b.Property<int?>("Lobby");

                    b.Property<string>("Reason")
                        .IsRequired();

                    b.Property<int>("Source");

                    b.Property<int?>("Target");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<ELogType>("Type");

                    b.HasKey("Id");

                    b.ToTable("log_admins");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Log.LogChats", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("IsAdminChat");

                    b.Property<bool>("IsTeamChat");

                    b.Property<int?>("Lobby");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<int>("Source");

                    b.Property<int?>("Target");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("log_chats");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Log.LogErrors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Info")
                        .IsRequired();

                    b.Property<int?>("Source");

                    b.Property<string>("StackTrace");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("log_errors");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Log.LogRests", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<IPAddress>("Ip")
                        .HasColumnName("IP");

                    b.Property<int?>("Lobby");

                    b.Property<string>("Serial")
                        .HasMaxLength(200);

                    b.Property<int>("Source");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<ELogType>("Type");

                    b.HasKey("Id");

                    b.ToTable("log_rests");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerBans", b =>
                {
                    b.Property<int>("PlayerId");

                    b.Property<int>("LobbyId");

                    b.Property<int?>("AdminId");

                    b.Property<DateTime?>("EndTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired();

                    b.Property<DateTime>("StartTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("PlayerId", "LobbyId")
                        .HasName("player_bans_pkey");

                    b.HasIndex("AdminId");

                    b.HasIndex("LobbyId");

                    b.ToTable("player_bans");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerLobbyStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID");

                    b.Property<int>("LobbyId")
                        .HasColumnName("LobbyID");

                    b.Property<int>("Assists");

                    b.Property<int>("Damage");

                    b.Property<int>("Deaths");

                    b.Property<int>("Kills");

                    b.Property<int>("MostAssistsInADay");

                    b.Property<int>("MostAssistsInARound");

                    b.Property<int>("MostDamageInADay");

                    b.Property<int>("MostDamageInARound");

                    b.Property<int>("MostKillsInADay");

                    b.Property<int>("MostKillsInARound");

                    b.Property<int>("TotalAssists");

                    b.Property<int>("TotalDamage");

                    b.Property<int>("TotalDeaths");

                    b.Property<int>("TotalKills");

                    b.Property<int>("TotalMapsBought");

                    b.Property<int>("TotalRounds");

                    b.HasKey("PlayerId", "LobbyId")
                        .HasName("player_lobby_stats_pkey");

                    b.HasIndex("LobbyId");

                    b.ToTable("player_lobby_stats");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerMapFavourites", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID");

                    b.Property<int>("MapId")
                        .HasColumnName("MapID");

                    b.HasKey("PlayerId", "MapId")
                        .HasName("player_map_favourites_pkey");

                    b.HasIndex("MapId");

                    b.ToTable("player_map_favourites");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerMapRatings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID");

                    b.Property<int>("MapId")
                        .HasColumnName("MapID");

                    b.Property<short>("Rating");

                    b.HasKey("PlayerId", "MapId")
                        .HasName("player_map_ratings_pkey");

                    b.HasIndex("MapId");

                    b.ToTable("player_map_ratings");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerRelations", b =>
                {
                    b.Property<int>("PlayerId");

                    b.Property<int>("TargetId");

                    b.Property<EPlayerRelation>("Relation");

                    b.HasKey("PlayerId", "TargetId")
                        .HasName("player_relations_pkey");

                    b.HasIndex("TargetId");

                    b.ToTable("player_relations");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID");

                    b.Property<bool>("AllowDataTransfer");

                    b.Property<bool>("Bloodscreen");

                    b.Property<bool>("FloatingDamageInfo");

                    b.Property<bool>("Hitsound");

                    b.Property<ELanguage>("Language");

                    b.HasKey("PlayerId")
                        .HasName("player_settings_pkey");

                    b.ToTable("player_settings");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID");

                    b.Property<DateTime>("LastLoginTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("LoggedIn");

                    b.Property<int>("Money");

                    b.Property<int?>("MuteTime");

                    b.Property<int>("PlayTime");

                    b.Property<int?>("VoiceMuteTime");

                    b.HasKey("PlayerId")
                        .HasName("player_stats_pkey");

                    b.ToTable("player_stats");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerTotalStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID");

                    b.Property<long>("Money");

                    b.HasKey("PlayerId")
                        .HasName("player_total_stats_pkey");

                    b.ToTable("player_total_stats");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.Players", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<short>("AdminLvl")
                        .HasDefaultValue((short)0);

                    b.Property<short>("Donation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((short)0);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<int?>("GangId");

                    b.Property<bool>("IsVip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsVIP")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("RegisterTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(4) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("SCName")
                        .IsRequired()
                        .HasColumnName("SCName")
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("PK_players");

                    b.HasIndex("AdminLvl");

                    b.HasIndex("GangId");

                    b.ToTable("players");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.FreeroamDefaultVehicle", b =>
                {
                    b.Property<EFreeroamVehicleType>("VehicleType");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<VehicleHash>("VehicleHash");

                    b.HasKey("VehicleType");

                    b.ToTable("freeroam_default_vehicle");

                    b.HasData(
                        new
                        {
                            VehicleType = EFreeroamVehicleType.Car,
                            VehicleHash = VehicleHash.Pfister811
                        },
                        new
                        {
                            VehicleType = EFreeroamVehicleType.Helicopter,
                            VehicleHash = VehicleHash.AKULA
                        },
                        new
                        {
                            VehicleType = EFreeroamVehicleType.Plane,
                            VehicleHash = VehicleHash.Pyro
                        },
                        new
                        {
                            VehicleType = EFreeroamVehicleType.Bike,
                            VehicleHash = VehicleHash.Hakuchou2
                        },
                        new
                        {
                            VehicleType = EFreeroamVehicleType.Boat,
                            VehicleHash = VehicleHash.Speeder2
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Maps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreateTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatorId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Name")
                        .HasName("Index_maps_name")
                        .HasAnnotation("Npgsql:IndexMethod", "hash");

                    b.ToTable("maps");

                    b.HasData(
                        new
                        {
                            Id = -3,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 0,
                            Name = "All Bombs"
                        },
                        new
                        {
                            Id = -2,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 0,
                            Name = "All Normals"
                        },
                        new
                        {
                            Id = -1,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 0,
                            Name = "All"
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Offlinemessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<bool>("Seen");

                    b.Property<int>("SourceId")
                        .HasColumnName("SourceID");

                    b.Property<int>("TargetId")
                        .HasColumnName("TargetID");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("offlinemessages");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<short>("BlipColor");

                    b.Property<short>("ColorB");

                    b.Property<short>("ColorG");

                    b.Property<short>("ColorR");

                    b.Property<short>("Index");

                    b.Property<int>("Lobby");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SkinHash");

                    b.HasKey("Id");

                    b.HasIndex("Lobby");

                    b.ToTable("teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlipColor = (short)4,
                            ColorB = (short)255,
                            ColorG = (short)255,
                            ColorR = (short)255,
                            Index = (short)0,
                            Lobby = 1,
                            Name = "Spectator",
                            SkinHash = 1004114196
                        },
                        new
                        {
                            Id = 2,
                            BlipColor = (short)52,
                            ColorB = (short)0,
                            ColorG = (short)150,
                            ColorR = (short)0,
                            Index = (short)1,
                            Lobby = 1,
                            Name = "SWAT",
                            SkinHash = -1920001264
                        },
                        new
                        {
                            Id = 3,
                            BlipColor = (short)1,
                            ColorB = (short)0,
                            ColorG = (short)0,
                            ColorR = (short)150,
                            Index = (short)2,
                            Lobby = 1,
                            Name = "Terrorist",
                            SkinHash = 275618457
                        },
                        new
                        {
                            Id = 4,
                            BlipColor = (short)4,
                            ColorB = (short)255,
                            ColorG = (short)255,
                            ColorR = (short)255,
                            Index = (short)0,
                            Lobby = 2,
                            Name = "None",
                            SkinHash = 1004114196
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Weapons", b =>
                {
                    b.Property<EWeaponHash>("Hash");

                    b.Property<short>("DefaultDamage");

                    b.Property<float>("DefaultHeadMultiplicator")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<EWeaponType>("Type");

                    b.HasKey("Hash")
                        .HasName("weapons_pkey");

                    b.ToTable("weapons");

                    b.HasData(
                        new
                        {
                            Hash = EWeaponHash.SniperRifle,
                            DefaultDamage = (short)101,
                            DefaultHeadMultiplicator = 2f,
                            Type = EWeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.FireExtinguisher,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.CompactGrenadeLauncher,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Snowball,
                            DefaultDamage = (short)10,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.VintagePistol,
                            DefaultDamage = (short)34,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatPDW,
                            DefaultDamage = (short)28,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavySniper,
                            DefaultDamage = (short)216,
                            DefaultHeadMultiplicator = 2f,
                            Type = EWeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.SweeperShotgun,
                            DefaultDamage = (short)162,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.MicroSMG,
                            DefaultDamage = (short)21,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.Wrench,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Pistol,
                            DefaultDamage = (short)26,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.PumpShotgun,
                            DefaultDamage = (short)58,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.APPistol,
                            DefaultDamage = (short)28,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Ball,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Molotov,
                            DefaultDamage = (short)10,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.SMG,
                            DefaultDamage = (short)22,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.StickyBomb,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.PetrolCan,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.StunGun,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavyShotgun,
                            DefaultDamage = (short)117,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Minigun,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.GolfClub,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.FlareGun,
                            DefaultDamage = (short)50,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Flare,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.GrenadeLauncherSmoke,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Hammer,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatPistol,
                            DefaultDamage = (short)27,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Gusenberg,
                            DefaultDamage = (short)34,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.CompactRifle,
                            DefaultDamage = (short)34,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.HomingLauncher,
                            DefaultDamage = (short)150,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Nightstick,
                            DefaultDamage = (short)35,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Railgun,
                            DefaultDamage = (short)50,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.SawnOffShotgun,
                            DefaultDamage = (short)160,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.BullpupRifle,
                            DefaultDamage = (short)32,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.Firework,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatMG,
                            DefaultDamage = (short)28,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.CarbineRifle,
                            DefaultDamage = (short)32,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.Crowbar,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Flashlight,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Dagger,
                            DefaultDamage = (short)45,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Grenade,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.PoolCue,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Bat,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Pistol50,
                            DefaultDamage = (short)51,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Knife,
                            DefaultDamage = (short)45,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.MG,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.BullpupShotgun,
                            DefaultDamage = (short)112,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.BZGas,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Unarmed,
                            DefaultDamage = (short)15,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.GrenadeLauncher,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.NightVision,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Rest
                        },
                        new
                        {
                            Hash = EWeaponHash.Musket,
                            DefaultDamage = (short)165,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.ProximityMine,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.AdvancedRifle,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.RPG,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.PipeBomb,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.MiniSMG,
                            DefaultDamage = (short)22,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.SNSPistol,
                            DefaultDamage = (short)28,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultRifle,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.SpecialCarbine,
                            DefaultDamage = (short)32,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.Revolver,
                            DefaultDamage = (short)110,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.MarksmanRifle,
                            DefaultDamage = (short)65,
                            DefaultHeadMultiplicator = 2f,
                            Type = EWeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.BattleAxe,
                            DefaultDamage = (short)50,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavyPistol,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.KnuckleDuster,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.MachinePistol,
                            DefaultDamage = (short)20,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.MarksmanPistol,
                            DefaultDamage = (short)150,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Machete,
                            DefaultDamage = (short)45,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.SwitchBlade,
                            DefaultDamage = (short)50,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultShotgun,
                            DefaultDamage = (short)192,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.DoubleBarrelShotgun,
                            DefaultDamage = (short)166,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultSMG,
                            DefaultDamage = (short)23,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.Hatchet,
                            DefaultDamage = (short)50,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Bottle,
                            DefaultDamage = (short)10,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Parachute,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Rest
                        },
                        new
                        {
                            Hash = EWeaponHash.SmokeGrenade,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.UpnAtomizer,
                            DefaultDamage = (short)80,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.UnholyHellbringer,
                            DefaultDamage = (short)23,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.CarbineRifleMK2,
                            DefaultDamage = (short)32,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Server.ServerDailyStats", b =>
                {
                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("AmountLogins")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("AmountRegistrations")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("ArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("CustomArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<short>("PlayerPeak")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((short)0);

                    b.HasKey("Date")
                        .HasName("server_daily_stats_date_pkey");

                    b.ToTable("server_daily_stats");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Server.ServerSettings", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<float>("ArenaNewMapProbabilityPercent");

                    b.Property<float>("DistanceToSpotToDefuse");

                    b.Property<float>("DistanceToSpotToPlant");

                    b.Property<bool>("ErrorToPlayerOnNonExistentCommand");

                    b.Property<string>("GamemodeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("KillingSpreeMaxSecondsUntilNextKill")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(18);

                    b.Property<int>("MapRatingAmountForCheck")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(10);

                    b.Property<string>("MapsPath")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("NewMapsPath")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("SaveLogsCooldownMinutes");

                    b.Property<int>("SavePlayerDataCooldownMinutes");

                    b.Property<int>("SaveSeasonsCooldownMinutes");

                    b.Property<string>("SavedMapsPath")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("TeamOrderCooldownMs");

                    b.Property<bool>("ToChatOnNonExistentCommand");

                    b.HasKey("Id");

                    b.ToTable("server_settings");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            ArenaNewMapProbabilityPercent = 2f,
                            DistanceToSpotToDefuse = 3f,
                            DistanceToSpotToPlant = 3f,
                            ErrorToPlayerOnNonExistentCommand = true,
                            GamemodeName = "tdm",
                            KillingSpreeMaxSecondsUntilNextKill = 18,
                            MapRatingAmountForCheck = 10,
                            MapsPath = "bridge/resources/tds/maps/",
                            NewMapsPath = "bridge/resources/tds/newmaps/",
                            SaveLogsCooldownMinutes = 1,
                            SavePlayerDataCooldownMinutes = 1,
                            SaveSeasonsCooldownMinutes = 1,
                            SavedMapsPath = "bridge/resources/tds/savedmaps/",
                            TeamOrderCooldownMs = 3000,
                            ToChatOnNonExistentCommand = false
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Server.ServerTotalStats", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<long>("ArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<long>("CustomArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<short>("PlayerPeak")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.ToTable("server_total_stats");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            ArenaRoundsPlayed = 0L,
                            CustomArenaRoundsPlayed = 0L,
                            PlayerPeak = (short)0
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.RuleTexts", b =>
                {
                    b.Property<int>("RuleId")
                        .HasColumnName("RuleID");

                    b.Property<ELanguage>("Language");

                    b.Property<string>("RuleStr");

                    b.HasKey("RuleId", "Language");

                    b.ToTable("rule_texts");

                    b.HasData(
                        new
                        {
                            RuleId = 1,
                            Language = ELanguage.English,
                            RuleStr = @"Teaming with opposing players is strictly forbidden!
This means the deliberate sparing, better treatment, letting or similar of certain opposing players without the permission of the own team members.
If such behaviour is noticed, it can lead to severe penalties and is permanently noted."
                        },
                        new
                        {
                            RuleId = 1,
                            Language = ELanguage.German,
                            RuleStr = @"Teamen mit gegnerischen Spielern ist strengstens verboten!
Damit ist das absichtliche Verschonen, besser Behandeln, Lassen o.ä. von bestimmten gegnerischen Spielern ohne Erlaubnis der eigenen Team-Mitglieder gemeint.
Wird ein solches Verhalten bemerkt, kann es zu starken Strafen führen und es wird permanent notiert."
                        },
                        new
                        {
                            RuleId = 2,
                            Language = ELanguage.English,
                            RuleStr = @"The normal chat in an official lobby has rules, the other chats (private lobbies, dirty) none.
By 'normal chat' we mean all chat methods (global, team, etc.) in the 'normal' chat area.
The chat rules listed here are ONLY for the normal chat in an official lobby.
Chats in private lobbies can be freely monitored by the lobby owners."
                        },
                        new
                        {
                            RuleId = 2,
                            Language = ELanguage.German,
                            RuleStr = @"Der normale Chat in einer offiziellen Lobby hat Regeln, die restlichen Chats (private Lobbys, dirty) jedoch keine.
Unter 'normaler Chat' versteht man alle Chats-Methode (global, team usw.) im 'normal' Chat-Bereich.
Die hier aufgelisteten Chat-Regeln richten sich NUR an den normalen Chat in einer offiziellen Lobby.
Chats in privaten Lobbys können frei von den Lobby-Besitzern überwacht werden."
                        },
                        new
                        {
                            RuleId = 3,
                            Language = ELanguage.English,
                            RuleStr = "Admins have to follow the same rules as players do."
                        },
                        new
                        {
                            RuleId = 3,
                            Language = ELanguage.German,
                            RuleStr = "Admins haben genauso die Regeln zu befolgen wie auch die Spieler."
                        },
                        new
                        {
                            RuleId = 4,
                            Language = ELanguage.English,
                            RuleStr = @"Exploitation of the commands is strictly forbidden!
Admin commands for 'punishing' (kick, mute, ban etc.) may only be used for violations of rules."
                        },
                        new
                        {
                            RuleId = 4,
                            Language = ELanguage.German,
                            RuleStr = @"Ausnutzung der Befehle ist strengstens verboten!
Admin-Befehle zum 'Bestrafen' (Kick, Mute, Ban usw.) dürfen auch nur bei Verstößen gegen Regeln genutzt werden."
                        },
                        new
                        {
                            RuleId = 5,
                            Language = ELanguage.English,
                            RuleStr = @"If you are not sure if the time for e.g. Mute or Bann could be too high,
ask your team leader - if you can't reach someone quickly, choose a lower time.
Too high times are bad, too low times are no problem."
                        },
                        new
                        {
                            RuleId = 5,
                            Language = ELanguage.German,
                            RuleStr = @"Wenn du dir nicht sicher bist, ob die Zeit für z.B. Mute oder Bann zu hoch sein könnte,
frage deinen Team-Leiter - kannst du niemanden auf die Schnelle erreichen, so entscheide dich für eine niedrigere Zeit.
Zu hohe Zeiten sind schlecht, zu niedrige kein Problem."
                        },
                        new
                        {
                            RuleId = 6,
                            Language = ELanguage.English,
                            RuleStr = "All admin rules with the exception of activity duty are also valid for VIPs."
                        },
                        new
                        {
                            RuleId = 6,
                            Language = ELanguage.German,
                            RuleStr = "Alle Admin-Regeln mit Ausnahme von Aktivitäts-Pflicht sind auch gültig für VIPs."
                        },
                        new
                        {
                            RuleId = 7,
                            Language = ELanguage.English,
                            RuleStr = "The VIPs are free to decide whether they want to use their rights or not."
                        },
                        new
                        {
                            RuleId = 7,
                            Language = ELanguage.German,
                            RuleStr = "Den VIPs ist es frei überlassen, ob sie ihre Rechte nutzen wollen oder nicht."
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.Rules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<ERuleCategory>("Category");

                    b.Property<ERuleTarget>("Target");

                    b.HasKey("Id");

                    b.ToTable("rules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.User
                        },
                        new
                        {
                            Id = 2,
                            Category = ERuleCategory.Chat,
                            Target = ERuleTarget.User
                        },
                        new
                        {
                            Id = 3,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.Admin
                        },
                        new
                        {
                            Id = 4,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.Admin
                        },
                        new
                        {
                            Id = 5,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.Admin
                        },
                        new
                        {
                            Id = 6,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.VIP
                        },
                        new
                        {
                            Id = 7,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.VIP
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Admin.AdminLevelNames", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Admin.AdminLevels", "LevelNavigation")
                        .WithMany("AdminLevelNames")
                        .HasForeignKey("Level")
                        .HasConstraintName("FK_admin_level_names_admin_level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.CommandAlias", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Command.Commands", "CommandNavigation")
                        .WithMany("CommandAlias")
                        .HasForeignKey("Command")
                        .HasConstraintName("command_alias_Command_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.CommandInfos", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Command.Commands", "IdNavigation")
                        .WithMany("CommandInfos")
                        .HasForeignKey("Id")
                        .HasConstraintName("command_infos_ID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.Commands", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Admin.AdminLevels", "NeededAdminLevelNavigation")
                        .WithMany("Commands")
                        .HasForeignKey("NeededAdminLevel")
                        .HasConstraintName("FK_commands_admin_levels");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Gang.Gangs", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Rest.Teams", "Team")
                        .WithMany("Gangs")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("gangs_TeamId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.Lobbies", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Owner")
                        .WithMany("Lobbies")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("lobbies_Owner_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyKillingspreeRewards", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Lobby.Lobbies", "Lobby")
                        .WithMany("LobbyKillingspreeRewards")
                        .HasForeignKey("LobbyId")
                        .HasConstraintName("lobby_killingspree_rewards_LobbyID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyMapSettings", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Lobby.Lobbies", "Lobby")
                        .WithOne("LobbyMapSettings")
                        .HasForeignKey("TDS_Server_DB.Entity.Lobby.LobbyMapSettings", "LobbyId")
                        .HasConstraintName("lobby_map_settings_LobbyID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyMaps", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Lobby.Lobbies", "Lobby")
                        .WithMany("LobbyMaps")
                        .HasForeignKey("LobbyId")
                        .HasConstraintName("lobby_maps_LobbyID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Rest.Maps", "Map")
                        .WithMany("LobbyMaps")
                        .HasForeignKey("MapId")
                        .HasConstraintName("FK_lobby_maps_maps")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyRewards", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Lobby.Lobbies", "Lobby")
                        .WithOne("LobbyRewards")
                        .HasForeignKey("TDS_Server_DB.Entity.Lobby.LobbyRewards", "LobbyId")
                        .HasConstraintName("lobby_rewards_LobbyID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyRoundSettings", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Lobby.Lobbies", "Lobby")
                        .WithOne("LobbyRoundSettings")
                        .HasForeignKey("TDS_Server_DB.Entity.Lobby.LobbyRoundSettings", "LobbyId")
                        .HasConstraintName("lobby_round_infos_LobbyID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Lobby.LobbyWeapons", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Rest.Weapons", "HashNavigation")
                        .WithOne("LobbyWeapons")
                        .HasForeignKey("TDS_Server_DB.Entity.Lobby.LobbyWeapons", "Hash")
                        .HasConstraintName("lobby_weapons_Hash_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Lobby.Lobbies", "LobbyNavigation")
                        .WithMany("LobbyWeapons")
                        .HasForeignKey("Lobby")
                        .HasConstraintName("lobby_weapons_Lobby_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerBans", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Admin")
                        .WithMany("PlayerBansAdmin")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("player_bans_AdminID_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TDS_Server_DB.Entity.Lobby.Lobbies", "Lobby")
                        .WithMany("PlayerBans")
                        .HasForeignKey("LobbyId")
                        .HasConstraintName("player_bans_LobbyID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("PlayerBansPlayer")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("player_bans_PlayerID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerLobbyStats", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Lobby.Lobbies", "Lobby")
                        .WithMany("PlayerLobbyStats")
                        .HasForeignKey("LobbyId")
                        .HasConstraintName("player_lobby_stats_LobbyID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("PlayerLobbyStats")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("player_lobby_stats_PlayerID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerMapFavourites", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Rest.Maps", "Map")
                        .WithMany("PlayerMapFavourites")
                        .HasForeignKey("MapId")
                        .HasConstraintName("player_map_favourites_MapID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("PlayerMapFavourites")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("player_map_favourites_PlayerID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerMapRatings", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Rest.Maps", "Map")
                        .WithMany("PlayerMapRatings")
                        .HasForeignKey("MapId")
                        .HasConstraintName("player_map_ratings_MapID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("PlayerMapRatings")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("player_map_ratings_PlayerID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerRelations", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("PlayerRelationsPlayer")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("player_relations_PlayerId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Target")
                        .WithMany("PlayerRelationsTarget")
                        .HasForeignKey("TargetId")
                        .HasConstraintName("player_relations_TargetId_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerSettings", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithOne("PlayerSettings")
                        .HasForeignKey("TDS_Server_DB.Entity.Player.PlayerSettings", "PlayerId")
                        .HasConstraintName("player_settings_PlayerID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerStats", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithOne("PlayerStats")
                        .HasForeignKey("TDS_Server_DB.Entity.Player.PlayerStats", "PlayerId")
                        .HasConstraintName("player_stats_PlayerID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerTotalStats", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithOne("PlayerTotalStats")
                        .HasForeignKey("TDS_Server_DB.Entity.Player.PlayerTotalStats", "PlayerId")
                        .HasConstraintName("player_total_stats_PlayerID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.Players", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Admin.AdminLevels", "AdminLvlNavigation")
                        .WithMany("Players")
                        .HasForeignKey("AdminLvl")
                        .HasConstraintName("players_AdminLvl_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Gang.Gangs", "Gang")
                        .WithMany("Players")
                        .HasForeignKey("GangId")
                        .HasConstraintName("players_GangId_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Maps", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Creator")
                        .WithMany("Maps")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("maps_CreatorID_fkey")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Offlinemessages", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Source")
                        .WithMany("OfflinemessagesSource")
                        .HasForeignKey("SourceId")
                        .HasConstraintName("offlinemessages_SourceID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Target")
                        .WithMany("OfflinemessagesTarget")
                        .HasForeignKey("TargetId")
                        .HasConstraintName("offlinemessages_TargetID_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Teams", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Lobby.Lobbies", "LobbyNavigation")
                        .WithMany("Teams")
                        .HasForeignKey("Lobby")
                        .HasConstraintName("teams_Lobby_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.RuleTexts", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Userpanel.Rules", "Rule")
                        .WithMany("RuleTexts")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
