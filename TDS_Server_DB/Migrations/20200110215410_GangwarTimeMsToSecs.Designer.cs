// <auto-generated />
using System;
using System.Net;
using GTANetworkAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TDS_Common.Enum;
using TDS_Common.Enum.Challenge;
using TDS_Common.Enum.Userpanel;
using TDS_Server_DB.Entity;

namespace TDS_Server_DB.Migrations
{
    [DbContext(typeof(TDSDbContext))]
    [Migration("20200110215410_GangwarTimeMsToSecs")]
    partial class GangwarTimeMsToSecs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:e_challenge_frequency", "hourly,daily,weekly,monthly,yearly,forever")
                .HasAnnotation("Npgsql:Enum:e_challenge_type", "kills,assists,damage,play_time,round_played,bomb_defuse,bomb_plant,killstreak,buy_maps,review_maps,read_the_rules,read_the_faq,change_settings,join_discord_server,write_helpful_issue,creator_of_accepted_map,be_helpful_enough")
                .HasAnnotation("Npgsql:Enum:e_freeroam_vehicle_type", "car,helicopter,plane,bike,boat")
                .HasAnnotation("Npgsql:Enum:e_language", "german,english")
                .HasAnnotation("Npgsql:Enum:e_lobby_type", "main_menu,fight_lobby,arena,gang_lobby,map_create_lobby")
                .HasAnnotation("Npgsql:Enum:e_log_type", "kick,ban,mute,next,login,register,lobby__join,lobby__leave,lobby__kick,lobby__ban,goto,remove_map,voice_mute")
                .HasAnnotation("Npgsql:Enum:e_map_limit_type", "kill_after_time,teleport_back_after_time,block,display")
                .HasAnnotation("Npgsql:Enum:e_player_relation", "none,block,friend")
                .HasAnnotation("Npgsql:Enum:e_rule_category", "general,chat")
                .HasAnnotation("Npgsql:Enum:e_rule_target", "user,admin,vip")
                .HasAnnotation("Npgsql:Enum:e_support_type", "question,help,compliment,complaint")
                .HasAnnotation("Npgsql:Enum:e_userpanel_admin_question_answer_type", "text,check,number")
                .HasAnnotation("Npgsql:Enum:e_weapon_hash", "sniper_rifle,fire_extinguisher,compact_grenade_launcher,snowball,vintage_pistol,combat_pdw,heavy_sniper,heavy_sniper_mk2,sweeper_shotgun,micro_smg,wrench,pistol,pistol_mk2,pump_shotgun,pump_shotgun_mk2,ap_pistol,baseball,molotov,smg,smg_mk2,sticky_bomb,petrol_can,stun_gun,heavy_shotgun,minigun,golf_club,flare_gun,flare,grenade_launcher_smoke,hammer,combat_pistol,gusenberg,compact_rifle,homing_launcher,nightstick,railgun,sawn_off_shotgun,bullpup_rifle,firework,combat_mg,combat_mg_mk2,carbine_rifle,crowbar,flashlight,dagger,grenade,pool_cue,bat,pistol50,knife,mg,bullpup_shotgun,bz_gas,unarmed,grenade_launcher,night_vision,musket,proximity_mine,advanced_rifle,rpg,pipe_bomb,mini_smg,sns_pistol,sns_pistol_mk2,assault_rifle,assault_rifle_mk2,special_carbine,heavy_revolver,heavy_revolver_mk2,double_action_revolver,marksman_rifle,marksman_rifle_mk2,battle_axe,heavy_pistol,knuckle_duster,machine_pistol,marksman_pistol,machete,switch_blade,assault_shotgun,double_barrel_shotgun,assault_smg,hatchet,bottle,parachute,smoke_grenade,upn_atomizer,unholy_hellbringer,carbine_rifle_mk2,sepcial_carbine_mk2,bullpup_rifle_mk2,widowmaker")
                .HasAnnotation("Npgsql:Enum:e_weapon_type", "melee,handgun,machine_gun,assault_rifle,sniper_rifle,shotgun,heavy_weapon,thrown_weapon,rest")
                .HasAnnotation("Npgsql:Enum:vehicle_hash", "ninef,ninef2,blista,asea,asea2,boattrailer,bus,armytanker,armytrailer,armytrailer2,freighttrailer,coach,airbus,asterope,airtug,ambulance,barracks,barracks2,baller,baller2,bjxl,banshee,benson,bfinjection,biff,blazer,blazer2,blazer3,bison,bison2,bison3,boxville,boxville2,boxville3,bobcatxl,bodhi2,buccaneer,buffalo,buffalo2,bulldozer,bullet,blimp,burrito,burrito2,burrito3,burrito4,burrito5,cavalcade,cavalcade2,policet,gburrito,cablecar,caddy,caddy2,camper,carbonizzare,cheetah,comet2,cogcabrio,coquette,cutter,gresley,dilettante,dilettante2,dune,dune2,hotknife,dloader,dubsta,dubsta2,dump,rubble,docktug,dominator,emperor,emperor2,emperor3,entityxf,exemplar,elegy2,f620,fbi,fbi2,felon,felon2,feltzer2,firetruk,flatbed,forklift,fq2,fusilade,fugitive,futo,granger,gauntlet,habanero,hauler,handler,infernus,ingot,intruder,issi2,jackal,journey,jb700,khamelion,landstalker,lguard,manana,mesa,mesa2,mesa3,crusader,minivan,mixer,mixer2,monroe,mower,mule,mule2,oracle,oracle2,packer,patriot,pbus,penumbra,peyote,phantom,phoenix,picador,pounder,police,police4,police2,police3,policeold1,policeold2,pony,pony2,prairie,pranger,premier,primo,proptrailer,rancherxl,rancherxl2,rapidgt,rapidgt2,radi,ratloader,rebel,regina,rebel2,rentalbus,ruiner,rumpo,rumpo2,rhino,riot,ripley,rocoto,romero,sabregt,sadler,sadler2,sandking,sandking2,schafter2,schwarzer,scrap,seminole,sentinel,sentinel2,zion,zion2,serrano,sheriff,sheriff2,speedo,speedo2,stanier,stinger,stingergt,stockade,stockade3,stratum,sultan,superd,surano,surfer,surfer2,surge,taco,tailgater,taxi,trash,tractor,tractor2,tractor3,graintrailer,baletrailer,tiptruck,tiptruck2,tornado,tornado2,tornado3,tornado4,tourbus,towtruck,towtruck2,utillitruck,utillitruck2,utillitruck3,voodoo2,washington,stretch,youga,ztype,sanchez,sanchez2,scorcher,tribike,tribike2,tribike3,fixter,cruiser,bmx,policeb,akuma,carbonrs,bagger,bati,bati2,ruffian,daemon,double,pcj,vader,vigero,faggio2,hexer,annihilator,buzzard,buzzard2,cargobob,cargobob2,cargobob3,skylift,polmav,maverick,nemesis,frogger,frogger2,cuban800,duster,stunt,mammatus,jet,shamal,luxor,titan,lazer,cargoplane,squalo,marquis,dinghy,dinghy2,jetmax,predator,tropic,seashark,seashark2,submersible,freightcar,freight,freightcont1,freightcont2,freightgrain,tankercar,metrotrain,docktrailer,trailers,trailers2,trailers3,tvtrailer,raketrailer,tanker,trailerlogs,tr2,tr3,tr4,trflat,trailersmall,velum,adder,voltic,vacca,suntrap,impaler3,monster4,monster5,slamvan6,issi6,cerberus2,cerberus3,deathbike2,dominator6,deathbike3,impaler4,slamvan4,slamvan5,brutus,brutus2,brutus3,deathbike,dominator4,dominator5,bruiser,bruiser2,bruiser3,rcbandito,italigto,cerberus,impaler2,monster3,tulip,scarab,scarab2,scarab3,issi4,issi5,clique,deveste,vamos,imperator,imperator2,imperator3,toros,deviant,schlagen,impaler,zr380,zr3802,zr3803,nimbus,xls,xls2,seven70,fmj,bestiagts,pfister811,brickade,rumpo3,volatus,prototipo,reaper,tug,windsor2,trailers4,xa21,caddy3,vagner,phantom3,nightshark,cheetah2,torero,hauler2,trailerlarge,technical3,insurgent3,apc,tampa3,dune3,trailersmall2,halftrack,ardent,oppressor,mule3,velum2,tanker2,casco,boxville4,hydra,insurgent,insurgent2,gburrito2,technical,dinghy3,savage,enduro,guardian,lectro,kuruma,kuruma2,trash2,barracks3,valkyrie,slamvan2,rhapsody,warrener,blade,glendale,panto,dubsta3,pigalle,elegy,tempesta,italigtb,italigtb2,nero,nero2,specter,specter2,diablous,diablous2,blazer5,ruiner2,dune4,dune5,phantom2,voltic2,penetrator,boxville5,wastelander,technical2,fcr,fcr2,comet3,ruiner3,monster,sovereign,sultanrs,banshee2,faction3,minivan2,sabregt2,slamvan3,tornado5,virgo2,virgo3,innovation,hakuchou,furoregt,verlierer2,nightshade,mamba,limo2,schafter3,schafter4,schafter5,schafter6,cog55,cog552,cognoscenti,cognoscenti2,baller3,baller4,baller5,baller6,toro2,seashark3,dinghy4,tropic2,speeder2,cargobob4,supervolito,supervolito2,valkyrie2,swift2,luxor2,feltzer3,osiris,virgo,windsor,coquette3,vindicator,t20,brawler,toro,chino,miljet,besra,coquette2,swift,vigilante,bombushka,alphaz1,seabreeze,tula,havok,hunter,microlight,rogue,pyro,howard,mogul,starling,nokota,molotok,rapidgt3,retinue,cyclone,visione,lynx,gargoyle,tyrus,sheava,omnis,le7b,contender,trophytruck,trophytruck2,rallytruck,cliffhanger,bf400,tropos,brioso,tampa2,btype,submersible2,dukes,dukes2,buffalo3,dominator2,dodo,marshall,blimp2,gauntlet2,stalion,stalion2,blista2,blista3,entity2,cheburek,jester3,caracara,hotring,seasparrow,flashgt,ellie,michelli,fagaloa,dominator3,tyrant,tezeract,gb200,issi3,taipan,stafford,scramjet,strikeforce,terbyte,pbus2,oppressor2,pounder2,speedo4,freecrawler,mule4,menacer,blimp3,swinger,patriot2,tornado6,faggio3,faggio,raptor,vortex,avarus,sanctus,youga2,hakuchou2,nightblade,chimera,esskey,wolfsbane,zombiea,zombieb,defiler,daemon2,ratbike,shotaro,manchez,blazer4,jester2,massacro2,ratloader2,slamvan,z190,viseris,comet5,raiden,riata,sc1,autarch,savestra,gt500,comet4,neon,sentinel3,khanjali,barrage,volatol,akula,deluxo,stromberg,chernobog,riot2,avenger,avenger2,thruster,yosemite,hermes,hustler,streiter,revolter,pariah,kamacho,lurcher,btype2,faction,faction2,moonbeam,moonbeam2,primo2,chino2,buccaneer2,voodoo,turismo2,infernus2,gp1,ruston,btype3,paragon,paragon2,jugular,rrocket,neo,krieger,peyote2,gauntlet4,s80,caracara2,thrax,novak,zorrusso,issi7,locust,emerus,hellion,dynasty,gauntlet3,nebula,zion3,drafter,tampa,bifta,speeder,kalahari,paradise,jester,turismor,alpha,vestra,zentorno,massacro,huntley,thrust")
                .HasAnnotation("Npgsql:PostgresExtension:tsm_system_rows", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.EntityFrameworkHiLoSequence", "'EntityFrameworkHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'");

            modelBuilder.Entity("TDS_Server_DB.Entity.Admin.AdminLevelNames", b =>
                {
                    b.Property<short>("Level")
                        .HasColumnName("level")
                        .HasColumnType("smallint");

                    b.Property<ELanguage>("Language")
                        .HasColumnName("language")
                        .HasColumnType("e_language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Level", "Language");

                    b.ToTable("admin_level_names");

                    b.HasData(
                        new
                        {
                            Level = (short)0,
                            Language = ELanguage.English,
                            Name = "User"
                        },
                        new
                        {
                            Level = (short)0,
                            Language = ELanguage.German,
                            Name = "User"
                        },
                        new
                        {
                            Level = (short)1,
                            Language = ELanguage.English,
                            Name = "Supporter"
                        },
                        new
                        {
                            Level = (short)1,
                            Language = ELanguage.German,
                            Name = "Supporter"
                        },
                        new
                        {
                            Level = (short)2,
                            Language = ELanguage.English,
                            Name = "Administrator"
                        },
                        new
                        {
                            Level = (short)2,
                            Language = ELanguage.German,
                            Name = "Administrator"
                        },
                        new
                        {
                            Level = (short)3,
                            Language = ELanguage.English,
                            Name = "Projectleader"
                        },
                        new
                        {
                            Level = (short)3,
                            Language = ELanguage.German,
                            Name = "Projektleiter"
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Admin.AdminLevels", b =>
                {
                    b.Property<short>("Level")
                        .HasColumnName("level")
                        .HasColumnType("smallint");

                    b.Property<short>("ColorB")
                        .HasColumnName("color_b")
                        .HasColumnType("smallint");

                    b.Property<short>("ColorG")
                        .HasColumnName("color_g")
                        .HasColumnType("smallint");

                    b.Property<short>("ColorR")
                        .HasColumnName("color_r")
                        .HasColumnType("smallint");

                    b.HasKey("Level");

                    b.ToTable("admin_levels");

                    b.HasData(
                        new
                        {
                            Level = (short)0,
                            ColorB = (short)220,
                            ColorG = (short)220,
                            ColorR = (short)220
                        },
                        new
                        {
                            Level = (short)1,
                            ColorB = (short)113,
                            ColorG = (short)202,
                            ColorR = (short)113
                        },
                        new
                        {
                            Level = (short)2,
                            ColorB = (short)85,
                            ColorG = (short)132,
                            ColorR = (short)253
                        },
                        new
                        {
                            Level = (short)3,
                            ColorB = (short)50,
                            ColorG = (short)50,
                            ColorR = (short)222
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Bonusbot.BonusbotSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("ActionsInfoChannelId")
                        .HasColumnName("actions_info_channel_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("AdminApplicationsChannelId")
                        .HasColumnName("admin_applications_channel_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("BansInfoChannelId")
                        .HasColumnName("bans_info_channel_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("ErrorLogsChannelId")
                        .HasColumnName("error_logs_channel_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("GuildId")
                        .HasColumnName("guild_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("RefreshServerStatsFrequencySec")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("refresh_server_stats_frequency_sec")
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<bool>("SendPrivateMessageOnBan")
                        .HasColumnName("send_private_message_on_ban")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendPrivateMessageOnOfflineMessage")
                        .HasColumnName("send_private_message_on_offline_message")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("ServerInfosChannelId")
                        .HasColumnName("server_infos_channel_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("SupportRequestsChannelId")
                        .HasColumnName("support_requests_channel_id")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("bonusbot_settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionsInfoChannelId = 659088752890871818m,
                            AdminApplicationsChannelId = 659072893526736896m,
                            BansInfoChannelId = 659705941771550730m,
                            ErrorLogsChannelId = 659073884796092426m,
                            GuildId = 320309924175282177m,
                            RefreshServerStatsFrequencySec = 0,
                            SendPrivateMessageOnBan = true,
                            SendPrivateMessageOnOfflineMessage = true,
                            ServerInfosChannelId = 659073271911809037m,
                            SupportRequestsChannelId = 659073029896142855m
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Challenge.ChallengeSettings", b =>
                {
                    b.Property<EChallengeType>("Type")
                        .HasColumnName("type")
                        .HasColumnType("e_challenge_type");

                    b.Property<EChallengeFrequency>("Frequency")
                        .HasColumnName("frequency")
                        .HasColumnType("e_challenge_frequency");

                    b.Property<int>("MaxNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("max_number")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("MinNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("min_number")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Type", "Frequency");

                    b.ToTable("challenge_settings");

                    b.HasData(
                        new
                        {
                            Type = EChallengeType.Assists,
                            Frequency = EChallengeFrequency.Weekly,
                            MaxNumber = 100,
                            MinNumber = 50
                        },
                        new
                        {
                            Type = EChallengeType.BeHelpfulEnough,
                            Frequency = EChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = EChallengeType.BombDefuse,
                            Frequency = EChallengeFrequency.Weekly,
                            MaxNumber = 10,
                            MinNumber = 5
                        },
                        new
                        {
                            Type = EChallengeType.BombPlant,
                            Frequency = EChallengeFrequency.Weekly,
                            MaxNumber = 10,
                            MinNumber = 5
                        },
                        new
                        {
                            Type = EChallengeType.BuyMaps,
                            Frequency = EChallengeFrequency.Forever,
                            MaxNumber = 500,
                            MinNumber = 500
                        },
                        new
                        {
                            Type = EChallengeType.ChangeSettings,
                            Frequency = EChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = EChallengeType.CreatorOfAcceptedMap,
                            Frequency = EChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = EChallengeType.Damage,
                            Frequency = EChallengeFrequency.Weekly,
                            MaxNumber = 100000,
                            MinNumber = 20000
                        },
                        new
                        {
                            Type = EChallengeType.JoinDiscordServer,
                            Frequency = EChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = EChallengeType.Kills,
                            Frequency = EChallengeFrequency.Weekly,
                            MaxNumber = 150,
                            MinNumber = 75
                        },
                        new
                        {
                            Type = EChallengeType.Killstreak,
                            Frequency = EChallengeFrequency.Weekly,
                            MaxNumber = 7,
                            MinNumber = 3
                        },
                        new
                        {
                            Type = EChallengeType.PlayTime,
                            Frequency = EChallengeFrequency.Weekly,
                            MaxNumber = 1500,
                            MinNumber = 300
                        },
                        new
                        {
                            Type = EChallengeType.ReadTheFAQ,
                            Frequency = EChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = EChallengeType.ReadTheRules,
                            Frequency = EChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        },
                        new
                        {
                            Type = EChallengeType.ReviewMaps,
                            Frequency = EChallengeFrequency.Forever,
                            MaxNumber = 10,
                            MinNumber = 10
                        },
                        new
                        {
                            Type = EChallengeType.RoundPlayed,
                            Frequency = EChallengeFrequency.Weekly,
                            MaxNumber = 100,
                            MinNumber = 50
                        },
                        new
                        {
                            Type = EChallengeType.WriteHelpfulIssue,
                            Frequency = EChallengeFrequency.Forever,
                            MaxNumber = 1,
                            MinNumber = 1
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Challenge.PlayerChallenges", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<EChallengeType>("Challenge")
                        .HasColumnName("challenge")
                        .HasColumnType("e_challenge_type");

                    b.Property<EChallengeFrequency>("Frequency")
                        .HasColumnName("frequency")
                        .HasColumnType("e_challenge_frequency");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("amount")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("CurrentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("current_amount")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("PlayerId", "Challenge", "Frequency");

                    b.ToTable("player_challenges");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.CommandAlias", b =>
                {
                    b.Property<string>("Alias")
                        .HasColumnName("alias")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short>("Command")
                        .HasColumnName("command")
                        .HasColumnType("smallint");

                    b.HasKey("Alias", "Command");

                    b.HasIndex("Command");

                    b.ToTable("command_alias");

                    b.HasData(
                        new
                        {
                            Alias = "Announce",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "Announcement",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "ASay",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "OChat",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "OSay",
                            Command = (short)1
                        },
                        new
                        {
                            Alias = "AChat",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "ChatAdmin",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "InternChat",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "WriteAdmin",
                            Command = (short)2
                        },
                        new
                        {
                            Alias = "PBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "Permaban",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "RBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "TBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "Timeban",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "UBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "UnBan",
                            Command = (short)3
                        },
                        new
                        {
                            Alias = "GotoPlayer",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "GotoXYZ",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "Warp",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "WarpTo",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "WarpToPlayer",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "XYZ",
                            Command = (short)4
                        },
                        new
                        {
                            Alias = "RKick",
                            Command = (short)5
                        },
                        new
                        {
                            Alias = "BanLobby",
                            Command = (short)6
                        },
                        new
                        {
                            Alias = "KickLobby",
                            Command = (short)7
                        },
                        new
                        {
                            Alias = "PermaMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "PMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "RMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "TimeMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "TMute",
                            Command = (short)8
                        },
                        new
                        {
                            Alias = "EndRound",
                            Command = (short)9
                        },
                        new
                        {
                            Alias = "Next",
                            Command = (short)9
                        },
                        new
                        {
                            Alias = "Skip",
                            Command = (short)9
                        },
                        new
                        {
                            Alias = "Back",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "Leave",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "LeaveLobby",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "Mainmenu",
                            Command = (short)10
                        },
                        new
                        {
                            Alias = "Dead",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "Death",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "Die",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "Kill",
                            Command = (short)11
                        },
                        new
                        {
                            Alias = "AllChat",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "AllSay",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "G",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "GChat",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "Global",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "GlobalSay",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "PublicChat",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "PublicSay",
                            Command = (short)12
                        },
                        new
                        {
                            Alias = "TChat",
                            Command = (short)13
                        },
                        new
                        {
                            Alias = "TeamSay",
                            Command = (short)13
                        },
                        new
                        {
                            Alias = "TSay",
                            Command = (short)13
                        },
                        new
                        {
                            Alias = "PChat",
                            Command = (short)14
                        },
                        new
                        {
                            Alias = "PrivateSay",
                            Command = (short)14
                        },
                        new
                        {
                            Alias = "Coord",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "Coordinate",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "Coordinates",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "CurrentPos",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "CurrentPosition",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "GetPos",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "GetPosition",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "Pos",
                            Command = (short)15
                        },
                        new
                        {
                            Alias = "MSG",
                            Command = (short)18
                        },
                        new
                        {
                            Alias = "PM",
                            Command = (short)18
                        },
                        new
                        {
                            Alias = "PSay",
                            Command = (short)18
                        },
                        new
                        {
                            Alias = "CPC",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "ClosePM",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "ClosePrivateSay",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "StopPrivateChat",
                            Command = (short)16
                        },
                        new
                        {
                            Alias = "StopPrivateSay",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "OpenPrivateSay",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "OpenPM",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "OPC",
                            Command = (short)17
                        },
                        new
                        {
                            Alias = "UID",
                            Command = (short)19
                        },
                        new
                        {
                            Alias = "Ignore",
                            Command = (short)20
                        },
                        new
                        {
                            Alias = "IgnoreUser",
                            Command = (short)20
                        },
                        new
                        {
                            Alias = "Block",
                            Command = (short)20
                        },
                        new
                        {
                            Alias = "Unblock",
                            Command = (short)21
                        },
                        new
                        {
                            Alias = "PermaVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "PVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "RVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TimeVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TVoiceMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "PermaMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "PMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "RMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TimeMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "TMuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoicePermaMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoicePMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoiceRMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoiceTimeMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "VoiceTMute",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "MuteVoice",
                            Command = (short)23
                        },
                        new
                        {
                            Alias = "MoneyGive",
                            Command = (short)24
                        },
                        new
                        {
                            Alias = "SendMoney",
                            Command = (short)24
                        },
                        new
                        {
                            Alias = "MoneySend",
                            Command = (short)24
                        },
                        new
                        {
                            Alias = "LobbyInvite",
                            Command = (short)25
                        },
                        new
                        {
                            Alias = "InviteLobby",
                            Command = (short)25
                        },
                        new
                        {
                            Alias = "InvitePlayerLobby",
                            Command = (short)25
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.CommandInfos", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("id")
                        .HasColumnType("smallint");

                    b.Property<ELanguage>("Language")
                        .HasColumnName("language")
                        .HasColumnType("e_language");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnName("info")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id", "Language");

                    b.ToTable("command_infos");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Language = ELanguage.German,
                            Info = "Schreibt öffentlich als ein Admin."
                        },
                        new
                        {
                            Id = (short)1,
                            Language = ELanguage.English,
                            Info = "Writes public as an admin."
                        },
                        new
                        {
                            Id = (short)2,
                            Language = ELanguage.German,
                            Info = "Schreibt intern nur den Admins."
                        },
                        new
                        {
                            Id = (short)2,
                            Language = ELanguage.English,
                            Info = "Writes intern to admins only."
                        },
                        new
                        {
                            Id = (short)3,
                            Language = ELanguage.German,
                            Info = "Bannt einen Spieler vom gesamten Server."
                        },
                        new
                        {
                            Id = (short)3,
                            Language = ELanguage.English,
                            Info = "Bans a player out of the server."
                        },
                        new
                        {
                            Id = (short)4,
                            Language = ELanguage.German,
                            Info = "Teleportiert den Nutzer zu einem Spieler (evtl. in sein Auto) oder zu den angegebenen Koordinaten."
                        },
                        new
                        {
                            Id = (short)4,
                            Language = ELanguage.English,
                            Info = "Warps the user to another player (maybe in his vehicle) or to the defined coordinates."
                        },
                        new
                        {
                            Id = (short)5,
                            Language = ELanguage.German,
                            Info = "Kickt einen Spieler vom Server."
                        },
                        new
                        {
                            Id = (short)5,
                            Language = ELanguage.English,
                            Info = "Kicks a player out of the server."
                        },
                        new
                        {
                            Id = (short)6,
                            Language = ELanguage.German,
                            Info = "Bannt einen Spieler aus der Lobby, in welchem der Befehl genutzt wurde."
                        },
                        new
                        {
                            Id = (short)6,
                            Language = ELanguage.English,
                            Info = "Bans a player out of the lobby in which the command was used."
                        },
                        new
                        {
                            Id = (short)7,
                            Language = ELanguage.German,
                            Info = "Kickt einen Spieler aus der Lobby, in welchem der Befehl genutzt wurde."
                        },
                        new
                        {
                            Id = (short)7,
                            Language = ELanguage.English,
                            Info = "Kicks a player out of the lobby in which the command was used."
                        },
                        new
                        {
                            Id = (short)8,
                            Language = ELanguage.German,
                            Info = "Mutet einen Spieler im normalen Chat."
                        },
                        new
                        {
                            Id = (short)8,
                            Language = ELanguage.English,
                            Info = "Mutes a player in the normal chat."
                        },
                        new
                        {
                            Id = (short)9,
                            Language = ELanguage.German,
                            Info = "Beendet die jetzige Runde in der jeweiligen Lobby."
                        },
                        new
                        {
                            Id = (short)9,
                            Language = ELanguage.English,
                            Info = "Ends the current round in the lobby."
                        },
                        new
                        {
                            Id = (short)10,
                            Language = ELanguage.German,
                            Info = "Verlässt die jetzige Lobby."
                        },
                        new
                        {
                            Id = (short)10,
                            Language = ELanguage.English,
                            Info = "Leaves the current lobby."
                        },
                        new
                        {
                            Id = (short)11,
                            Language = ELanguage.German,
                            Info = "Tötet den Nutzer (Selbstmord)."
                        },
                        new
                        {
                            Id = (short)11,
                            Language = ELanguage.English,
                            Info = "Kills the user (suicide)."
                        },
                        new
                        {
                            Id = (short)12,
                            Language = ELanguage.German,
                            Info = "Globaler Chat, welcher überall gelesen werden kann."
                        },
                        new
                        {
                            Id = (short)12,
                            Language = ELanguage.English,
                            Info = "Global chat which can be read everywhere."
                        },
                        new
                        {
                            Id = (short)13,
                            Language = ELanguage.German,
                            Info = "Sendet die Nachricht nur zum eigenen Team."
                        },
                        new
                        {
                            Id = (short)13,
                            Language = ELanguage.English,
                            Info = "Sends the message to the current team only."
                        },
                        new
                        {
                            Id = (short)14,
                            Language = ELanguage.German,
                            Info = "Gibt die Position des Spielers aus."
                        },
                        new
                        {
                            Id = (short)14,
                            Language = ELanguage.English,
                            Info = "Outputs the position of the player."
                        },
                        new
                        {
                            Id = (short)15,
                            Language = ELanguage.German,
                            Info = "Sendet eine Nachricht im Privatchat."
                        },
                        new
                        {
                            Id = (short)15,
                            Language = ELanguage.English,
                            Info = "Sends a message in private chat."
                        },
                        new
                        {
                            Id = (short)16,
                            Language = ELanguage.German,
                            Info = "Schließt den Privatchat oder nimmt eine Privatchat-Anfrage zurück."
                        },
                        new
                        {
                            Id = (short)16,
                            Language = ELanguage.English,
                            Info = "Closes a private chat or withdraws a private chat request."
                        },
                        new
                        {
                            Id = (short)17,
                            Language = ELanguage.German,
                            Info = "Sendet eine Anfrage für einen Privatchat oder nimmt die Anfrage eines Users an."
                        },
                        new
                        {
                            Id = (short)17,
                            Language = ELanguage.English,
                            Info = "Sends a private chat request or accepts the request of another user."
                        },
                        new
                        {
                            Id = (short)18,
                            Language = ELanguage.German,
                            Info = "Private Nachricht an einen bestimmten Spieler."
                        },
                        new
                        {
                            Id = (short)18,
                            Language = ELanguage.English,
                            Info = "Private message to a specific player."
                        },
                        new
                        {
                            Id = (short)19,
                            Language = ELanguage.German,
                            Info = "Gibt dir deine User-Id aus."
                        },
                        new
                        {
                            Id = (short)19,
                            Language = ELanguage.English,
                            Info = "Outputs your user-id to yourself."
                        },
                        new
                        {
                            Id = (short)20,
                            Language = ELanguage.German,
                            Info = "Fügt das Ziel in deine Blocklist ein, sodass du keine Nachrichten mehr von ihm liest, er dich nicht einladen kann usw."
                        },
                        new
                        {
                            Id = (short)20,
                            Language = ELanguage.English,
                            Info = "Adds the target into your blocklist so you won't see messages from him, he can't invite you anymore etc."
                        },
                        new
                        {
                            Id = (short)21,
                            Language = ELanguage.German,
                            Info = "Entfernt das Ziel aus der Blockliste."
                        },
                        new
                        {
                            Id = (short)21,
                            Language = ELanguage.English,
                            Info = "Removes the target from the blocklist."
                        },
                        new
                        {
                            Id = (short)23,
                            Language = ELanguage.German,
                            Info = "Mutet einen Spieler im Voice-Chat."
                        },
                        new
                        {
                            Id = (short)23,
                            Language = ELanguage.English,
                            Info = "Mutes a player in the voice-chat."
                        },
                        new
                        {
                            Id = (short)24,
                            Language = ELanguage.German,
                            Info = "Gibt einem Spieler Geld."
                        },
                        new
                        {
                            Id = (short)24,
                            Language = ELanguage.English,
                            Info = "Gives money to a player."
                        },
                        new
                        {
                            Id = (short)25,
                            Language = ELanguage.German,
                            Info = "Ladet einen Spieler in die eigene Lobby ein (falls möglich)."
                        },
                        new
                        {
                            Id = (short)25,
                            Language = ELanguage.English,
                            Info = "Invites a player to your lobby (if possible)."
                        },
                        new
                        {
                            Id = (short)26,
                            Language = ELanguage.German,
                            Info = "Befehl zum schnellen Testen von Codes."
                        },
                        new
                        {
                            Id = (short)26,
                            Language = ELanguage.English,
                            Info = "Command for quick testing of codes."
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.Commands", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnName("command")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LobbyOwnerCanUse")
                        .HasColumnName("lobby_owner_can_use")
                        .HasColumnType("boolean");

                    b.Property<short?>("NeededAdminLevel")
                        .HasColumnName("needed_admin_level")
                        .HasColumnType("smallint");

                    b.Property<short?>("NeededDonation")
                        .HasColumnName("needed_donation")
                        .HasColumnType("smallint");

                    b.Property<bool>("VipCanUse")
                        .HasColumnName("vip_can_use")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NeededAdminLevel");

                    b.ToTable("commands");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Command = "AdminSay",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)2,
                            Command = "AdminChat",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)3,
                            Command = "Ban",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)2,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)4,
                            Command = "Goto",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)2,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)5,
                            Command = "Kick",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)6,
                            Command = "LobbyBan",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)7,
                            Command = "LobbyKick",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)8,
                            Command = "Mute",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)9,
                            Command = "NextMap",
                            LobbyOwnerCanUse = true,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)10,
                            Command = "LobbyLeave",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)11,
                            Command = "Suicide",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)12,
                            Command = "GlobalChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)13,
                            Command = "TeamChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)14,
                            Command = "PrivateChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)15,
                            Command = "Position",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)16,
                            Command = "ClosePrivateChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)17,
                            Command = "OpenPrivateChat",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)18,
                            Command = "PrivateMessage",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)19,
                            Command = "UserId",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)20,
                            Command = "BlockUser",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)21,
                            Command = "UnblockUser",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)22,
                            Command = "LoadMapOfOthers",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)23,
                            Command = "VoiceMute",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)1,
                            VipCanUse = true
                        },
                        new
                        {
                            Id = (short)24,
                            Command = "GiveMoney",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)25,
                            Command = "LobbyInvitePlayer",
                            LobbyOwnerCanUse = false,
                            VipCanUse = false
                        },
                        new
                        {
                            Id = (short)26,
                            Command = "Test",
                            LobbyOwnerCanUse = false,
                            NeededAdminLevel = (short)3,
                            VipCanUse = false
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.GangEntities.GangMembers", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<int>("GangId")
                        .HasColumnName("gang_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("join_time")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<short>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rank")
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<int?>("RankNavigationGangId")
                        .HasColumnName("rank_navigation_gang_id")
                        .HasColumnType("integer");

                    b.Property<short?>("RankNavigationRank")
                        .HasColumnName("rank_navigation_rank")
                        .HasColumnType("smallint");

                    b.HasKey("PlayerId");

                    b.HasIndex("GangId");

                    b.HasIndex("RankNavigationGangId", "RankNavigationRank");

                    b.ToTable("gang_members");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.GangEntities.GangRankPermissions", b =>
                {
                    b.Property<int>("GangId")
                        .HasColumnName("gang_id")
                        .HasColumnType("integer");

                    b.Property<short>("InviteMembers")
                        .HasColumnName("invite_members")
                        .HasColumnType("smallint");

                    b.Property<short>("KickMembers")
                        .HasColumnName("kick_members")
                        .HasColumnType("smallint");

                    b.Property<short>("ManagePermissions")
                        .HasColumnName("manage_permissions")
                        .HasColumnType("smallint");

                    b.Property<short>("ManageRanks")
                        .HasColumnName("manage_ranks")
                        .HasColumnType("smallint");

                    b.Property<short>("StartGangwar")
                        .HasColumnName("start_gangwar")
                        .HasColumnType("smallint");

                    b.HasKey("GangId");

                    b.ToTable("gang_rank_permissions");

                    b.HasData(
                        new
                        {
                            GangId = -1,
                            InviteMembers = (short)5,
                            KickMembers = (short)5,
                            ManagePermissions = (short)5,
                            ManageRanks = (short)5,
                            StartGangwar = (short)5
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.GangEntities.GangRanks", b =>
                {
                    b.Property<int>("GangId")
                        .HasColumnName("gang_id")
                        .HasColumnType("integer");

                    b.Property<short>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("GangId", "Rank");

                    b.ToTable("gang_ranks");

                    b.HasData(
                        new
                        {
                            GangId = -1,
                            Rank = (short)0,
                            Name = "-"
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.GangEntities.Gangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int?>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("integer");

                    b.Property<string>("Short")
                        .IsRequired()
                        .HasColumnName("short")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("gangs");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Short = "-",
                            TeamId = -5
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.GangEntities.GangwarAreas", b =>
                {
                    b.Property<int>("MapId")
                        .HasColumnName("map_id")
                        .HasColumnType("integer");

                    b.Property<int>("AttackCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("attack_count")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("DefendCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("defend_count")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("LastAttacked")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_attacked")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("'2019-1-1'::timestamp");

                    b.Property<int>("OwnerGangId")
                        .HasColumnName("owner_gang_id")
                        .HasColumnType("integer");

                    b.HasKey("MapId");

                    b.HasIndex("OwnerGangId");

                    b.ToTable("gangwar_areas");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.Lobbies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<short?>("AmountLifes")
                        .HasColumnName("amount_lifes")
                        .HasColumnType("smallint");

                    b.Property<float>("AroundSpawnPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("around_spawn_point")
                        .HasColumnType("real")
                        .HasDefaultValueSql("3");

                    b.Property<DateTime>("CreateTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<float>("DefaultSpawnRotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("default_spawn_rotation")
                        .HasColumnType("real")
                        .HasDefaultValueSql("0");

                    b.Property<float>("DefaultSpawnX")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("default_spawn_x")
                        .HasColumnType("real")
                        .HasDefaultValueSql("0");

                    b.Property<float>("DefaultSpawnY")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("default_spawn_y")
                        .HasColumnType("real")
                        .HasDefaultValueSql("0");

                    b.Property<float>("DefaultSpawnZ")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("default_spawn_z")
                        .HasColumnType("real")
                        .HasDefaultValueSql("9000");

                    b.Property<bool>("IsOfficial")
                        .HasColumnName("is_official")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporary")
                        .HasColumnName("is_temporary")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SpawnAgainAfterDeathMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("spawn_again_after_death_ms")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("400");

                    b.Property<short>("StartArmor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_armor")
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("100");

                    b.Property<short>("StartHealth")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_health")
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("100");

                    b.Property<ELobbyType>("Type")
                        .HasColumnName("type")
                        .HasColumnType("e_lobby_type");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("lobbies");

                    b.HasData(
                        new
                        {
                            Id = -4,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = 0f,
                            DefaultSpawnY = 0f,
                            DefaultSpawnZ = 0f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "MainMenu",
                            OwnerId = -1,
                            SpawnAgainAfterDeathMs = 0,
                            StartArmor = (short)0,
                            StartHealth = (short)0,
                            Type = ELobbyType.MainMenu
                        },
                        new
                        {
                            Id = -1,
                            AmountLifes = (short)1,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = 0f,
                            DefaultSpawnY = 0f,
                            DefaultSpawnZ = 0f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "Arena",
                            OwnerId = -1,
                            SpawnAgainAfterDeathMs = 400,
                            StartArmor = (short)0,
                            StartHealth = (short)0,
                            Type = ELobbyType.Arena
                        },
                        new
                        {
                            Id = -2,
                            AmountLifes = (short)1,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = 0f,
                            DefaultSpawnY = 0f,
                            DefaultSpawnZ = 0f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "GangLobby",
                            OwnerId = -1,
                            SpawnAgainAfterDeathMs = 400,
                            StartArmor = (short)0,
                            StartHealth = (short)0,
                            Type = ELobbyType.GangLobby
                        },
                        new
                        {
                            Id = -3,
                            AmountLifes = (short)1,
                            AroundSpawnPoint = 0f,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSpawnRotation = 0f,
                            DefaultSpawnX = 0f,
                            DefaultSpawnY = 0f,
                            DefaultSpawnZ = 0f,
                            IsOfficial = true,
                            IsTemporary = false,
                            Name = "MapCreateLobby",
                            OwnerId = -1,
                            SpawnAgainAfterDeathMs = 400,
                            StartArmor = (short)0,
                            StartHealth = (short)0,
                            Type = ELobbyType.MapCreateLobby
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyKillingspreeRewards", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnName("lobby_id")
                        .HasColumnType("integer");

                    b.Property<short>("KillsAmount")
                        .HasColumnName("kills_amount")
                        .HasColumnType("smallint");

                    b.Property<short?>("HealthOrArmor")
                        .HasColumnName("health_or_armor")
                        .HasColumnType("smallint");

                    b.Property<short?>("OnlyArmor")
                        .HasColumnName("only_armor")
                        .HasColumnType("smallint");

                    b.Property<short?>("OnlyHealth")
                        .HasColumnName("only_health")
                        .HasColumnType("smallint");

                    b.HasKey("LobbyId", "KillsAmount");

                    b.ToTable("killingspree_rewards");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            KillsAmount = (short)3,
                            HealthOrArmor = (short)30
                        },
                        new
                        {
                            LobbyId = -1,
                            KillsAmount = (short)5,
                            HealthOrArmor = (short)50
                        },
                        new
                        {
                            LobbyId = -1,
                            KillsAmount = (short)10,
                            HealthOrArmor = (short)100
                        },
                        new
                        {
                            LobbyId = -1,
                            KillsAmount = (short)15,
                            HealthOrArmor = (short)100
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyMapSettings", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnName("lobby_id")
                        .HasColumnType("integer");

                    b.Property<int>("MapLimitTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("map_limit_time")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("10");

                    b.Property<EMapLimitType>("MapLimitType")
                        .HasColumnName("map_limit_type")
                        .HasColumnType("e_map_limit_type");

                    b.HasKey("LobbyId");

                    b.ToTable("lobby_map_settings");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            MapLimitTime = 10,
                            MapLimitType = EMapLimitType.KillAfterTime
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyMaps", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnName("lobby_id")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnName("map_id")
                        .HasColumnType("integer");

                    b.HasKey("LobbyId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("lobby_maps");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            MapId = -1
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyRewards", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnName("lobby_id")
                        .HasColumnType("integer");

                    b.Property<double>("MoneyPerAssist")
                        .HasColumnName("money_per_assist")
                        .HasColumnType("double precision");

                    b.Property<double>("MoneyPerDamage")
                        .HasColumnName("money_per_damage")
                        .HasColumnType("double precision");

                    b.Property<double>("MoneyPerKill")
                        .HasColumnName("money_per_kill")
                        .HasColumnType("double precision");

                    b.HasKey("LobbyId");

                    b.ToTable("lobby_rewards");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            MoneyPerAssist = 10.0,
                            MoneyPerDamage = 0.10000000000000001,
                            MoneyPerKill = 20.0
                        },
                        new
                        {
                            LobbyId = -2,
                            MoneyPerAssist = 10.0,
                            MoneyPerDamage = 0.10000000000000001,
                            MoneyPerKill = 20.0
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyRoundSettings", b =>
                {
                    b.Property<int>("LobbyId")
                        .HasColumnName("lobby_id")
                        .HasColumnType("integer");

                    b.Property<int>("BombDefuseTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bomb_defuse_time_ms")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("8000");

                    b.Property<int>("BombDetonateTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bomb_detonate_time_ms")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("45000");

                    b.Property<int>("BombPlantTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bomb_plant_time_ms")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("3000");

                    b.Property<int>("CountdownTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("countdown_time")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("5");

                    b.Property<bool>("MixTeamsAfterRound")
                        .HasColumnName("mix_teams_after_round")
                        .HasColumnType("boolean");

                    b.Property<int>("RoundTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("round_time")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("240");

                    b.Property<bool>("ShowRanking")
                        .HasColumnName("show_ranking")
                        .HasColumnType("boolean");

                    b.HasKey("LobbyId");

                    b.ToTable("lobby_round_settings");

                    b.HasData(
                        new
                        {
                            LobbyId = -1,
                            BombDefuseTimeMs = 8000,
                            BombDetonateTimeMs = 45000,
                            BombPlantTimeMs = 3000,
                            CountdownTime = 5,
                            MixTeamsAfterRound = true,
                            RoundTime = 240,
                            ShowRanking = false
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyWeapons", b =>
                {
                    b.Property<EWeaponHash>("Hash")
                        .HasColumnName("hash")
                        .HasColumnType("e_weapon_hash");

                    b.Property<int>("Lobby")
                        .HasColumnName("lobby")
                        .HasColumnType("integer");

                    b.Property<int>("Ammo")
                        .HasColumnName("ammo")
                        .HasColumnType("integer");

                    b.Property<short?>("Damage")
                        .HasColumnName("damage")
                        .HasColumnType("smallint");

                    b.Property<float?>("HeadMultiplicator")
                        .HasColumnName("head_multiplicator")
                        .HasColumnType("real");

                    b.HasKey("Hash", "Lobby");

                    b.HasIndex("Lobby");

                    b.ToTable("lobby_weapons");

                    b.HasData(
                        new
                        {
                            Hash = EWeaponHash.SniperRifle,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.FireExtinguisher,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.CompactGrenadeLauncher,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Snowball,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.VintagePistol,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatPDW,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavySniper,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavySniperMk2,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.SweeperShotgun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.MicroSMG,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Wrench,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Pistol,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.PistolMk2,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.PumpShotgun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.PumpShotgunMk2,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.APPistol,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Baseball,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Molotov,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.SMG,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.SMGMk2,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.StickyBomb,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.PetrolCan,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.StunGun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavyShotgun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Minigun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.GolfClub,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.FlareGun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Flare,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.GrenadeLauncherSmoke,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Hammer,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatPistol,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Gusenberg,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.CompactRifle,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.HomingLauncher,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Nightstick,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Railgun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.SawnOffShotgun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.BullpupRifle,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Firework,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatMG,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatMGMk2,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.CarbineRifle,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Crowbar,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Flashlight,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Dagger,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Grenade,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.PoolCue,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Bat,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Pistol50,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Knife,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.MG,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.BullpupShotgun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.BZGas,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.GrenadeLauncher,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.NightVision,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Musket,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.ProximityMine,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.AdvancedRifle,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.RPG,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.PipeBomb,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.MiniSMG,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.SNSPistol,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.SNSPistolMk2,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultRifle,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultRifleMk2,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.SpecialCarbine,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavyRevolver,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavyRevolverMk2,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.DoubleActionRevolver,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.MarksmanRifle,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.MarksmanRifleMk2,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.BattleAxe,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavyPistol,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.KnuckleDuster,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.MachinePistol,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.MarksmanPistol,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Machete,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.SwitchBlade,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultShotgun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.DoubleBarrelShotgun,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultSMG,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Hatchet,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Bottle,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Parachute,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.SmokeGrenade,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.UpnAtomizer,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.UnholyHellbringer,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.CarbineRifleMK2,
                            Lobby = -1,
                            Ammo = 99999
                        },
                        new
                        {
                            Hash = EWeaponHash.Widowmaker,
                            Lobby = -1,
                            Ammo = 99999
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Log.LogAdmins", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("AsDonator")
                        .HasColumnName("as_donator")
                        .HasColumnType("boolean");

                    b.Property<bool>("AsVip")
                        .HasColumnName("as_vip")
                        .HasColumnType("boolean");

                    b.Property<string>("LengthOrEndTime")
                        .HasColumnName("length_or_end_time")
                        .HasColumnType("text");

                    b.Property<int?>("Lobby")
                        .HasColumnName("lobby")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason")
                        .HasColumnType("text");

                    b.Property<int>("Source")
                        .HasColumnName("source")
                        .HasColumnType("integer");

                    b.Property<int?>("Target")
                        .HasColumnName("target")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<ELogType>("Type")
                        .HasColumnName("type")
                        .HasColumnType("e_log_type");

                    b.HasKey("Id");

                    b.ToTable("log_admins");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Log.LogChats", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("IsAdminChat")
                        .HasColumnName("is_admin_chat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTeamChat")
                        .HasColumnName("is_team_chat")
                        .HasColumnType("boolean");

                    b.Property<int?>("Lobby")
                        .HasColumnName("lobby")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<int>("Source")
                        .HasColumnName("source")
                        .HasColumnType("integer");

                    b.Property<int?>("Target")
                        .HasColumnName("target")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id");

                    b.ToTable("log_chats");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Log.LogErrors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnName("info")
                        .HasColumnType("text");

                    b.Property<int?>("Source")
                        .HasColumnName("source")
                        .HasColumnType("integer");

                    b.Property<string>("StackTrace")
                        .HasColumnName("stack_trace")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id");

                    b.ToTable("log_errors");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Log.LogKills", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("DeadId")
                        .HasColumnName("dead_id")
                        .HasColumnType("integer");

                    b.Property<int>("KillerId")
                        .HasColumnName("killer_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<long>("WeaponId")
                        .HasColumnName("weapon_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("log_kills");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Log.LogRests", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<IPAddress>("Ip")
                        .HasColumnName("ip")
                        .HasColumnType("inet");

                    b.Property<int?>("Lobby")
                        .HasColumnName("lobby")
                        .HasColumnType("integer");

                    b.Property<string>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Source")
                        .HasColumnName("source")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<ELogType>("Type")
                        .HasColumnName("type")
                        .HasColumnType("e_log_type");

                    b.HasKey("Id");

                    b.ToTable("log_rests");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerBans", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<int>("LobbyId")
                        .HasColumnName("lobby_id")
                        .HasColumnType("integer");

                    b.Property<int?>("AdminId")
                        .HasColumnName("admin_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTimestamp")
                        .HasColumnName("end_timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IP")
                        .HasColumnName("ip")
                        .HasColumnType("text");

                    b.Property<bool>("PreventConnection")
                        .HasColumnName("prevent_connection")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason")
                        .HasColumnType("text");

                    b.Property<decimal?>("SCId")
                        .HasColumnName("sc_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("SCName")
                        .HasColumnName("sc_name")
                        .HasColumnType("text");

                    b.Property<string>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start_timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("PlayerId", "LobbyId");

                    b.HasIndex("AdminId");

                    b.HasIndex("IP");

                    b.HasIndex("LobbyId");

                    b.HasIndex("SCId");

                    b.HasIndex("SCName");

                    b.HasIndex("Serial");

                    b.ToTable("player_bans");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerClothes", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMale")
                        .HasColumnName("is_male")
                        .HasColumnType("boolean");

                    b.HasKey("PlayerId");

                    b.ToTable("player_clothes");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerLobbyStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<int>("LobbyId")
                        .HasColumnName("lobby_id")
                        .HasColumnType("integer");

                    b.Property<int>("Assists")
                        .HasColumnName("assists")
                        .HasColumnType("integer");

                    b.Property<int>("Damage")
                        .HasColumnName("damage")
                        .HasColumnType("integer");

                    b.Property<int>("Deaths")
                        .HasColumnName("deaths")
                        .HasColumnType("integer");

                    b.Property<int>("Kills")
                        .HasColumnName("kills")
                        .HasColumnType("integer");

                    b.Property<int>("MostAssistsInARound")
                        .HasColumnName("most_assists_in_a_round")
                        .HasColumnType("integer");

                    b.Property<int>("MostDamageInARound")
                        .HasColumnName("most_damage_in_a_round")
                        .HasColumnType("integer");

                    b.Property<int>("MostKillsInARound")
                        .HasColumnName("most_kills_in_a_round")
                        .HasColumnType("integer");

                    b.Property<int>("TotalAssists")
                        .HasColumnName("total_assists")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDamage")
                        .HasColumnName("total_damage")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDeaths")
                        .HasColumnName("total_deaths")
                        .HasColumnType("integer");

                    b.Property<int>("TotalKills")
                        .HasColumnName("total_kills")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMapsBought")
                        .HasColumnName("total_maps_bought")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRounds")
                        .HasColumnName("total_rounds")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId", "LobbyId");

                    b.HasIndex("LobbyId");

                    b.ToTable("player_lobby_stats");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerMapFavourites", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnName("map_id")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("player_map_favourites");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerMapRatings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnName("map_id")
                        .HasColumnType("integer");

                    b.Property<short>("Rating")
                        .HasColumnName("rating")
                        .HasColumnType("smallint");

                    b.HasKey("PlayerId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("player_map_ratings");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerRelations", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<int>("TargetId")
                        .HasColumnName("target_id")
                        .HasColumnType("integer");

                    b.Property<EPlayerRelation>("Relation")
                        .HasColumnName("relation")
                        .HasColumnType("e_player_relation");

                    b.HasKey("PlayerId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("player_relations");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerSettings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowDataTransfer")
                        .HasColumnName("allow_data_transfer")
                        .HasColumnType("boolean");

                    b.Property<bool>("Bloodscreen")
                        .HasColumnName("bloodscreen")
                        .HasColumnType("boolean");

                    b.Property<string>("DateTimeFormat")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_time_format")
                        .HasColumnType("text")
                        .HasDefaultValue("yyyy'-'MM'-'dd HH':'mm':'ss");

                    b.Property<decimal>("DiscordUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("discord_user_id")
                        .HasColumnType("numeric(20,0)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("FloatingDamageInfo")
                        .HasColumnName("floating_damage_info")
                        .HasColumnType("boolean");

                    b.Property<bool>("Hitsound")
                        .HasColumnName("hitsound")
                        .HasColumnType("boolean");

                    b.Property<ELanguage>("Language")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("language")
                        .HasColumnType("e_language")
                        .HasDefaultValue(ELanguage.English);

                    b.Property<string>("MapBorderColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("map_border_color")
                        .HasColumnType("text")
                        .HasDefaultValue("rgba(150,0,0,0.35)");

                    b.Property<bool>("ShowConfettiAtRanking")
                        .HasColumnName("show_confetti_at_ranking")
                        .HasColumnType("boolean");

                    b.Property<string>("Timezone")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timezone")
                        .HasColumnType("text")
                        .HasDefaultValue("UTC");

                    b.Property<bool>("Voice3D")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("voice3d")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("VoiceAutoVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("voice_auto_volume")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<float>("VoiceVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("voice_volume")
                        .HasColumnType("real")
                        .HasDefaultValue(6f);

                    b.HasKey("PlayerId");

                    b.ToTable("player_settings");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastFreeUsernameChange")
                        .HasColumnName("last_free_username_change")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastLoginTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_login_timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("LastMapsBoughtCounterReduce")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_maps_bought_counter_reduce")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<bool>("LoggedIn")
                        .HasColumnName("logged_in")
                        .HasColumnType("boolean");

                    b.Property<int>("MapsBoughtCounter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("maps_bought_counter")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("Money")
                        .HasColumnName("money")
                        .HasColumnType("integer");

                    b.Property<int?>("MuteTime")
                        .HasColumnName("mute_time")
                        .HasColumnType("integer");

                    b.Property<int>("PlayTime")
                        .HasColumnName("play_time")
                        .HasColumnType("integer");

                    b.Property<int?>("VoiceMuteTime")
                        .HasColumnName("voice_mute_time")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.ToTable("player_stats");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerTotalStats", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<long>("Money")
                        .HasColumnName("money")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerId");

                    b.ToTable("player_total_stats");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.Players", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AdminLeaderId")
                        .HasColumnName("admin_leader_id")
                        .HasColumnType("integer");

                    b.Property<short>("AdminLvl")
                        .HasColumnName("admin_lvl")
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("Donation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("donation")
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsVip")
                        .HasColumnName("is_vip")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("RegisterTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("register_timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<decimal>("SCId")
                        .HasColumnName("sc_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("SCName")
                        .IsRequired()
                        .HasColumnName("sc_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AdminLeaderId");

                    b.HasIndex("AdminLvl");

                    b.ToTable("players");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AdminLvl = (short)0,
                            Donation = (short)0,
                            IsVip = false,
                            Name = "System",
                            Password = "",
                            RegisterTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SCId = 0m,
                            SCName = "System"
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Announcements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("announcements");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.FreeroamDefaultVehicle", b =>
                {
                    b.Property<EFreeroamVehicleType>("VehicleType")
                        .HasColumnName("vehicle_type")
                        .HasColumnType("e_freeroam_vehicle_type");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying");

                    b.Property<VehicleHash>("VehicleHash")
                        .HasColumnName("vehicle_hash")
                        .HasColumnType("vehicle_hash");

                    b.HasKey("VehicleType");

                    b.ToTable("freeroam_default_vehicle");

                    b.HasData(
                        new
                        {
                            VehicleType = EFreeroamVehicleType.Car,
                            VehicleHash = VehicleHash.Pfister811
                        },
                        new
                        {
                            VehicleType = EFreeroamVehicleType.Helicopter,
                            VehicleHash = VehicleHash.Akula
                        },
                        new
                        {
                            VehicleType = EFreeroamVehicleType.Plane,
                            VehicleHash = VehicleHash.Pyro
                        },
                        new
                        {
                            VehicleType = EFreeroamVehicleType.Bike,
                            VehicleHash = VehicleHash.Hakuchou2
                        },
                        new
                        {
                            VehicleType = EFreeroamVehicleType.Boat,
                            VehicleHash = VehicleHash.Speeder2
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Maps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int?>("CreatorId")
                        .HasColumnName("creator_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Name")
                        .HasAnnotation("Npgsql:IndexMethod", "hash");

                    b.ToTable("maps");

                    b.HasData(
                        new
                        {
                            Id = -4,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = -1,
                            Name = "All Sniper"
                        },
                        new
                        {
                            Id = -3,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = -1,
                            Name = "All Bombs"
                        },
                        new
                        {
                            Id = -2,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = -1,
                            Name = "All Normals"
                        },
                        new
                        {
                            Id = -1,
                            CreateTimestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = -1,
                            Name = "All"
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Offlinemessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<bool>("Seen")
                        .HasColumnName("seen")
                        .HasColumnType("boolean");

                    b.Property<int>("SourceId")
                        .HasColumnName("source_id")
                        .HasColumnType("integer");

                    b.Property<int>("TargetId")
                        .HasColumnName("target_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("offlinemessages");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<short>("BlipColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("blip_color")
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)4);

                    b.Property<short>("ColorB")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color_b")
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)255);

                    b.Property<short>("ColorG")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color_g")
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)255);

                    b.Property<short>("ColorR")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color_r")
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)255);

                    b.Property<short>("Index")
                        .HasColumnName("index")
                        .HasColumnType("smallint");

                    b.Property<int>("Lobby")
                        .HasColumnName("lobby")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100)
                        .HasDefaultValue("Spectator");

                    b.Property<int>("SkinHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("skin_hash")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Lobby");

                    b.ToTable("teams");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            BlipColor = (short)4,
                            ColorB = (short)255,
                            ColorG = (short)255,
                            ColorR = (short)255,
                            Index = (short)0,
                            Lobby = -4,
                            Name = "Spectator",
                            SkinHash = 1004114196
                        },
                        new
                        {
                            Id = -2,
                            BlipColor = (short)4,
                            ColorB = (short)255,
                            ColorG = (short)255,
                            ColorR = (short)255,
                            Index = (short)0,
                            Lobby = -1,
                            Name = "Spectator",
                            SkinHash = 0
                        },
                        new
                        {
                            Id = -3,
                            BlipColor = (short)52,
                            ColorB = (short)0,
                            ColorG = (short)150,
                            ColorR = (short)0,
                            Index = (short)1,
                            Lobby = -1,
                            Name = "SWAT",
                            SkinHash = -1920001264
                        },
                        new
                        {
                            Id = -4,
                            BlipColor = (short)1,
                            ColorB = (short)0,
                            ColorG = (short)0,
                            ColorR = (short)150,
                            Index = (short)2,
                            Lobby = -1,
                            Name = "Terrorist",
                            SkinHash = 275618457
                        },
                        new
                        {
                            Id = -5,
                            BlipColor = (short)4,
                            ColorB = (short)255,
                            ColorG = (short)255,
                            ColorR = (short)255,
                            Index = (short)0,
                            Lobby = -2,
                            Name = "None",
                            SkinHash = 0
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Weapons", b =>
                {
                    b.Property<EWeaponHash>("Hash")
                        .HasColumnName("hash")
                        .HasColumnType("e_weapon_hash");

                    b.Property<short>("DefaultDamage")
                        .HasColumnName("default_damage")
                        .HasColumnType("smallint");

                    b.Property<float>("DefaultHeadMultiplicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("default_head_multiplicator")
                        .HasColumnType("real")
                        .HasDefaultValueSql("1");

                    b.Property<EWeaponType>("Type")
                        .HasColumnName("type")
                        .HasColumnType("e_weapon_type");

                    b.HasKey("Hash");

                    b.ToTable("weapons");

                    b.HasData(
                        new
                        {
                            Hash = EWeaponHash.SniperRifle,
                            DefaultDamage = (short)101,
                            DefaultHeadMultiplicator = 2f,
                            Type = EWeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.FireExtinguisher,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.CompactGrenadeLauncher,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Snowball,
                            DefaultDamage = (short)10,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.VintagePistol,
                            DefaultDamage = (short)34,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatPDW,
                            DefaultDamage = (short)28,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavySniper,
                            DefaultDamage = (short)216,
                            DefaultHeadMultiplicator = 2f,
                            Type = EWeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavySniperMk2,
                            DefaultDamage = (short)216,
                            DefaultHeadMultiplicator = 2f,
                            Type = EWeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.SweeperShotgun,
                            DefaultDamage = (short)162,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.MicroSMG,
                            DefaultDamage = (short)21,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.Wrench,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Pistol,
                            DefaultDamage = (short)26,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.PistolMk2,
                            DefaultDamage = (short)26,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.PumpShotgun,
                            DefaultDamage = (short)58,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.PumpShotgunMk2,
                            DefaultDamage = (short)58,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.APPistol,
                            DefaultDamage = (short)28,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Baseball,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Molotov,
                            DefaultDamage = (short)10,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.SMG,
                            DefaultDamage = (short)22,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.SMGMk2,
                            DefaultDamage = (short)22,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.StickyBomb,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.PetrolCan,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.StunGun,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavyShotgun,
                            DefaultDamage = (short)117,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Minigun,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.GolfClub,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.FlareGun,
                            DefaultDamage = (short)50,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Flare,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.GrenadeLauncherSmoke,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Hammer,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatPistol,
                            DefaultDamage = (short)27,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Gusenberg,
                            DefaultDamage = (short)34,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.CompactRifle,
                            DefaultDamage = (short)34,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.HomingLauncher,
                            DefaultDamage = (short)150,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Nightstick,
                            DefaultDamage = (short)35,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Railgun,
                            DefaultDamage = (short)50,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.SawnOffShotgun,
                            DefaultDamage = (short)160,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.BullpupRifle,
                            DefaultDamage = (short)32,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.Firework,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatMG,
                            DefaultDamage = (short)28,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.CombatMGMk2,
                            DefaultDamage = (short)28,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.CarbineRifle,
                            DefaultDamage = (short)32,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.Crowbar,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Flashlight,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Dagger,
                            DefaultDamage = (short)45,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Grenade,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.PoolCue,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Bat,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Pistol50,
                            DefaultDamage = (short)51,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Knife,
                            DefaultDamage = (short)45,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.MG,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.BullpupShotgun,
                            DefaultDamage = (short)112,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.BZGas,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Unarmed,
                            DefaultDamage = (short)15,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.GrenadeLauncher,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.NightVision,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Rest
                        },
                        new
                        {
                            Hash = EWeaponHash.Musket,
                            DefaultDamage = (short)165,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.ProximityMine,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.AdvancedRifle,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.RPG,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.HeavyWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.PipeBomb,
                            DefaultDamage = (short)100,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.MiniSMG,
                            DefaultDamage = (short)22,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.SNSPistol,
                            DefaultDamage = (short)28,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.SNSPistolMk2,
                            DefaultDamage = (short)28,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultRifle,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultRifleMk2,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.SpecialCarbine,
                            DefaultDamage = (short)32,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavyRevolver,
                            DefaultDamage = (short)110,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavyRevolverMk2,
                            DefaultDamage = (short)110,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.DoubleActionRevolver,
                            DefaultDamage = (short)110,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.MarksmanRifle,
                            DefaultDamage = (short)65,
                            DefaultHeadMultiplicator = 2f,
                            Type = EWeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.MarksmanRifleMk2,
                            DefaultDamage = (short)65,
                            DefaultHeadMultiplicator = 2f,
                            Type = EWeaponType.SniperRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.BattleAxe,
                            DefaultDamage = (short)50,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.HeavyPistol,
                            DefaultDamage = (short)40,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.KnuckleDuster,
                            DefaultDamage = (short)30,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.MachinePistol,
                            DefaultDamage = (short)20,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.MarksmanPistol,
                            DefaultDamage = (short)150,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.Machete,
                            DefaultDamage = (short)45,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.SwitchBlade,
                            DefaultDamage = (short)50,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultShotgun,
                            DefaultDamage = (short)192,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.DoubleBarrelShotgun,
                            DefaultDamage = (short)166,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Shotgun
                        },
                        new
                        {
                            Hash = EWeaponHash.AssaultSMG,
                            DefaultDamage = (short)23,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.Hatchet,
                            DefaultDamage = (short)50,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Melee
                        },
                        new
                        {
                            Hash = EWeaponHash.Bottle,
                            DefaultDamage = (short)10,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.Parachute,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Rest
                        },
                        new
                        {
                            Hash = EWeaponHash.SmokeGrenade,
                            DefaultDamage = (short)0,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.ThrownWeapon
                        },
                        new
                        {
                            Hash = EWeaponHash.UpnAtomizer,
                            DefaultDamage = (short)80,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.Handgun
                        },
                        new
                        {
                            Hash = EWeaponHash.UnholyHellbringer,
                            DefaultDamage = (short)23,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.MachineGun
                        },
                        new
                        {
                            Hash = EWeaponHash.CarbineRifleMK2,
                            DefaultDamage = (short)32,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        },
                        new
                        {
                            Hash = EWeaponHash.Widowmaker,
                            DefaultDamage = (short)32,
                            DefaultHeadMultiplicator = 1f,
                            Type = EWeaponType.AssaultRifle
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Server.ServerDailyStats", b =>
                {
                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date")
                        .HasColumnType("date")
                        .HasDefaultValueSql("timezone('utc', CURRENT_DATE)");

                    b.Property<int>("AmountLogins")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("amount_logins")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountRegistrations")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("amount_registrations")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("ArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("arena_rounds_played")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("CustomArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("custom_arena_rounds_played")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<short>("PlayerPeak")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("player_peak")
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Date");

                    b.ToTable("server_daily_stats");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Server.ServerSettings", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AFKKickAfterSec")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("afk_kick_after_sec")
                        .HasColumnType("integer")
                        .HasDefaultValue(25);

                    b.Property<int>("AmountPlayersAllowedInGangwarTeamBeforeCountCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("amount_players_allowed_in_gangwar_team_before_count_check")
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<int>("AmountWeeklyChallenges")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("amount_weekly_challenges")
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<float>("ArenaNewMapProbabilityPercent")
                        .HasColumnName("arena_new_map_probability_percent")
                        .HasColumnType("real");

                    b.Property<int>("CloseApplicationAfterDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("close_application_after_days")
                        .HasColumnType("integer")
                        .HasDefaultValue(7);

                    b.Property<int>("DeleteApplicationAfterDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_application_after_days")
                        .HasColumnType("integer")
                        .HasDefaultValue(14);

                    b.Property<int>("DeleteOfflineMessagesAfterDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_offline_messages_after_days")
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<long>("DeleteRequestsDaysAfterClose")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_requests_days_after_close")
                        .HasColumnType("bigint")
                        .HasDefaultValue(30L);

                    b.Property<float>("DistanceToSpotToDefuse")
                        .HasColumnName("distance_to_spot_to_defuse")
                        .HasColumnType("real");

                    b.Property<float>("DistanceToSpotToPlant")
                        .HasColumnName("distance_to_spot_to_plant")
                        .HasColumnType("real");

                    b.Property<bool>("ErrorToPlayerOnNonExistentCommand")
                        .HasColumnName("error_to_player_on_non_existent_command")
                        .HasColumnType("boolean");

                    b.Property<string>("GamemodeName")
                        .IsRequired()
                        .HasColumnName("gamemode_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<long>("GangwarActionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gangwar_action_time")
                        .HasColumnType("bigint")
                        .HasDefaultValue(900L);

                    b.Property<int>("GangwarAreaAttackCooldownMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gangwar_area_attack_cooldown_minutes")
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<bool>("GangwarAttackerCanBeMore")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gangwar_attacker_can_be_more")
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("GangwarOwnerCanBeMore")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gangwar_owner_can_be_more")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("GangwarPreparationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gangwar_preparation_time")
                        .HasColumnType("bigint")
                        .HasDefaultValue(180L);

                    b.Property<float>("GiveMoneyFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("give_money_fee")
                        .HasColumnType("real")
                        .HasDefaultValue(0.05f);

                    b.Property<int>("GiveMoneyMinAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("give_money_min_amount")
                        .HasColumnType("integer")
                        .HasDefaultValue(100);

                    b.Property<int>("KillingSpreeMaxSecondsUntilNextKill")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("killing_spree_max_seconds_until_next_kill")
                        .HasColumnType("integer")
                        .HasDefaultValue(18);

                    b.Property<int>("MapBuyBasePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("map_buy_base_price")
                        .HasColumnType("integer")
                        .HasDefaultValue(1000);

                    b.Property<float>("MapBuyCounterMultiplicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("map_buy_counter_multiplicator")
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.Property<int>("MapRatingAmountForCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("map_rating_amount_for_check")
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<float>("MinMapRatingForNewMaps")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("min_map_rating_for_new_maps")
                        .HasColumnType("real")
                        .HasDefaultValue(3f);

                    b.Property<int>("MinPlayersOnlineForGangwar")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("min_players_online_for_gangwar")
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<float>("MultiplierRankingAssists")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("multiplier_ranking_assists")
                        .HasColumnType("real")
                        .HasDefaultValue(25f);

                    b.Property<float>("MultiplierRankingDamage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("multiplier_ranking_damage")
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.Property<float>("MultiplierRankingKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("multiplier_ranking_kills")
                        .HasColumnType("real")
                        .HasDefaultValue(75f);

                    b.Property<float>("NametagMaxDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nametag_max_distance")
                        .HasColumnType("real")
                        .HasDefaultValue(625f);

                    b.Property<int>("ReduceMapsBoughtCounterAfterMinute")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reduce_maps_bought_counter_after_minute")
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<int>("SaveLogsCooldownMinutes")
                        .HasColumnName("save_logs_cooldown_minutes")
                        .HasColumnType("integer");

                    b.Property<int>("SavePlayerDataCooldownMinutes")
                        .HasColumnName("save_player_data_cooldown_minutes")
                        .HasColumnType("integer");

                    b.Property<int>("SaveSeasonsCooldownMinutes")
                        .HasColumnName("save_seasons_cooldown_minutes")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowNametagOnlyOnAiming")
                        .HasColumnName("show_nametag_only_on_aiming")
                        .HasColumnType("boolean");

                    b.Property<int>("TeamOrderCooldownMs")
                        .HasColumnName("team_order_cooldown_ms")
                        .HasColumnType("integer");

                    b.Property<bool>("ToChatOnNonExistentCommand")
                        .HasColumnName("to_chat_on_non_existent_command")
                        .HasColumnType("boolean");

                    b.Property<int>("UsernameChangeCooldownDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("username_change_cooldown_days")
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<int>("UsernameChangeCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("username_change_cost")
                        .HasColumnType("integer")
                        .HasDefaultValue(20000);

                    b.HasKey("Id");

                    b.ToTable("server_settings");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            AFKKickAfterSec = 0,
                            AmountPlayersAllowedInGangwarTeamBeforeCountCheck = 0,
                            AmountWeeklyChallenges = 0,
                            ArenaNewMapProbabilityPercent = 2f,
                            CloseApplicationAfterDays = 0,
                            DeleteApplicationAfterDays = 0,
                            DeleteOfflineMessagesAfterDays = 0,
                            DeleteRequestsDaysAfterClose = 0L,
                            DistanceToSpotToDefuse = 3f,
                            DistanceToSpotToPlant = 3f,
                            ErrorToPlayerOnNonExistentCommand = true,
                            GamemodeName = "tdm",
                            GangwarActionTime = 0L,
                            GangwarAreaAttackCooldownMinutes = 0,
                            GangwarAttackerCanBeMore = false,
                            GangwarOwnerCanBeMore = false,
                            GangwarPreparationTime = 0L,
                            GiveMoneyFee = 0.05f,
                            GiveMoneyMinAmount = 100,
                            KillingSpreeMaxSecondsUntilNextKill = 18,
                            MapBuyBasePrice = 0,
                            MapBuyCounterMultiplicator = 0f,
                            MapRatingAmountForCheck = 10,
                            MinMapRatingForNewMaps = 3f,
                            MinPlayersOnlineForGangwar = 0,
                            MultiplierRankingAssists = 25f,
                            MultiplierRankingDamage = 1f,
                            MultiplierRankingKills = 75f,
                            NametagMaxDistance = 80f,
                            ReduceMapsBoughtCounterAfterMinute = 0,
                            SaveLogsCooldownMinutes = 1,
                            SavePlayerDataCooldownMinutes = 1,
                            SaveSeasonsCooldownMinutes = 1,
                            ShowNametagOnlyOnAiming = true,
                            TeamOrderCooldownMs = 3000,
                            ToChatOnNonExistentCommand = false,
                            UsernameChangeCooldownDays = 0,
                            UsernameChangeCost = 0
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Server.ServerTotalStats", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("arena_rounds_played")
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("CustomArenaRoundsPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("custom_arena_rounds_played")
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<short>("PlayerPeak")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("player_peak")
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.ToTable("server_total_stats");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            ArenaRoundsPlayed = 0L,
                            CustomArenaRoundsPlayed = 0L,
                            PlayerPeak = (short)0
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.ApplicationAnswers", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnName("question_id")
                        .HasColumnType("integer");

                    b.Property<string>("Answer")
                        .HasColumnName("answer")
                        .HasColumnType("text");

                    b.HasKey("ApplicationId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("application_answers");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.ApplicationInvitations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("AdminId")
                        .HasColumnName("admin_id")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("application_invitations");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.ApplicationQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("AdminId")
                        .HasColumnName("admin_id")
                        .HasColumnType("integer");

                    b.Property<EUserpanelAdminQuestionAnswerType>("AnswerType")
                        .HasColumnName("answer_type")
                        .HasColumnType("e_userpanel_admin_question_answer_type");

                    b.Property<string>("Question")
                        .HasColumnName("question")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("application_questions");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.Applications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<bool>("Closed")
                        .HasColumnName("closed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("applications");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.FAQs", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<ELanguage>("Language")
                        .HasColumnName("language")
                        .HasColumnType("e_language");

                    b.Property<string>("Answer")
                        .HasColumnName("answer")
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .HasColumnName("question")
                        .HasColumnType("text");

                    b.HasKey("Id", "Language");

                    b.ToTable("fa_qs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = ELanguage.English,
                            Answer = "With the END key on your keyboard.",
                            Question = "How do I activate my cursor?"
                        },
                        new
                        {
                            Id = 1,
                            Language = ELanguage.German,
                            Answer = "Mit der ENDE Taste auf deiner Tastatur.",
                            Question = "Wie aktiviere ich meinen Cursor?"
                        },
                        new
                        {
                            Id = 2,
                            Language = ELanguage.English,
                            Answer = @"In case of a transfer of TDS-V, the database will also be transferred, but without the player data (for data protection reasons).
However, if you want to keep your data, you must allow it in the user panel.
The data does not contain any sensitive information - IPs are not stored, passwords are secure (hash + salt).",
                            Question = "What is the 'Allow data transfer' setting in the userpanel?"
                        },
                        new
                        {
                            Id = 2,
                            Language = ELanguage.German,
                            Answer = @"Im Falle einer Übergabe von TDS-V wird die Datenbank auch übergeben, jedoch ohne die Spieler-Daten (aus Datenschutz-Gründen).
Falls du jedoch deine Daten auch dann weiterhin behalten willst, musst du es im Userpanel erlauben.
Die Daten beinhalten keine sensiblen Informationen - IPs werden nicht gespeichert, Passwörter sind sicher (Hash + Salt).",
                            Question = "Was ist die 'Erlaube Daten-Transfer' Einstellung im Userpanel?"
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.RuleTexts", b =>
                {
                    b.Property<int>("RuleId")
                        .HasColumnName("rule_id")
                        .HasColumnType("integer");

                    b.Property<ELanguage>("Language")
                        .HasColumnName("language")
                        .HasColumnType("e_language");

                    b.Property<string>("RuleStr")
                        .HasColumnName("rule_str")
                        .HasColumnType("text");

                    b.HasKey("RuleId", "Language");

                    b.ToTable("rule_texts");

                    b.HasData(
                        new
                        {
                            RuleId = 1,
                            Language = ELanguage.English,
                            RuleStr = @"Teaming with opposing players is strictly forbidden!
This means the deliberate sparing, better treatment, letting or similar of certain opposing players without the permission of the own team members.
If such behaviour is noticed, it can lead to severe penalties and is permanently noted."
                        },
                        new
                        {
                            RuleId = 1,
                            Language = ELanguage.German,
                            RuleStr = @"Teamen mit gegnerischen Spielern ist strengstens verboten!
Damit ist das absichtliche Verschonen, besser Behandeln, Lassen o.ä. von bestimmten gegnerischen Spielern ohne Erlaubnis der eigenen Team-Mitglieder gemeint.
Wird ein solches Verhalten bemerkt, kann es zu starken Strafen führen und es wird permanent notiert."
                        },
                        new
                        {
                            RuleId = 2,
                            Language = ELanguage.English,
                            RuleStr = @"The normal chat in an official lobby has rules, the other chats (private lobbies, dirty) none.
By 'normal chat' we mean all chat methods (global, team, etc.) in the 'normal' chat area.
The chat rules listed here are ONLY for the normal chat in an official lobby.
Chats in private lobbies can be freely monitored by the lobby owners."
                        },
                        new
                        {
                            RuleId = 2,
                            Language = ELanguage.German,
                            RuleStr = @"Der normale Chat in einer offiziellen Lobby hat Regeln, die restlichen Chats (private Lobbys, dirty) jedoch keine.
Unter 'normaler Chat' versteht man alle Chats-Methode (global, team usw.) im 'normal' Chat-Bereich.
Die hier aufgelisteten Chat-Regeln richten sich NUR an den normalen Chat in einer offiziellen Lobby.
Chats in privaten Lobbys können frei von den Lobby-Besitzern überwacht werden."
                        },
                        new
                        {
                            RuleId = 3,
                            Language = ELanguage.English,
                            RuleStr = "Admins have to follow the same rules as players do."
                        },
                        new
                        {
                            RuleId = 3,
                            Language = ELanguage.German,
                            RuleStr = "Admins haben genauso die Regeln zu befolgen wie auch die Spieler."
                        },
                        new
                        {
                            RuleId = 4,
                            Language = ELanguage.English,
                            RuleStr = @"Exploitation of the commands is strictly forbidden!
Admin commands for 'punishing' (kick, mute, ban etc.) may only be used for violations of rules."
                        },
                        new
                        {
                            RuleId = 4,
                            Language = ELanguage.German,
                            RuleStr = @"Ausnutzung der Befehle ist strengstens verboten!
Admin-Befehle zum 'Bestrafen' (Kick, Mute, Ban usw.) dürfen auch nur bei Verstößen gegen Regeln genutzt werden."
                        },
                        new
                        {
                            RuleId = 5,
                            Language = ELanguage.English,
                            RuleStr = @"If you are not sure if the time for e.g. Mute or Bann could be too high,
ask your team leader - if you can't reach someone quickly, choose a lower time.
Too high times are bad, too low times are no problem."
                        },
                        new
                        {
                            RuleId = 5,
                            Language = ELanguage.German,
                            RuleStr = @"Wenn du dir nicht sicher bist, ob die Zeit für z.B. Mute oder Bann zu hoch sein könnte,
frage deinen Team-Leiter - kannst du niemanden auf die Schnelle erreichen, so entscheide dich für eine niedrigere Zeit.
Zu hohe Zeiten sind schlecht, zu niedrige kein Problem."
                        },
                        new
                        {
                            RuleId = 6,
                            Language = ELanguage.English,
                            RuleStr = "All admin rules with the exception of activity duty are also valid for VIPs."
                        },
                        new
                        {
                            RuleId = 6,
                            Language = ELanguage.German,
                            RuleStr = "Alle Admin-Regeln mit Ausnahme von Aktivitäts-Pflicht sind auch gültig für VIPs."
                        },
                        new
                        {
                            RuleId = 7,
                            Language = ELanguage.English,
                            RuleStr = "The VIPs are free to decide whether they want to use their rights or not."
                        },
                        new
                        {
                            RuleId = 7,
                            Language = ELanguage.German,
                            RuleStr = "Den VIPs ist es frei überlassen, ob sie ihre Rechte nutzen wollen oder nicht."
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.Rules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<ERuleCategory>("Category")
                        .HasColumnName("category")
                        .HasColumnType("e_rule_category");

                    b.Property<ERuleTarget>("Target")
                        .HasColumnName("target")
                        .HasColumnType("e_rule_target");

                    b.HasKey("Id");

                    b.ToTable("rules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.User
                        },
                        new
                        {
                            Id = 2,
                            Category = ERuleCategory.Chat,
                            Target = ERuleTarget.User
                        },
                        new
                        {
                            Id = 3,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.Admin
                        },
                        new
                        {
                            Id = 4,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.Admin
                        },
                        new
                        {
                            Id = 5,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.Admin
                        },
                        new
                        {
                            Id = 6,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.VIP
                        },
                        new
                        {
                            Id = 7,
                            Category = ERuleCategory.General,
                            Target = ERuleTarget.VIP
                        });
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.SupportRequestMessages", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnName("request_id")
                        .HasColumnType("integer");

                    b.Property<int>("MessageIndex")
                        .HasColumnName("message_index")
                        .HasColumnType("integer");

                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', CURRENT_DATE)");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.HasKey("RequestId", "MessageIndex");

                    b.HasIndex("AuthorId");

                    b.ToTable("support_request_messages");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.SupportRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AtleastAdminLevel")
                        .HasColumnName("atleast_admin_level")
                        .HasColumnType("integer");

                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnName("close_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("timezone('utc', CURRENT_DATE)");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<ESupportType>("Type")
                        .HasColumnName("type")
                        .HasColumnType("e_support_type");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("support_requests");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Admin.AdminLevelNames", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Admin.AdminLevels", "LevelNavigation")
                        .WithMany("AdminLevelNames")
                        .HasForeignKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Challenge.PlayerChallenges", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("Challenges")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.CommandAlias", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Command.Commands", "CommandNavigation")
                        .WithMany("CommandAlias")
                        .HasForeignKey("Command")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.CommandInfos", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Command.Commands", "IdNavigation")
                        .WithMany("CommandInfos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Command.Commands", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Admin.AdminLevels", "NeededAdminLevelNavigation")
                        .WithMany("Commands")
                        .HasForeignKey("NeededAdminLevel")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.GangEntities.GangMembers", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.GangEntities.Gangs", "Gang")
                        .WithMany("Members")
                        .HasForeignKey("GangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithOne("GangMemberNavigation")
                        .HasForeignKey("TDS_Server_DB.Entity.GangEntities.GangMembers", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.GangEntities.GangRanks", "RankNavigation")
                        .WithMany()
                        .HasForeignKey("RankNavigationGangId", "RankNavigationRank");
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.GangEntities.GangRankPermissions", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.GangEntities.Gangs", "Gang")
                        .WithOne("RankPermissions")
                        .HasForeignKey("TDS_Server_DB.Entity.GangEntities.GangRankPermissions", "GangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.GangEntities.GangRanks", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.GangEntities.Gangs", "Gang")
                        .WithMany("Ranks")
                        .HasForeignKey("GangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.GangEntities.Gangs", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Owner")
                        .WithOne("OwnedGang")
                        .HasForeignKey("TDS_Server_DB.Entity.GangEntities.Gangs", "OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TDS_Server_DB.Entity.Rest.Teams", "Team")
                        .WithMany("Gangs")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.GangEntities.GangwarAreas", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Rest.Maps", "Map")
                        .WithOne("GangwarArea")
                        .HasForeignKey("TDS_Server_DB.Entity.GangEntities.GangwarAreas", "MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.GangEntities.Gangs", "OwnerGang")
                        .WithMany("GangwarAreas")
                        .HasForeignKey("OwnerGangId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.Lobbies", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Owner")
                        .WithMany("Lobbies")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyKillingspreeRewards", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithMany("LobbyKillingspreeRewards")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyMapSettings", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithOne("LobbyMapSettings")
                        .HasForeignKey("TDS_Server_DB.Entity.LobbyEntities.LobbyMapSettings", "LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyMaps", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithMany("LobbyMaps")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Rest.Maps", "Map")
                        .WithMany("LobbyMaps")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyRewards", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithOne("LobbyRewards")
                        .HasForeignKey("TDS_Server_DB.Entity.LobbyEntities.LobbyRewards", "LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyRoundSettings", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithOne("LobbyRoundSettings")
                        .HasForeignKey("TDS_Server_DB.Entity.LobbyEntities.LobbyRoundSettings", "LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.LobbyEntities.LobbyWeapons", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Rest.Weapons", "HashNavigation")
                        .WithMany("LobbyWeapons")
                        .HasForeignKey("Hash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.LobbyEntities.Lobbies", "LobbyNavigation")
                        .WithMany("LobbyWeapons")
                        .HasForeignKey("Lobby")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerBans", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Admin")
                        .WithMany("PlayerBansAdmin")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TDS_Server_DB.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithMany("PlayerBans")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("PlayerBansPlayer")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerClothes", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithOne("PlayerClothes")
                        .HasForeignKey("TDS_Server_DB.Entity.Player.PlayerClothes", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerLobbyStats", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.LobbyEntities.Lobbies", "Lobby")
                        .WithMany("PlayerLobbyStats")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("PlayerLobbyStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerMapFavourites", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Rest.Maps", "Map")
                        .WithMany("PlayerMapFavourites")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("PlayerMapFavourites")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerMapRatings", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Rest.Maps", "Map")
                        .WithMany("PlayerMapRatings")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("PlayerMapRatings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerRelations", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithMany("PlayerRelationsPlayer")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Target")
                        .WithMany("PlayerRelationsTarget")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerSettings", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithOne("PlayerSettings")
                        .HasForeignKey("TDS_Server_DB.Entity.Player.PlayerSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerStats", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithOne("PlayerStats")
                        .HasForeignKey("TDS_Server_DB.Entity.Player.PlayerStats", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.PlayerTotalStats", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithOne("PlayerTotalStats")
                        .HasForeignKey("TDS_Server_DB.Entity.Player.PlayerTotalStats", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Player.Players", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "AdminLeader")
                        .WithMany("AdminMembers")
                        .HasForeignKey("AdminLeaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TDS_Server_DB.Entity.Admin.AdminLevels", "AdminLvlNavigation")
                        .WithMany("Players")
                        .HasForeignKey("AdminLvl")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Maps", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Creator")
                        .WithMany("Maps")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Offlinemessages", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Source")
                        .WithMany("OfflinemessagesSource")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Target")
                        .WithMany("OfflinemessagesTarget")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Rest.Teams", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.LobbyEntities.Lobbies", "LobbyNavigation")
                        .WithMany("Teams")
                        .HasForeignKey("Lobby")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.ApplicationAnswers", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Userpanel.Applications", "Application")
                        .WithMany("Answers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Userpanel.ApplicationQuestions", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.ApplicationInvitations", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Admin")
                        .WithMany("ApplicationInvitations")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Userpanel.Applications", "Application")
                        .WithMany("Invitations")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.ApplicationQuestions", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Admin")
                        .WithMany("ApplicationQuestions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.Applications", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Player")
                        .WithOne("Application")
                        .HasForeignKey("TDS_Server_DB.Entity.Userpanel.Applications", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.RuleTexts", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Userpanel.Rules", "Rule")
                        .WithMany("RuleTexts")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.SupportRequestMessages", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Author")
                        .WithMany("SupportRequestMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDS_Server_DB.Entity.Userpanel.SupportRequests", "Request")
                        .WithMany("Messages")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDS_Server_DB.Entity.Userpanel.SupportRequests", b =>
                {
                    b.HasOne("TDS_Server_DB.Entity.Player.Players", "Author")
                        .WithOne("SupportRequests")
                        .HasForeignKey("TDS_Server_DB.Entity.Userpanel.SupportRequests", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
